{"config":{"lang":["pt","en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/","title":"Instala\u00e7\u00e3o do SDK de C++ 2.1.4 (NAO v4)","text":"<p>Para que seja poss\u00edvel desenvolver programas que controlem os rob\u00f4s, \u00e9 necess\u00e1rio instalar o SDK (Software Development Kit - Kit de Desenvolvimento de Software) do NAO v4 para C++.</p> <p>Esse SDK possui APIs e pacotes importantes para o desenvolvimento de tais programas. </p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/#requisitos","title":"Requisitos","text":"<ul> <li>Linux Ubuntu 12.04 (Precise Pangolin) ou superior - RECOMENDADA: Linux Ubuntu 16.04 (Xenial Xerus);</li> <li>Compilador GCC - vers\u00e3o 4.4 ou superior;</li> <li>Uma IDE de C++ de sua prefer\u00eancia (vide Visual Studio, qtCreator ou Eclipse IDE).</li> </ul> <p>Para verificar a vers\u00e3o do compilador GCC instalado na sua m\u00e1quina, execute o comando:</p> <pre><code>gcc --version\n</code></pre> <p>Caso o GCC n\u00e3o esteja instalado no seu sistema, execute:</p> <pre><code>sudo apt update\nsudo apt install build-essential\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/#verifique-novamente-a-versao-do-gcc","title":"Verifique novamente a vers\u00e3o do GCC","text":"<pre><code>gcc --version\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/#qibuild","title":"qiBuild","text":"<p>O qiBuild \u00e9 uma ferramenta para criar projetos entre sistemas operacionais diversos usando o CMake e ser\u00e1 necess\u00e1rio para o prop\u00f3sito do presente tutorial.</p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/#instalacao-das-dependencias","title":"Instala\u00e7\u00e3o das depend\u00eancias","text":"<p>Depend\u00eancias s\u00e3o pacotes necess\u00e1rios para rodar um programa espec\u00edfico. No caso, para instalar o qiBuild ser\u00e3o necess\u00e1rios os seguintes pacotes:</p> <ul> <li>build-essential, que cont\u00e9m as ferramentas necess\u00e1rias para compilar c\u00f3digos-fonte;</li> <li>CMake, ferramenta para simplificar a compila\u00e7\u00e3o entre diversos sistemas operacionais;</li> <li>pip (20.3.4), gerenciador de instala\u00e7\u00e3o de pacotes do python3;</li> </ul> <pre><code>sudo apt update\nsudo apt install build-essential cmake python-pip\npip install 'pip==20.3.4'\n</code></pre> <p>Obs.: Voc\u00ea provavelmente receber\u00e1 warnings do pip no seu terminal, sugerindo o upgrade do pip. Apenas ignore esse aviso, pois o referido upgrade pode corromper o pip.</p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/#instalacao-do-qibuild","title":"Instala\u00e7\u00e3o do qiBuild","text":"<p>Para instalar o qiBuild, execute o seguinte c\u00f3digo no terminal:</p> <pre><code>pip install qibuild --user\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/#configuracao-do-qibuild","title":"Configura\u00e7\u00e3o do qiBuild","text":"<p>Digite o c\u00f3digo abaixo. Voc\u00ea dever\u00e1 escolher o gerador (recomendado usar o Unix Makefiles) e o compilador de sua escolha.</p> <pre><code>qibuild config --wizard\n</code></pre> <p>Para os testes do presente tutorial, deixar o compilador como \"None\" n\u00e3o implicar\u00e1 em problemas. Al\u00e9m disso, voc\u00ea sempre pode reconfigurar seu qiBuild executando o c\u00f3digo abaixo no diret\u00f3rio padr\u00e3o \"/~\".</p> <p>Resultado: um arquivo \u00e9 criado em <code>~/.config/qi/qibuild.xml</code>. Ele ser\u00e1 compartilhado por todas as worktrees que voc\u00ea criar.</p> <p>Obs.: worktrees s\u00e3o ambientes de trabalho, nesse caso, do qiBuild.</p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/#inicializacao-do-qibuild","title":"Inicializa\u00e7\u00e3o do qiBuild","text":"<ol> <li>Ser\u00e1 necess\u00e1rio criar uma pasta em um local. Supondo que se crie uma pasta de nome \"worktree\" na pasta Downloads, seu caminho ser\u00e1:</li> </ol> <p>Exemplo de caminho: \"~/Downloads/worktree\"</p> <p>Obs.: N\u00c3O criar worktree em diret\u00f3rios com acentos ortogr\u00e1ficos no nome, pois isso gera erro de decodifica\u00e7\u00e3o com o qiBuild.</p> <ol> <li>Acesse a pasta em um terminal:</li> </ol> <pre><code>cd caminho/para/worktree\n</code></pre> <ol> <li>Uma vez dentro da pasta, execute o seguinte comando para inicializar o qiBuild (criar pastas ocultas necess\u00e1rias para a compila\u00e7\u00e3o dos programas do NAO v4):</li> </ol> <pre><code>qibuild init\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/#sdk-c-214-nao-v4","title":"SDK C++ 2.1.4 (NAO v4)","text":""},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/#download","title":"Download","text":"<p>Para baixar o SDK de C++, siga os seguintes passos:</p> <ol> <li>Visite o site da Aldebaran Robotics.</li> <li>Acesse o sub-menu \"SDK\".</li> <li>Na aba \"Linux\", clique em <code>Former Versions</code>.</li> <li>Selecione o C++ SDK (vers\u00e3o 2.1.4) e clique no \u00edcone de download.</li> <li>Na prompt que aparecer, selecione a op\u00e7\u00e3o \"Salvar arquivo\".</li> </ol> <p>Obs.: Muito cuidado ao selecionar a op\u00e7\u00e3o correta de acordo com seu sistema operacional.</p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/#instalacao-e-configuracao","title":"Instala\u00e7\u00e3o e configura\u00e7\u00e3o","text":"<ol> <li> <p>Extraia o arquivo baixado na worktree criada anteriormente.</p> </li> <li> <p>Supondo que o nome do arquivo extra\u00eddo seja \"naoqi-sdk-2.1.4.13-linux64\", acesse o seguinte diret\u00f3rio:</p> </li> </ol> <pre><code>cd caminho/para/worktree/naoqi-sdk-2.1.4.13-linux64/doc/dev/cpp/examples\n</code></pre> <ol> <li>Crie um toolchain com o seguinte c\u00f3digo (adicione o caminho para a pasta extra\u00edda e substitua no c\u00f3digo abaixo):</li> </ol> <pre><code>$ qitoolchain create minhatoolchain /caminho/para/naoqi-sdk-2.1.4.13-linux64/toolchain.xml\n</code></pre> <p>Em \"minhatoolchain\", deve ser inserido um nome de sua prefer\u00eancia.</p> <ol> <li>Configurando ambiente para a toolchain criada:</li> </ol> <pre><code>qibuild add-config minhatoolchain -t minhatoolchain --default\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v4/#teste-do-qibuild-e-do-sdk","title":"Teste do qiBuild e do SDK","text":"<ol> <li>Acesse o diret\u00f3rio do teste \"core/sayhelloworld\" e corrija poss\u00edveis erros de compila\u00e7\u00e3o com o c\u00f3digo abaixo:</li> </ol> <pre><code>cd core/sayhelloworld\necho \"set(CMAKE_CXX_FLAGS \"-D_GLIBCXX_USE_CXX11_ABI=0\")\" &gt;&gt; CMakeLists.txt\n</code></pre> <ol> <li>Compile o hello world de teste usando:</li> </ol> <pre><code>qibuild configure\nqibuild make\n</code></pre> <ol> <li>Execute o bin\u00e1rio do sayhelloworld para teste:</li> </ol> <pre><code>cd build-minhatoolchain/sdk/bin\n./sayhelloworld \"Ol\u00e1\"\n</code></pre> <p>Caso o bin\u00e1rio rode e resulte no erro \"Cannot connect to tcp://Ol\u00e1:9559\", o SDK foi instalado com sucesso.</p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/","title":"Instala\u00e7\u00e3o do SDK de C++ 2.8.5 (NAOqi 2.8)","text":"<p>Para que seja poss\u00edvel desenvolver programas que controlem os rob\u00f4s, \u00e9 necess\u00e1rio instalar o SDK (Software Development Kit - Kit de Desenvolvimento de Software) de C++ para o NAO v6 (com NAOqi 2.8).</p> <p>Esse SDK possui APIs e pacotes importantes para o desenvolvimento de tais programas. </p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/#requisitos","title":"Requisitos","text":"<ul> <li>Linux Ubuntu 16.04 (Xenial Xerus);</li> <li>Compilador GCC - vers\u00e3o 4.8.2 ou superior;</li> <li>Uma IDE de C++ de sua prefer\u00eancia (vide Visual Studio).</li> <li>Python 2.7</li> </ul> <p>Para verificar a vers\u00e3o do compilador GCC instalado na sua m\u00e1quina, execute o comando:</p> <pre><code>gcc --version\n</code></pre> <p>Caso o GCC n\u00e3o esteja instalado no seu sistema, execute:</p> <pre><code>sudo apt update\nsudo apt install build-essential\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/#verifique-novamente-a-versao-do-gcc","title":"Verifique novamente a vers\u00e3o do GCC","text":"<pre><code>gcc --version\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/#qibuild","title":"qiBuild","text":"<p>O qiBuild \u00e9 uma ferramenta para criar projetos entre sistemas operacionais diversos usando o CMake e ser\u00e1 necess\u00e1rio para o prop\u00f3sito do presente tutorial.</p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/#instalacao-das-dependencias","title":"Instala\u00e7\u00e3o das depend\u00eancias","text":"<p>Depend\u00eancias s\u00e3o pacotes necess\u00e1rios para rodar um programa espec\u00edfico. No caso, para instalar o qiBuild ser\u00e3o necess\u00e1rios os seguintes pacotes:</p> <ul> <li>build-essential, que cont\u00e9m as ferramentas necess\u00e1rias para compilar c\u00f3digos-fonte;</li> <li>Cmake, ferramenta para simplificar a compila\u00e7\u00e3o entre diversos sistemas operacionais;</li> <li>Python-pip, gerenciador de instala\u00e7\u00e3o de pacotes do Python 2;</li> </ul> <pre><code>sudo apt update\nsudo apt install build-essential cmake python-pip\n\n# Atualizando vers\u00e3o do pip para \u00faltima vers\u00e3o de suporte ao Python 2.7\npip install 'pip==20.3.4'\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/#instalacao-do-qibuild","title":"Instala\u00e7\u00e3o do qiBuild","text":"<p>Para instalar o qiBuild, execute o seguinte c\u00f3digo no terminal:</p> <pre><code>pip2 install qibuild --user\n</code></pre> <p>Obs.: N\u00c3O ATUALIZAR PIP AUTOMATICAMENTE (COMO SUGERE O PIP no TERMINAL) (o suporte do pip ao Python 2 chegou ao fim, sua atualiza\u00e7\u00e3o autom\u00e1tica corrompe o Python 2 do sistema);</p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/#configuracao-do-qibuild","title":"Configura\u00e7\u00e3o do qiBuild","text":"<p>Digite o seguinte c\u00f3digo. Voc\u00ea dever\u00e1 escolher o gerador (recomendado usar o Unix Makefiles) e o compilador de sua escolha.</p> <pre><code>qibuild config --wizard\n</code></pre> <p>Resultado: um arquivo \u00e9 criado em <code>~/.config/qi/qibuild.xml</code>. Ele ser\u00e1 compartilhado por todas as worktrees que voc\u00ea criar.</p> <p>Obs.: worktrees s\u00e3o ambientes de trabalho, nesse caso, do qiBuild.</p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/#inicializacao-do-qibuild","title":"Inicializa\u00e7\u00e3o do qiBuild","text":"<ol> <li>Ser\u00e1 necess\u00e1rio criar uma pasta em um local. Supondo que se crie uma pasta de nome \"worktree\" na \u00c1rea de Trabalho, seu caminho ser\u00e1:</li> </ol> <p>Exemplo de caminho: \"/\u00c1rea de Trabalho/worktree\"</p> <ol> <li>Acesse a pasta em um terminal:</li> </ol> <pre><code>cd '\u00c1rea de Trabalho'/worktree\n</code></pre> <ol> <li>Uma vez dentro da pasta, execute o seguinte comando para inicializar o qiBuild:</li> </ol> <pre><code>qibuild init\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/#testando-o-qibuild","title":"Testando o qiBuild","text":"<p>Nativamente, existe um exemplo test\u00e1vel intr\u00ednseco ao qiBuild, e vamos us\u00e1-lo para testar a instala\u00e7\u00e3o correta da ferramenta.</p> <ol> <li>Criar um diret\u00f3rio dentro da worktree com o comando (lembre-se de estar na worktree no terminal):</li> </ol> <pre><code>qisrc create myFirstExample\n</code></pre> <ol> <li>Acessar a pasta criada no terminal</li> </ol> <pre><code>cd myfirstexample\n</code></pre> <ol> <li>Criar o diretorio build dentro da worktree:</li> </ol> <pre><code>qibuild configure \n</code></pre> <p>Obs.: note que o diret\u00f3rio <code>build-sys-linux-x86_64</code> foi criado dentro do diret\u00f3rio \"myfirstexample\"</p> <ol> <li>Compilar o primeiro programa (Hello World) com o seguinte c\u00f3digo:</li> </ol> <pre><code>qibuild make\n</code></pre> <ol> <li>Para rodar o programa, acesse o diret\u00f3rio <code>build-sys-linux-x86_64/sdk/bin</code>:</li> </ol> <pre><code>cd build-sys-linux-x86_64/sdk/bin\n</code></pre> <p>E execute:</p> <pre><code>./my_first_example\n</code></pre> <p>Se a mensagem \"Hello, world\" aparecer no terminal, a instala\u00e7\u00e3o do qiBuild foi conclu\u00edda com sucesso.</p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/#sdk-c-285-para-nao-v6","title":"SDK C++ 2.8.5 para NAO v6","text":""},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/#download","title":"Download","text":"<p>Para baixar o SDK de C++, siga os seguintes passos:</p> <ol> <li>Visite o site da Aldebaran Robotics</li> <li>Acesse o sub-menu \"SDK\"</li> <li>Na aba \"Linux\", selecione \"SDKs 2.8.5 - C++ SDK\"</li> <li>Na prompt que aparecer, selecione a op\u00e7\u00e3o <code>Salvar arquivo</code></li> </ol> <p>Obs.: Muito cuidado ao selecionar a op\u00e7\u00e3o correta de acordo com seu sistema operacional.</p>"},{"location":"Instru%C3%A7%C3%B5es/CPP_SDK_v6/#instalacao-e-configuracao","title":"Instala\u00e7\u00e3o e configura\u00e7\u00e3o","text":"<ol> <li> <p>Extraia o arquivo baixado no local de prefer\u00eancia</p> </li> <li> <p>Supondo que o nome do arquivo extra\u00eddo seja \"naoqi-sdk-2.8.5.10-linux64\", crie um toolchain com o seguinte c\u00f3digo (adicione o caminho para a pasta extra\u00edda e substitua no c\u00f3digo abaixo):</p> </li> </ol> <pre><code>$ qitoolchain create minhatoolchain /caminho/para/naoqi-sdk-2.8.5.10-linux64/toolchain.xml\n</code></pre> <p>Em \"minhatoolchain\", deve ser inserido um nome de sua prefer\u00eancia.</p> <ol> <li>No terminal, acesse sua worktree (criada na se\u00e7\u00e3o \"qiBuild\"):</li> </ol> <pre><code>cd caminho/para/worktree\n</code></pre> <ol> <li>Configurando ambiente para a toolchain criada:</li> </ol> <pre><code>qibuild add-config myconfig -t minhatoolchain --default\n</code></pre> <p>Lembre-se de trocar \"minhatoolchain\" pelo nome criado anteriormente.</p>"},{"location":"Instru%C3%A7%C3%B5es/Choregraphe_v4/","title":"Guia de instala\u00e7\u00e3o do Choregraphe 2.1.4 (NAO v4)","text":""},{"location":"Instru%C3%A7%C3%B5es/Choregraphe_v4/#o-que-e-o-choregraphe","title":"O que \u00e9 o Choregraphe?","text":"<p>Choregraphe \u00e9 um programa da Softbank Robotics usado para:</p> <ul> <li>Criar anima\u00e7\u00f5es, comportamentos, di\u00e1logos,</li> <li>Test\u00e1-los em um rob\u00f4 simulado ou diretamente em um rob\u00f4 real,</li> <li>Monitorar e controlar seu rob\u00f4,</li> <li>Enriquecer comportamentos utilizando c\u00f3digos em Python.</li> </ul> <p>Com o Choregraphe, tamb\u00e9m \u00e9 poss\u00edvel criar aplicativos contendo di\u00e1logos, servi\u00e7os e comportamentos poderosos, como intera\u00e7\u00e3o com pessoas, dan\u00e7a, envio de e-mails, com a possibilidade de desenvolv\u00ea-los sem escrever uma \u00fanica linha de c\u00f3digo.</p>"},{"location":"Instru%C3%A7%C3%B5es/Choregraphe_v4/#requisitos","title":"Requisitos","text":"<p>M\u00ednimo</p> <ul> <li>CPU com 1.5 GHz de frequ\u00eancia</li> <li>2 GB de RAM</li> <li>Placa gr\u00e1fica com OpenGL</li> </ul> <p>Recomendado</p> <ul> <li>CPU com 3.4 GHz (ou mais) de frequ\u00eancia</li> <li>16 GB de RAM</li> <li>Placa gr\u00e1fica com OpenGL</li> </ul> <p>Sistema Operacional</p> <p>Ainda que o Choregraphe seja multiplataforma, recomenda-se a instala\u00e7\u00e3o no Ubuntu 16.04 (Xenial Xerus) - 64 bits.</p>"},{"location":"Instru%C3%A7%C3%B5es/Choregraphe_v4/#download","title":"Download","text":"<p>Para baixar o Choregraphe 2.1.4, acesse o site da Aldebaran Robotics.</p> <p>Des\u00e7a at\u00e9 o sub-menu Choregraphe, e na se\u00e7\u00e3o do LINUX, clique em <code>Former versions</code>.</p> <p>Na p\u00e1gina que se abre, selecione o setup do Choregraphe na vers\u00e3o 2.1.4 (vers\u00e3o usada com o NAO v4).</p> <p>O download ser\u00e1 iniciado.</p>"},{"location":"Instru%C3%A7%C3%B5es/Choregraphe_v4/#instalacao","title":"Instala\u00e7\u00e3o","text":"<ul> <li> <p>Com o navegador de arquivos do Ubuntu, navegue at\u00e9 o diret\u00f3rio onde o setup baixado se encontra.</p> </li> <li> <p>Clique no arquivo de setup com o bot\u00e3o direito do mouse, v\u00e1 em <code>propriedades</code> e selecione a aba <code>permiss\u00f5es</code>.</p> </li> <li> <p>Marque a caixa <code>Permitir a execu\u00e7\u00e3o desse arquivo como um programa</code>.</p> </li> </ul> <ul> <li> <p>No terminal, abra o diret\u00f3rio onde o setup foi baixado.</p> </li> <li> <p>Execute o setup com o seguinte c\u00f3digo (supondo que o nome do arquivo baixado seja \"choregraphe-suite-2.1.4.13-linux64-setup.run\"):</p> </li> </ul> <pre><code>sudo ./choregraphe-suite-2.1.4.13-linux64-setup.run\n</code></pre> <p>No wizard que se abre, aceite as permiss\u00f5es, selecione a op\u00e7\u00e3o Quick install e, quando for pedida a license key, insira o seguinte c\u00f3digo:</p> <p>654e-4564-153c-6518-2f44-7562-206e-4c60-5f47-5f45</p> <ul> <li>Deixe marcada a op\u00e7\u00e3o de iniciar (launch) o Choregraphe para testar se a instala\u00e7\u00e3o foi feita com sucesso e clique em <code>Finish</code>.</li> </ul> <p>Obs.: Como alternativa ao processo de instala\u00e7\u00e3o manual, pode-se executar o seguinte c\u00f3digo:</p> <pre><code>sudo ./choregraphe-suite-2.1.4.13-linux64-setup.run --mode unattended --installdir '/my/destination_directory' --licenseKeyMode licenseKey --licenseKey '654e-4564-153c-6518-2f44-7562-206e-4c60-5f47-5f45'\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/Choregraphe_v4/#execucao-do-programa","title":"Execu\u00e7\u00e3o do programa","text":"<p>Executando o Choregraphe 2.1.4 </p> <p>Para executar o Choregraphe 2.1.4, existem duas maneiras diferentes.</p> <ol> <li>Pelo \u00edcone da \u00e1rea de trabalho</li> </ol> <p>Clique duas vezes no \u00edcone do Choregraphe.</p> <ol> <li>Pelo terminal</li> </ol> <p>Execute o seguinte c\u00f3digo: <code>\"/opt/Aldebaran Robotics/Choregraphe Suite 2.1/bin/choregraphe_launcher\"</code> (com as aspas).</p> <p>Caso a seguinte janela se abra, parab\u00e9ns! Voc\u00ea instalou o Choregraphe 2.1.4 com sucesso.</p>"},{"location":"Instru%C3%A7%C3%B5es/Choregraphe_v6/","title":"Guia de instala\u00e7\u00e3o do Choregraphe 2.8.7 (NAO v6)","text":""},{"location":"Instru%C3%A7%C3%B5es/Choregraphe_v6/#o-que-e-o-choregraphe","title":"O que \u00e9 o Choregraphe?","text":"<p>Choregraphe \u00e9 um programa da Softbank Robotics usado para:</p> <ul> <li>Criar anima\u00e7\u00f5es, comportamentos, di\u00e1logos,</li> <li>Test\u00e1-los em um rob\u00f4 simulado ou diretamente em um rob\u00f4 real,</li> <li>Monitorar e controlar seu rob\u00f4,</li> <li>Enriquecer comportamentos utilizando c\u00f3digos em Python.</li> </ul> <p>Com o Choregraphe, tamb\u00e9m \u00e9 poss\u00edvel criar aplicativos contendo di\u00e1logos, servi\u00e7os e comportamentos poderosos, como intera\u00e7\u00e3o com pessoas, dan\u00e7a, envio de e-mails, com a possibilidade de desenvolv\u00ea-los sem escrever uma \u00fanica linha de c\u00f3digo.</p>"},{"location":"Instru%C3%A7%C3%B5es/Choregraphe_v6/#requisitos","title":"Requisitos","text":"<p>M\u00ednimo</p> <ul> <li>CPU com 1.5 GHz de frequ\u00eancia</li> <li>2 GB de RAM</li> <li>Placa gr\u00e1fica com OpenGL</li> </ul> <p>Recomendado</p> <ul> <li>CPU com 3.4 GHz (ou mais) de frequ\u00eancia</li> <li>16 GB de RAM</li> <li>Placa gr\u00e1fica com OpenGL</li> </ul> <p>Sistema Operacional</p> <p>Ainda que o Choregraphe seja multiplataforma, recomenda-se a instala\u00e7\u00e3o no Ubuntu 16.04 (Xenial Xerus) - 64 bits.</p>"},{"location":"Instru%C3%A7%C3%B5es/Choregraphe_v6/#download","title":"Download","text":"<p>Para baixar o Choregraphe 2.8.7, acesse o site da Aldebaran Robotics.</p> <p>Des\u00e7a at\u00e9 o sub-menu Choregraphe, e na se\u00e7\u00e3o \"LINUX (2.8.7 and later)\", selecione <code>Choregraphe 2.8.7 - Binaries</code>.</p> <p>Quando o download for conclu\u00eddo, extraia o arquivo tar.gz no diret\u00f3rio de sua escolha.</p> <p>Obs.: O setup est\u00e1 com arquivos corrompidos. \u00c9 altamente recomendado que voc\u00ea baixe os bin\u00e1rios. Obs.: O arquivo de bin\u00e1rios dispensa uma instala\u00e7\u00e3o formal, sendo necess\u00e1rio apenas executar o launcher do programa, conforme explicado abaixo.</p>"},{"location":"Instru%C3%A7%C3%B5es/Choregraphe_v6/#execucao-do-programa","title":"Execu\u00e7\u00e3o do programa","text":"<p>Executando o Choregraphe 2.8.7 </p> <ul> <li>Acesse o terminal e execute o Choregraphe diretamente.</li> </ul> <p>Exemplo: se o arquivo extra\u00eddo (<code>choregraphe-suite-2.8.7.23-linux64</code>) est\u00e1 em \"/meu/diretorio\", execute o Choregraphe com:</p> <pre><code>\"/meu/diretorio/choregraphe-suite-2.8.7.23-linux64/bin/choregraphe_launcher\"\n</code></pre> <p>IMPORTANTE: lembre-se de alterar o caminho no c\u00f3digo acima de acordo com o local de extra\u00e7\u00e3o do tar.gz dos bin\u00e1rios baixados!</p> <p>Selecionando o rob\u00f4 virtual NAO</p> <ul> <li>Na tela que se abre quando se executa o Choregraphe, clique no bot\u00e3o verde com s\u00edmbolo  de conex\u00e3o (<code>Connect to...</code>).</li> </ul> <ul> <li>Na janela que se abre, selecione o primeiro rob\u00f4 e clique em <code>Select</code>.</li> </ul> <ul> <li>O rob\u00f4 que aparece por padr\u00e3o \u00e9 o Pepper, mas vamos mud\u00e1-lo para o NAO.</li> <li>Expanda a janela do Choregraphe (clique no bot\u00e3o do lado do bot\u00e3o de fechar janela).</li> <li>Com o mouse em cima da barra superior (cinza) da janela do Choregraphe, as op\u00e7\u00f5es File, Edit, Connection, View e Help aparecer\u00e3o.</li> <li>Clique em <code>Edit</code> e em <code>Preferences</code>.</li> </ul> <ul> <li>Na aba \"Virtual Robot\", em \"Robot Model\", selecione <code>NAO H25 (V6)</code> e clique em <code>OK</code>. Na janela que se abre, confirme.</li> </ul> <ul> <li>Espere um pouco e o rob\u00f4 virtual ser\u00e1 reinicializado com o NAO v6.</li> </ul> <p>CASO TENHA ERRO DE DESCONEX\u00c3O DO ROB\u00d4 </p> <ul> <li>Caso apare\u00e7a esse erro, confirme e feche a janela <code>Preferences</code>.</li> <li>Clique novamente no bot\u00e3o verde <code>Connect to...</code>.</li> <li>Selecione o primeiro rob\u00f4 e confirme.</li> <li>O rob\u00f4 deve ser reiniciado e atualizado para o modelo NAO v6.</li> </ul> <p>Nota: Voc\u00ea pode ter problemas com acelera\u00e7\u00e3o gr\u00e1fica se n\u00e3o tiver com os drivers apropriados. Nesse caso, utilize: <code>./choregraphe --no-ogre</code></p>"},{"location":"Instru%C3%A7%C3%B5es/Conceitos_Gerais/","title":"Conceitos iniciais","text":"<p>Antes de qualquer outro guia da Robo Connection, \u00e9 importante entender alguns conceitos importantes sobre Terminal do Linux e Scripts. Esses conceitos servir\u00e3o como ferramentas na conclus\u00e3o de passos importantes para a programa\u00e7\u00e3o do NAO.</p>"},{"location":"Instru%C3%A7%C3%B5es/Conceitos_Gerais/#1-conceitos-iniciais-sobre-o-terminal-do-linux","title":"1. Conceitos iniciais sobre o terminal do Linux","text":"<p>O terminal ou linha de comando do Linux \u00e9 a interface onde os comandos de controle do sistema ser\u00e3o inseridos. Atrav\u00e9s dele, podemos instalar, desinstalar e atualizar programas, al\u00e9m de podermos navegar pelos diret\u00f3rios do sistema.</p> <p>Como um computador funciona?</p> <p>O computador sempre executa c\u00f3digos na linha de comando. Quando clicamos em bot\u00f5es e funcionalidades na tela, um processo acontece atrav\u00e9s de comandos que rodam no terminal sem que saibamos. Isso traz comodidade ao usu\u00e1rio, que nem sempre deseja saber o que ocorre por tr\u00e1s dos panos.</p> <p>Usando o terminal:</p> <p>Para abri-lo, aperte simultaneamente <code>CTRL</code>+<code>ALT</code>+<code>T</code>.</p> <p>Uma tela semelhante a essa se abrir\u00e1: </p> <p>No terminal de exemplo acima:</p> <ul> <li><code>gustavo@gustavo-Latitude-3420</code> (em verde): identifica o usu\u00e1rio e o apelido da m\u00e1quina usada, respectivamente;</li> <li><code>~</code> (em azul): indica o diret\u00f3rio atual. No terminal, '~' equivale ao diret\u00f3rio <code>/home/usuario/</code>.</li> </ul> <p>Um diret\u00f3rio nada mais \u00e9 do que uma pasta. Todo diret\u00f3rio ou arquivo possui um caminho. Mas o que isso significa? Isso significa que, se navegarmos por esse caminho, podemos chegar ao arquivo em quest\u00e3o.</p> <p>Por exemplo: se quero chegar ao diret\u00f3rio <code>/home/usu\u00e1rio/</code>, posso sair de <code>/</code>, acessar <code>/home/</code> e depois acessar <code>/home/usu\u00e1rio/</code>.</p> <p>Conhecendo o pip:</p> <p>O pip \u00e9 o instalador de pacotes do Python. Atrav\u00e9s dele, podemos instalar pacotes que usaremos na programa\u00e7\u00e3o do NAO. A sintaxe de uso do pip para instala\u00e7\u00e3o de programas \u00e9 <code>pip install &lt;pacote&gt;</code>.</p> <p>Em suma, o terminal permite a execu\u00e7\u00e3o de programas de diversas linguagens, instala\u00e7\u00e3o de pacotes, edi\u00e7\u00e3o de texto, dentre outras possibilidades.</p>"},{"location":"Instru%C3%A7%C3%B5es/Conceitos_Gerais/#comandos-basicos-do-terminal-linux","title":"Comandos b\u00e1sicos do terminal Linux","text":"<p>Comando <code>ls</code>: listando arquivos</p> <p>Para ver os arquivos presentes na pasta atual, podemos digitar o comando <code>ls</code>. Essa a\u00e7\u00e3o ir\u00e1 gerar uma lista de arquivos e pastas que se encontram no diret\u00f3rio atual.</p> <p>Por exemplo:</p> <p>No exemplo acima, usamos o comando <code>ls</code> no diret\u00f3rio <code>~</code> (no caso, <code>/home/gustavo/</code>). Isso gerou uma lista de arquivos presentes nesse diret\u00f3rio.</p> <p>Note tamb\u00e9m que os arquivos em azul s\u00e3o diret\u00f3rios (pastas). O arquivo em branco possui outro formato. </p> <p>Comando <code>cd</code>: navegando entre diret\u00f3rios</p> <p>Para navegar entre diret\u00f3rios no terminal Linux, usamos o comando <code>cd &lt;diret\u00f3rio&gt;.</code> Para voltarmos para o diret\u00f3rio \"m\u00e3e\", usamos o comando <code>cd ..</code>.</p> <p>Por exemplo:</p> <p>No exemplo acima, usamos o comando <code>ls</code> para listar os arquivos em <code>~</code>. Depois, usamos <code>cd Downloads</code> para acessar o diret\u00f3rio <code>~/Downloads/</code>. Em seguida, usamos o <code>cd ..</code> para retornarmos para o diret\u00f3rio \"m\u00e3e\". Ou seja, voltamos para <code>~</code>.</p> <p>Assim, podemos usar o terminal do Linux para navegar em qualquer diret\u00f3rio do sistema.</p> <p>Nota: para acessar diret\u00f3rios com nomes que contenham espa\u00e7os (como \"\u00c1rea de Trabalho\"), sempre use aspas. Se quero acessar <code>~/\u00c1rea de Trabalho/</code>, devo usar o comando <code>cd ~/'\u00c1rea de Trabalho'</code></p> <p>OBS.: Podemos acessar caminhos mais profundos de uma vez usando o comando <code>cd</code>.</p> <p>Por exemplo: dentro de <code>~</code> existe o diret\u00f3rio <code>Downloads</code>. Dentro de <code>Downloads</code> existe um diret\u00f3rio de nome <code>Exemplo</code>. Portanto, o caminho desse diret\u00f3rio \u00e9 <code>~/Downloads/Exemplo</code>. </p> <p>Para chegarmos em <code>~/Downloads/Exemplo</code>, n\u00e3o precisamos acessar pasta a pasta. Podemos acess\u00e1-lo de qualquer diret\u00f3rio simplesmente usando o comando <code>cd ~/Downloads/Exemplo</code>.</p> <p>No exemplo acima, est\u00e1vamos no diret\u00f3rio <code>~/\u00c1rea de Trabalho/</code>. Usando o comando <code>cd ~/Downloads/Exemplo</code>, acessamos esse diret\u00f3rio diretamente.</p> <p>Comando <code>clear</code>: limpando o terminal</p> <p>Podemos usar esse comando para limpar o terminal. Basta digitar <code>clear</code> na linha de comando e apertar <code>ENTER</code>. Com isso, o terminal ser\u00e1 limpo. Isso n\u00e3o muda o diret\u00f3rio atual.</p>"},{"location":"Instru%C3%A7%C3%B5es/Conceitos_Gerais/#2-conceitos-basicos-sobre-scripts","title":"2. Conceitos b\u00e1sicos sobre scripts","text":"<p>O que s\u00e3o scripts?</p> <p>Scripts s\u00e3o instru\u00e7\u00f5es em sequ\u00eancia que executam alguma a\u00e7\u00e3o. Geralmente, utilizam um shell para executarem tais a\u00e7\u00f5es. Um shell \u00e9 uma ponte entre o usu\u00e1rio e o sistema operacional. Atrav\u00e9s do shell, o usu\u00e1rio acessa as funcionalidades do sistema operacional. Um shell pode ser de dois tipos:</p> <ol> <li>CLI (Command Line Interface) - S\u00e3o interfaces em que podemos digitar c\u00f3digos e a\u00e7\u00f5es ser\u00e3o executadas, assim como o Terminal do Linux ou outros ambientes de desenvolvimento.</li> <li>GUI (Graphical User Interface) - S\u00e3o interfaces que possuem recursos visuais (bot\u00f5es, campos, etc.) para executar a\u00e7\u00f5es. Um exemplo \u00e9 o Windows Explorer, da Microsoft.</li> </ol> <p>Assim, no seguimento dos tutoriais da Robo Connection, utilizaremos o Bash como linguagem de comando, sendo este o shell CLI padr\u00e3o do Linux.</p> <p>Os scripts bash possuem a extens\u00e3o \".sh\". </p> <p>Ok, mas como executar um script?</p> <p>Suponha que queremos executar um script que est\u00e1 em <code>~/Downloads/</code>. Seu nome \u00e9 <code>meuscript.sh</code>. Esse script imprime \"Hello World\" na tela.</p> <p>Para executar o script, precisamos seguir os seguintes passos:</p> <ol> <li>V\u00e1 at\u00e9 o local do script usando o comando <code>cd</code>. No caso, usamos <code>cd ~/Downloads/</code>.</li> <li>(Recomendado) Use o comando ls para pegar o nome do script corretamente. Erros de escrita no nome do script resultar\u00e3o em erro.</li> <li>Permita a execu\u00e7\u00e3o do script como um programa. Para isso, execute o comando <code>chmod +x &lt;nome_do_script&gt;</code>. No exemplo, usamos <code>chmod +x meuscript.sh</code>.</li> <li>Execute o script como superuser. Para fazer isso, utilize o comando <code>sudo ./&lt;nome_do_script&gt;</code>. No exemplo, usamos <code>sudo ./meuscript.sh</code>.</li> <li>Com esses passos, o script ser\u00e1 executado na sua m\u00e1quina:</li> </ol> <p>Nota: a permiss\u00e3o de superuser (ou sudo)  \u00e9 an\u00e1logo ao ato de executar um programa como administrador (Windows). Isso garante que n\u00e3o haver\u00e3o falhas de permiss\u00e3o na execu\u00e7\u00e3o do programa. Alguns programas exigir\u00e3o a permiss\u00e3o sudo para serem executados.</p>"},{"location":"Instru%C3%A7%C3%B5es/Conceitos_Gerais/#se-voce-chegou-ate-aqui-parabens-voce-esta-apto-a-prosseguir-com-os-guias-da-robo-connection","title":"Se voc\u00ea chegou at\u00e9 aqui, parab\u00e9ns! Voc\u00ea est\u00e1 apto a prosseguir com os guias da Robo Connection!","text":""},{"location":"Instru%C3%A7%C3%B5es/Guia_POO/","title":"Introdu\u00e7\u00e3o \u00e0 programa\u00e7\u00e3o orientada a objetos em C++","text":""},{"location":"Instru%C3%A7%C3%B5es/Guia_POO/#o-que-e-o-c","title":"O que \u00e9 o C++","text":"<p>A linguagem de programa\u00e7\u00e3o C++ \u00e9 uma extens\u00e3o \u00e0 linguagem C. Atrav\u00e9s dessa extens\u00e3o, a programa\u00e7\u00e3o orientada a objetos se tornou poss\u00edvel.</p> <p>Em compara\u00e7\u00e3o ao Python, a linguagem C (e, consequentemente, o C++) \u00e9 bem mais r\u00e1pida em tempo de execu\u00e7\u00e3o. Isso significa que um c\u00f3digo para o NAO feito em Python vai ser executado pelo rob\u00f4 muito mais lentamente em compara\u00e7\u00e3o ao mesmo c\u00f3digo em C++. Entretanto, o C++ possui uma sintaxe um pouco mais complicada e minuciosa em compara\u00e7\u00e3o ao Python.</p> <p> <p></p> <p></p>"},{"location":"Instru%C3%A7%C3%B5es/Guia_POO/#o-que-e-programacao-orientada-a-objetos-poo","title":"O que \u00e9 Programa\u00e7\u00e3o Orientada a Objetos (POO)?","text":"<p>A orienta\u00e7\u00e3o a objetos \u00e9 um paradigma de programa\u00e7\u00e3o. Para que voc\u00ea entenda melhor, faremos uma analogia. \u00c9 como se fosse um video-game. Se voc\u00ea criasse um console de video-game, construiria um aparelho com diversos atributos, como os circuitos internos, que n\u00e3o devem ser acessados pelo usu\u00e1rio (privado). Em contrapartida, disponibilizaria m\u00e9todos de acesso \u00e0s funcionalidades do video-game pelo usu\u00e1rio (p\u00fablico), como bot\u00f5es em um joystick que o controla.</p> <p>A esse conceito damos o nome de interface. Uma interface nada mais \u00e9 do que a \"casca\" que isola os componentes internos (como os circuitos internos) e os componentes externos do software (como o joystick, no exemplo). Internamente, a interface possui partes que devem estar privadas ao usu\u00e1rio. Externamente, possui partes que podem ser usadas pelo usu\u00e1rio, ou seja, est\u00e3o p\u00fablicas.</p> <p> <p></p> <p></p> <p>Em rela\u00e7\u00e3o \u00e0s permiss\u00f5es de uso, damos o nome de encapsulamento. Podemos ter o encapsulamento privado (apenas o video-game controla suas partes internas, e n\u00e3o o usu\u00e1rio) e o encapsulamento p\u00fablico (o usu\u00e1rio controla as partes internas do video-game pelos bot\u00f5es da interface). Al\u00e9m desses dois tipos, possu\u00edmos o encapsulamento protegido, que n\u00e3o est\u00e1 no escopo desse guia.</p>"},{"location":"Instru%C3%A7%C3%B5es/Guia_POO/#o-que-e-uma-classe-o-que-sao-objetos","title":"O que \u00e9 uma classe? O que s\u00e3o objetos?","text":"<p>Uma classe \u00e9 uma estrutura essencial quando tratamos de POO. Usaremos um exemplo para tornar esse conceito mais claro. Se considerarmos uma classe Pessoa, podemos pensar em atributos (dados) que todas as pessoas t\u00eam. Todas as pessoas possuem um nome, uma idade, uma altura e um peso. Esses ser\u00e3o os atributos da nossa classe <code>Pessoa</code>.</p> <p>Um objeto \u00e9 uma inst\u00e2ncia da classe. Mas o que isso significa na pr\u00e1tica? Se temos a classe <code>Pessoa</code>, posso criar um objeto chamado <code>pessoa1</code> da classe <code>Pessoa</code>, que tenha nome \"Jo\u00e3o\", idade 33, altura 1,78m e peso 82,5kg. Em outras palavras, um objeto que instancia a classe <code>Pessoa</code> \u00e9 um exemplar da classe <code>Pessoa</code>. Assim, o objeto ter\u00e1 os atributos exigidos pela classe, al\u00e9m de ter acesso aos m\u00e9todos que est\u00e3o nessa classe. Uma classe define, portanto, os atributos e m\u00e9todos dos objetos que a instanciar\u00e3o.</p> <p> <p></p> <p></p> <p>Resgatando a analogia do video-game, o objeto \u00e9 o joystick, plataforma pela qual o usu\u00e1rio acessar\u00e1 e manipular\u00e1, indiretamente, os atributos da classe (circuito interno do video-game), que est\u00e3o privados ao usu\u00e1rio. A classe, por sua vez, representa todo o video-game.</p> <p>Obs.: Em uma classe, os atributos devem ser privados (n\u00e3o acess\u00edveis ao usu\u00e1rio).</p> <p>Para construir uma classe <code>Pessoa</code> que possua os atributos acima, podemos utilizar o C++ da seguinte forma:</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Pessoa{\n    // Aqui vamos colocar os atributos da classe\n    // Usamos \"private\" para declarar encapsulamento privado\n    private: \n        char nome[50];\n        int idade;\n        float altura;\n        float peso;\n\n    // Aqui vamos colocar os m\u00e9todos da classe    \n    // Usamos \"public\" para declarar encapsulamento p\u00fablico\n    public: \n        void inicializa_classe(char* name, int age, float height, float weight){\n            nome = name;\n            idade = age;\n            altura = height;\n            peso = weight;\n        };\n};\n\nint main(void){\n    Pessoa pessoa1;\n\n    // Abaixo, colocamos os valores passados como par\u00e2metros nos atributos de pessoa1\n    pessoa1.inicializa(\"Jo\u00e3o\", 33, 1.78, 82.5);\n\n    return 0;\n}\n</code></pre> <p>Na parte privada da classe <code>Pessoa</code>, definimos os atributos (tamb\u00e9m chamados de membros). Na parte p\u00fablica, criamos um m\u00e9todo <code>inicializa</code> que coloca valores nos atributos.</p> <p>Em seguida, na fun\u00e7\u00e3o main, criamos o objeto <code>pessoa1</code> da classe <code>Pessoa</code>. Atrav\u00e9s desse objeto, utilizamos o m\u00e9todo <code>inicializa</code>, definido dentro da classe <code>Pessoa</code> como um m\u00e9todo p\u00fablico, ou seja, o usu\u00e1rio pode utilizar atrav\u00e9s do objeto.</p> <p>A sintaxe para utilizar um m\u00e9todo atrav\u00e9s do objeto de uma classe em C++ \u00e9: <code>objeto.metodo(parametro1, parametro2, ...)</code>. Nesse caso, utilizamos <code>pessoa1.inicializa(\"Jo\u00e3o\", 33, 1.78, 82.5)</code>.</p> <p>Ok, mas o que podemos fazer com os atributos?</p> <p>Para responder essa quest\u00e3o, temos que analisar as especificidades de nossa classe. No caso de <code>Pessoa</code>, suponha que estamos usando essa classe para cadastrar pessoas em um sistema de uma rede de academias. Cada pessoa cadastrada dever\u00e1 ter seu nome, idade, altura e peso registrados para melhor acompanhamento.</p> <p>Al\u00e9m de armazenar informa\u00e7\u00f5es, podemos utilizar a POO para realizar opera\u00e7\u00f5es utilizando os atributos. A classe <code>Pessoa</code> pode, por exemplo, ter um m\u00e9todo que calcule e imprima o IMC dos clientes da academia, baseada nos atributos. Um outro m\u00e9todo poderia calcular uma previs\u00e3o de peso corporal caso a pessoa frequente a academia por certo per\u00edodo.</p> <p>Assim, fica claro que a POO pode ajudar bastante na organiza\u00e7\u00e3o de sistemas. O NAO utiliza esse paradigma para organizar suas classes e m\u00e9todos, realizando opera\u00e7\u00f5es no rob\u00f4 atrav\u00e9s de objetos de classes diversas.</p> <p>Getters e Setters</p> <p>Exemplo:</p> <p>Maria, de 19 anos, foi cadastrada com 1.60m de altura e 63kg de peso. Por\u00e9m, ap\u00f3s o primeiro m\u00eas de academia, Maria perdeu 3kg. Al\u00e9m disso, mediu sua altura novamente e percebeu que possu\u00eda, na verdade, 1.62m de altura.</p> <p>Portanto, precisamos mudar esses atributos no objeto de Maria. Por\u00e9m, os atributos s\u00e3o privados na classe <code>Pessoa</code>. Isso significa que o objeto n\u00e3o pode acessar diretamente os atributos da classe. Por conta disso, precisamos de um m\u00e9todo p\u00fablico dentro da classe, que possa mudar esses atributos. </p> <p>Dessa forma, o objeto N\u00c3O est\u00e1 acessando diretamente o atributo da classe, mas sim indiretamente, atrav\u00e9s de um m\u00e9todo que, por sua vez, acessa diretamente esses atributos, evitando problemas de permiss\u00e3o.</p> <p>Observe o esquem\u00e1tico a seguir:</p> <p> <p></p> <p></p> <p>Faremos isso utilizando getters e setters. Os m\u00e9todos get e set s\u00e3o muito usadas na POO. Mas n\u00e3o se assuste, s\u00e3o m\u00e9todos como qualquer outro. A \u00fanica diferen\u00e7a \u00e9 que nomeamos os m\u00e9todos dessa forma padronizada. Esses m\u00e9todos ser\u00e3o os mediadores entre o objeto e os atributos. Confira a seguir o seu uso:</p> <ul> <li>get: retorna o valor de um atributo. Exemplo: <code>nome = objeto.get_nome()</code>.</li> <li> <p>set: muda o valor de um atributo. Exemplo: <code>objeto.set_idade(20)</code>.</p> </li> <li> <p>No exemplo do get, colocamos na vari\u00e1vel \"nome\" o valor retornado pelo m\u00e9todo get_nome() de <code>objeto</code>. </p> </li> <li>No exemplo do set, colocamos o atributo \"idade\" no valor 20, atrav\u00e9s do par\u00e2metro inserido.</li> </ul> <p>Ent\u00e3o, para resolvermos o problema de Maria, cujos dados est\u00e3o errados, basta utilizarmos m\u00e9todos setters e getters para consertarmos, certo? Vamos fazer isso no bloco de c\u00f3digo a seguir:</p> <p>Parte p\u00fablica da classe <code>Pessoa</code>:</p> <pre><code>    public:\n        void inicializa_classe(char* name, int age, float height, float weight){\n            nome = name;\n            idade = age;\n            altura = height;\n            peso = weight;\n        };\n\n        float get_altura()\n            return altura;\n\n        float get_peso()\n            return peso;\n\n        void set_altura(float h)\n            altura = h;\n\n        void set_peso(float w)\n            peso = w;\n</code></pre> <p>Assim, completamos o seguinte diagrama para a classe <code>Pessoa</code>:</p> <p> <p></p> <p></p> <p>Programa principal:</p> <pre><code>int main(void){\n    Pessoa maria;\n\n    maria.inicializa(\"Maria\", 19, 1.60, 63); // valores antigos\n\n    cout &lt;&lt; \"A altura de Maria atualmente e: \" &lt;&lt; maria.get_altura() &lt;&lt; endl;\n    cout &lt;&lt; \"O peso de Maria atualmente e: \" &lt;&lt; maria.get_peso() &lt;&lt; endl;\n\n    maria.set_altura(1.62); // arrumando altura\n    maria.set_peso(60); // arrumando peso\n\n    cout &lt;&lt; \"A nova altura de Maria e: \" &lt;&lt; maria.get_altura() &lt;&lt; endl;\n    cout &lt;&lt; \"O novo peso de Maria e: \" &lt;&lt; maria.get_peso() &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> <p>Aqui, mostramos apenas a parte p\u00fablica da classe e o programa principal, para fins did\u00e1ticos. O resto da classe (parte privada) ainda existe!</p>"},{"location":"Instru%C3%A7%C3%B5es/Guia_POO/#fim-do-tutorial-parabens","title":"Fim do tutorial! Parab\u00e9ns!","text":"<p>Mas e agora, qual \u00e9 o pr\u00f3ximo passo?</p> <p>Para programar o NAO, \u00e9 necess\u00e1rio que voc\u00ea entenda os conceitos apresentados nesse guia. O NAO utiliza m\u00e9todos que pertencem a classes definidas pelos desenvolvedores do rob\u00f4.</p> <p>Al\u00e9m disso, voc\u00ea tamb\u00e9m pode criar novas classes com m\u00e9todos que podem, inclusive, utilizar m\u00e9todos de outras classes.</p> <p>Dessa forma, o(a) incentivamos a continuar aprofundando seus estudos em POO (fa\u00e7a cursos para se aprofundar!), na interface do NAO e no SDK (Software Development Kit) do NAO (consulte nossos guias).</p>"},{"location":"Instru%C3%A7%C3%B5es/Guia_POO/#dicas-importantes-para-uso-pratico-do-nao-avancado","title":"Dicas importantes para uso pr\u00e1tico do NAO (Avan\u00e7ado):","text":"<ul> <li>O NAO (v4) tem pouca mem\u00f3ria e processador fraco, o que significa que deve-se limitar o uso de heran\u00e7a;</li> <li>Lembre-se de usar shared_ptr para evitar vazamento de mem\u00f3ria;</li> <li>O NAO (v4) usa C++98, portanto depende muito mais da Boost para funcionalidades b\u00e1sicas;</li> <li>O NAO (v6) tem o C++11, usando muitos conte\u00fados que j\u00e1 est\u00e3o na biblioteca padr\u00e3o.</li> <li>O Robo Connection auxilia o usu\u00e1rio a contornar v\u00e1rias \"pegadinhas\" do C++ nos exemplos do NAOv4. Muitas coisas podem confundir usu\u00e1rios do Java, principalmente na burocracia em rela\u00e7\u00e3o ao uso dos atributos static e const.</li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/Maquina_Virtual/","title":"Instala\u00e7\u00e3o de M\u00e1quina Virtual com Virt Manager","text":"<p>Os rob\u00f4s NAO utilizam diversos programas para configura\u00e7\u00e3o, programa\u00e7\u00e3o e manuten\u00e7\u00e3o. Por\u00e9m, esses programas s\u00e3o compat\u00edveis com diferentes vers\u00f5es do sistema Linux.</p> <p>Para que n\u00e3o seja necess\u00e1rio utilizar muitas m\u00e1quinas, utilizaremos apenas uma m\u00e1quina com diversas m\u00e1quinas virtuais (VMs) dispon\u00edveis para rodar no sistema com o gerenciador Virt Manager (cada m\u00e1quina virtual com um sistema operacional diferente, para que sejam acessados os diversos programas em uma mesma m\u00e1quina f\u00edsica).</p> <p>Para ilustrar a diferen\u00e7a dos sistemas operacionais necess\u00e1rios na opera\u00e7\u00e3o dos NAOs, observe a tabela abaixo, onde s\u00e3o mostrados programas comuns usados na programa\u00e7\u00e3o dos NAO v6.</p> <p> Programa Sistema Compat\u00edvel Robot Settings 2.8.6 Ubuntu 16.04 Choregraphe 2.8.6 Ubuntu 16.04 NAOqi SDK 2.8.5 (C++ - V6) Ubuntu 16.04 NAOqi SDK 2.1.4 (C++ - V4) Ubuntu 12.04 ROS1 Ubuntu 20.04 ROS2 Ubuntu 22.04 <p></p> <p>O NAO v4 utiliza diferentes vers\u00f5es desses programas, com sistemas operacionais tamb\u00e9m diferentes, em alguns casos. Para mais informa\u00e7\u00f5es, consulte o Developer Center da Aldebaran Robotics.</p> <p>O Virt Manager \u00e9 o programa no qual as VMs estar\u00e3o acess\u00edveis, tornando poss\u00edvel criar, excluir e modificar VMs. Al\u00e9m disso, o Virt Manager permite o compartilhamento de portas USB entre m\u00e1quina real e virtual e a cria\u00e7\u00e3o de snapshots (pontos de controle), que funcionam como um recurso de back-up r\u00e1pido caso estejamos testando diferentes funcionalidades que podem corromper o sistema das VMs.</p>"},{"location":"Instru%C3%A7%C3%B5es/Maquina_Virtual/#requisitos","title":"Requisitos","text":"<ul> <li>Ubuntu 22.04 (Jammy Jellyfish) instalado na m\u00e1quina f\u00edsica</li> <li>C\u00f3pia baixada da ISO do Ubuntu (vers\u00e3o desejada)</li> <li>Ao menos 50GB de espa\u00e7o livre no disco r\u00edgido</li> <li>Ao menos 8GB de RAM</li> <li>Processador compat\u00edvel com acelera\u00e7\u00e3o baseada em KVM</li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/Maquina_Virtual/#verificando-compatibilidade","title":"Verificando compatibilidade","text":"<p>Para verificar a compatibilidade do processador, pode-se executar o comando <code>kvm-ok</code> do pacote <code>cpu-checker</code> como superuser.</p> <pre><code>sudo apt update\nsudo apt install cpu-checker\nsudo kvm-ok\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/Maquina_Virtual/#instalando-dependencias-necessarias","title":"Instalando depend\u00eancias necess\u00e1rias","text":"<p>Para instalar as depend\u00eancias necess\u00e1rias, execute o seguinte c\u00f3digo em terminal:</p> <pre><code>sudo apt update\nsudo apt install qemu-system-x86\nsudo apt install qemu-system-gui\nsudo apt install qemu-utils\nsudo apt install qemu-block-extra\nsudo apt install ovmf\nsudo apt install libguestfs-tools\nsudo apt install virt-manager\n</code></pre> <p>Habilitando o libvirtd</p> <pre><code>sudo systemctl start libvirtd\nsudo systemctl enable libvirtd\n</code></pre> <p>Obs.: necess\u00e1rio reiniciar o sistema ap\u00f3s esse passo.</p>"},{"location":"Instru%C3%A7%C3%B5es/Maquina_Virtual/#criando-vm-no-virt-manager","title":"Criando VM no Virt Manager","text":"<ul> <li>No navegador de aplicativos do Ubuntu, procure e execute o Virt Manager</li> <li>Na aba arquivo, selecione a op\u00e7\u00e3o \"Nova m\u00e1quina virtual\"</li> </ul> <ul> <li>Selecione \"M\u00eddia de instala\u00e7\u00e3o ISO ou CDROM\" e clique em <code>Forward</code>. No pr\u00f3ximo menu, clique em <code>Navegar</code> e procure a op\u00e7\u00e3o <code>Navegar localmente</code></li> </ul> <ul> <li>Selecione o arquivo ISO do Ubuntu, deixe marcado \"Detectar automaticamente a partir de m\u00eddia(...)\" ou selecione a vers\u00e3o desejada manualmente</li> </ul> <ul> <li>Caso apare\u00e7a uma prompt sobre permiss\u00e3o de acesso, clique em <code>Sim</code></li> <li>No pr\u00f3ximo menu, separe a mem\u00f3ria e o n\u00famero de CPUs desejados para a VM (recomenda\u00e7\u00e3o: deixe pelo menos 4GB de RAM e 4 CPUs para seu computador f\u00edsico)</li> <li>Marque a op\u00e7\u00e3o \"Habilitar armazenamento para esta m\u00e1quina virtual\" e reserve o espa\u00e7o desejado (recomenda\u00e7\u00e3o: pelo menos 20GB)</li> </ul> <ul> <li>D\u00ea um nome para a VM (use nomes simples para melhor manipula\u00e7\u00e3o)</li> <li>Clique em <code>Concluir</code> para criar a VM</li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/Maquina_Virtual/#iniciando-a-vm","title":"Iniciando a VM","text":"<p>Para iniciar a VM, clique duas vezes sobre a listagem da VM no menu principal do Virt Manager.</p> <p>Em seguida, clique no bot\u00e3o indicado para inicializar a m\u00e1quina virtual selecionada:</p>"},{"location":"Instru%C3%A7%C3%B5es/Maquina_Virtual/#instalando-ubuntu-na-vm","title":"Instalando Ubuntu na VM","text":"<p>A presente se\u00e7\u00e3o do tutorial se refere \u00e0 uma instala\u00e7\u00e3o gen\u00e9rica de sistemas Ubuntu Linux. Caso seja necess\u00e1rio, consulte um guia de instala\u00e7\u00e3o da sua vers\u00e3o.</p> <p>Com a VM iniciada, realize a instala\u00e7\u00e3o do Ubuntu normalmente:</p> <ul> <li>Com o idioma desejado selecionado, clique em <code>Instalar o Ubuntu</code></li> <li>No menu \"Preparando para instalar o Ubuntu\", deixe a op\u00e7\u00e3o \"Baixar atualiza\u00e7\u00f5es enquanto instala o Ubuntu\" marcada</li> <li>Em \"Tipo de instala\u00e7\u00e3o\", marque \"Apagar disco e reinstalar o Ubuntu\"</li> <li>Clique em <code>Instalar agora</code> e em seguida em <code>Continuar</code></li> <li>Selecione o fuso local (se voc\u00ea est\u00e1 em Bras\u00edlia, selecione o fuso \"Sao Paulo\")</li> <li>Selecione o teclado desejado (recomenda\u00e7\u00e3o: deixar na configura\u00e7\u00e3o padr\u00e3o)</li> <li>Preencha os campos de acordo com suas informa\u00e7\u00f5es</li> <li>Clique em <code>Continuar</code> e aguarde at\u00e9 o fim da instala\u00e7\u00e3o</li> <li>Clique em <code>Reiniciar agora</code></li> </ul> <p>Obs.: ap\u00f3s o rein\u00edcio p\u00f3s-instala\u00e7\u00e3o, \u00e9 comum as VMs travarem. Se for o caso, no menu superior do Virt Manager h\u00e1 um bot\u00e3o vermelho com uma seta ao lado. Clique na seta e selecione \"For\u00e7ar desligamento\". Confirme e depois reinicie a VM no bot\u00e3o de start.</p>"},{"location":"Instru%C3%A7%C3%B5es/Maquina_Virtual/#snapshots","title":"Snapshots","text":"<p>Snapshots s\u00e3o pontos de controle da m\u00e1quina virtual. Para exemplificar, imagine o seguinte exemplo: voc\u00ea precisa instalar um programa inst\u00e1vel, e ele pode corromper seu sistema.</p> <p>Para impedir isso, voc\u00ea cria um snapshot antes de instalar o programa. Se, durante a instala\u00e7\u00e3o do programa, ocorrer algum problema com seu sistema, voc\u00ea pode acessar o snapshot para voltar ao estado da m\u00e1quina correspondente ao momento em que voc\u00ea criou o snapshot (antes de instalar o programa) e tomar as medidas necess\u00e1rias para evitar a reincid\u00eancia do erro.</p>"},{"location":"Instru%C3%A7%C3%B5es/Maquina_Virtual/#criacao-de-snapshots","title":"Cria\u00e7\u00e3o de snapshots","text":"<p>Para criar os snapshots, siga os passos abaixo:</p> <ul> <li>Certifique-se de que o Virt Manager esteja sendo executado com uma VM aberta</li> <li>No menu acima (na janela da VM), existe um bot\u00e3o com o \u00edcone de duas telas de computador (Gerenciar os snapshots da VM), clique nele.</li> </ul> <ul> <li>No canto inferior esquerdo, clique no bot\u00e3o com sinal de \"+\" (Criar novo snapshot)</li> </ul> <ul> <li>D\u00ea um nome ao snapshot (sem espa\u00e7os) e adicione uma descri\u00e7\u00e3o</li> <li>Clique em <code>Concluir</code> para finalizar a cria\u00e7\u00e3o do snapshot</li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/Maquina_Virtual/#utilizacao-dos-snapshots","title":"Utiliza\u00e7\u00e3o dos snapshots","text":"<p>Para acessar os snapshots criados, siga os passos abaixo:</p> <ul> <li>Certifique-se de que o Virt Manager esteja sendo executado com uma VM aberta</li> <li>No menu acima (na janela da VM), abra novamente o menu de snapshots com o bot\u00e3o    </li> <li>No navegador \u00e0 esquerda, selecione o snapshot desejado</li> <li>No canto inferior esquerdo, clique no bot\u00e3o com \u00edcone de seta (Executar snapshot selecionado)</li> </ul> <ul> <li>Clique em <code>Sim</code> para confirmar e retornar ao snapshot selecionado</li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/Maquina_Virtual/#portas-usb","title":"Portas USB","text":"<p>\u00c9 poss\u00edvel utilizar as portas f\u00edsicas da sua m\u00e1quina em uma m\u00e1quina virtual. Exemplificando, posso conectar uma Raspberry Pi no meu sistema f\u00edsico e utiliz\u00e1-lo na m\u00e1quina virtual com o Virt Manager.</p> <p>Para isso, siga os passos a seguir:</p> <ul> <li>Certifique-se de que o Virt Manager esteja sendo executado com uma VM aberta</li> <li>Certifique-se de conectar o dipositivo desejado na porta USB da sua m\u00e1quina f\u00edsica</li> <li>No menu superior da janela da VM, clique na aba <code>M\u00e1quina Virtual</code></li> <li>Selecione a op\u00e7\u00e3o <code>Redirecionar dispositivo USB</code> e selecione o dispositivo inserido</li> </ul> <ul> <li>Confira no sistema da VM se o dispositivo foi adicionado</li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/NAO_Flasher/","title":"Instala\u00e7\u00e3o do NAO Flasher (NAO v4 e NAO v6)","text":"<p>O NAO Flasher \u00e9 uma ferramenta que permite a realiza\u00e7\u00e3o de updates no sistema do NAO v4 e do NAO v6, al\u00e9m do reset de f\u00e1brica e outras possibilidades.</p> <p>Recomenda\u00e7\u00e3o: usar no Linux Ubuntu 16.04 (Xenial Xerus).</p>"},{"location":"Instru%C3%A7%C3%B5es/NAO_Flasher/#download","title":"Download","text":"<ul> <li> <p>Acesse o site da Aldebaran Robotics.</p> </li> <li> <p>Des\u00e7a at\u00e9 o menu \"NAO Flasher\", e clique nele.</p> </li> <li> <p>Na aba \"LINUX\", clique no bot\u00e3o <code>NAO Flasher 2.1.0 - Setup</code>.</p> </li> </ul> <ul> <li>O download do NAO Flasher ser\u00e1 iniciado.</li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/NAO_Flasher/#instalacao-e-execucao","title":"Instala\u00e7\u00e3o e execu\u00e7\u00e3o","text":"<p>O NAO Flasher baixado no site da Aldebaran Robotics vem em formato de bin\u00e1rios, ou seja, n\u00e3o \u00e9 necess\u00e1ria uma instala\u00e7\u00e3o usando um setup. Em outras palavras, basta executar o execut\u00e1vel do NAO Flasher, atrav\u00e9s dos seguintes passos:</p> <ul> <li> <p>V\u00e1 at\u00e9 a pasta onde o arquivo foi baixado.</p> </li> <li> <p>Clique sobre o arquivo tar.gz com o bot\u00e3o direito e selecione <code>Extrair aqui</code>.</p> </li> <li> <p>Abra a pasta instalada, e dentro dela acesse a pasta <code>bin</code>, que deve conter um arquivo \"Flasher\".</p> </li> <li> <p>Clique sobre o arquivo \"Flasher\" com o bot\u00e3o direito e selecione <code>Propriedades</code>. Na aba <code>Permiss\u00f5es</code>, marque a caixa <code>Permitir execu\u00e7\u00e3o do arquivo como um programa</code>.</p> </li> <li> <p>Para executar o arquivo, clique com o bot\u00e3o direito na pasta <code>bin</code> e selecione <code>Abrir no terminal</code>. Em seguida, digite o seguinte c\u00f3digo:</p> </li> </ul> <pre><code>sudo ./flasher\n</code></pre> <p>Caso abra a interface do NAO Flasher, a instala\u00e7\u00e3o foi conclu\u00edda com sucesso.</p>"},{"location":"Instru%C3%A7%C3%B5es/NAOqi-overview_v4/","title":"NAOqi Framework - Overview","text":"<p>Este \u00e9 um guia de apresenta\u00e7\u00e3o de conceitos-chave do framework NAOqi, conhecimento necess\u00e1rio para o in\u00edcio na programa\u00e7\u00e3o dos rob\u00f4s da Aldebaran Robotics.</p> <p> <p></p> <p></p>"},{"location":"Instru%C3%A7%C3%B5es/NAOqi-overview_v4/#o-que-e","title":"O que \u00e9?","text":"<p>NAOqi: principal software usado no rob\u00f4 para control\u00e1-lo.</p> <p>NAOqi Framework: \u00e9 um framework que funciona como um broker (intermedi\u00e1rio). Isso significa que ele interliga diversos m\u00f3dulos. Suponha que voc\u00ea precise programar uma a\u00e7\u00e3o espec\u00edfica fora das a\u00e7\u00f5es comuns de f\u00e1brica do rob\u00f4. Para isso, o NAOqi utiliza um sistema que resgata os m\u00f3dulos dispon\u00edveis (inclusive m\u00f3dulos criados por voc\u00ea, que contenha as fun\u00e7\u00f5es espec\u00edficas que voc\u00ea precisa) e os disponibiliza em sua aplica\u00e7\u00e3o.</p>"},{"location":"Instru%C3%A7%C3%B5es/NAOqi-overview_v4/#principais-caracteristicas","title":"Principais caracter\u00edsticas","text":"<p>Multiplataforma: dispon\u00edvel no Windows, Linux e MacOS</p> <p>Linguagens aceitas:</p> <ul> <li>Python: o c\u00f3digo criado roda diretamente no rob\u00f4, por\u00e9m \u00e9 mais lento em termos de velocidade de execu\u00e7\u00e3o, tornando o rob\u00f4 menos responsivo;</li> <li>C++: o c\u00f3digo criado precisa ser compilado para o SO alvo. \u00c9 necess\u00e1rio usar uma ferramenta de cross-compila\u00e7\u00e3o para gerar um c\u00f3digo que rode no sistema operacional do rob\u00f4 - o NAOqi SO. Entretanto, a programa\u00e7\u00e3o em C++ possibilita a cria\u00e7\u00e3o de um c\u00f3digo muito mais r\u00e1pido em termos de velocidade de execu\u00e7\u00e3o, tornando o rob\u00f4 mais responsivo.</li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/NAOqi-overview_v4/#conceitos-chave","title":"Conceitos-chave:","text":"<p>M\u00e9todos ou fun\u00e7\u00f5es: conjunto de instru\u00e7\u00f5es a serem realizadas.</p> <p>M\u00f3dulo: conjunto de m\u00e9todos, funciona como uma classe.</p> <p>Biblioteca: conjunto de m\u00f3dulos.</p> <p>Proxy: ao criar um proxy de determinado m\u00f3dulo, \u00e9 poss\u00edvel acessar os m\u00e9todos desse m\u00f3dulo atrav\u00e9s do proxy. Funciona como um objeto de uma classe.</p> <p>NAOqi Broker: \u00e9 um intermediador dos m\u00f3dulos. Por exemplo: o m\u00f3dulo A, em um de seus m\u00e9todos, precisa de um m\u00e9todo do m\u00f3dulo B. O broker \"avisa\" o m\u00f3dulo A da exist\u00eancia do m\u00f3dulo B, possibilitando o acesso desejado.</p> <p>Autoload.ini: arquivo localizado no SO do rob\u00f4, respons\u00e1vel por carregar as bibliotecas quando o rob\u00f4 \u00e9 iniciado.</p> <p></p> <p>M\u00f3dulos locais:  Est\u00e3o em um mesmo ambiente (processo), e portanto podem compartilhar vari\u00e1veis e m\u00e9todos com outros m\u00f3dulos locais. Al\u00e9m disso, apenas um broker \u00e9 necess\u00e1rio para a conex\u00e3o entre m\u00f3dulos locais, n\u00e3o precisando de internet para tal conex\u00e3o. \u00c9 bem mais r\u00e1pido que a conex\u00e3o remota entre m\u00f3dulos.</p> <p>M\u00f3dulos remotos: m\u00f3dulos que utilizam seu broker para se comunicar com outro broker que possui outros m\u00f3dulos. Utilizam a internet para se comunicarem (um broker precisa saber a porta e o IP do outro broker para trocarem informa\u00e7\u00f5es). Possui velocidade menor em compara\u00e7\u00e3o com m\u00f3dulos locais.</p>"},{"location":"Instru%C3%A7%C3%B5es/NAOqi-overview_v4/#mecanismos-importantes","title":"Mecanismos importantes","text":"<p>Conex\u00e3o entre m\u00f3dulos remotos: imagine dois m\u00f3dulos remotos, A e B. A conex\u00e3o entre eles pode ser broker x broker ou proxy x broker (objeto de A acessa B mas B n\u00e3o acessa A).</p> <ul> <li> <p>Conex\u00e3o broker x broker: nesse tipo de conex\u00e3o, A acessa B e B acessa A. Ou seja, trata-se de uma comunica\u00e7\u00e3o rec\u00edproca. Para conectar m\u00f3dulos dessa maneira, basta especificar o IP e a Port (usando \u2013pip e \u2013pport na inicializa\u00e7\u00e3o do m\u00f3dulo). Ent\u00e3o, pode-se criar o proxy (objeto do m\u00f3dulo) com <code>AL::ALProxy proxy = AL::ALProxy(nome_m\u00f3dulo)</code> (em C++) para acessar os m\u00e9todos desse m\u00f3dulo. Como o IP e a Port j\u00e1 foram especificados com \u2013pip e \u2013pport, n\u00e3o \u00e9 necess\u00e1rio informar esses na cria\u00e7\u00e3o do proxy. </p> </li> <li> <p>Conex\u00e3o proxy x broker: nesse tipo de conex\u00e3o, A acessa B, mas B n\u00e3o tem acesso a A. Um m\u00f3dulo (classe) pode se comunicar com outro m\u00f3dulo atrav\u00e9s da instancia\u00e7\u00e3o de seu proxy (objeto). Suponha que o broker de A (que possui o m\u00f3dulo A) se conecta com o broker de B (que \"avisa\" sobre a exist\u00eancia de B). O proxy de A consegue utilizar os m\u00e9todos de B atrav\u00e9s do broker de B, mas os m\u00f3dulos registrados nesse broker (B) N\u00c3O possuem acesso ao m\u00f3dulo (A) que possui esse proxy. Sendo assim, trata-se de uma comunica\u00e7\u00e3o de acesso unilateral.</p> </li> <li> <p>Criar um nome, usar um IP e uma porta.</p> </li> <li>Criar um broker usando essas informa\u00e7\u00f5es</li> <li>Criar um proxy do m\u00f3dulo A com o primeiro par\u00e2metro sendo o broker B, e usando o nome do m\u00f3dulo A como segundo par\u00e2metro</li> </ul> <p>Os passos est\u00e3o exemplificados aqui:</p> <pre><code>// Um broker precisa de um nome, um IP e uma porta para \"escutar\":\nconst std::string nomeBroker = \"mybroker\";\n\n// IP do NAOqi\nconst std::string pip = \"127.0.0.1\"; // local NAOqi\n\n// Porta do NAOqi\nint pport = 9559;\n\n// Crie o seu pr\u00f3prio broker\nboost::shared_ptr&lt;AL::ALBroker&gt; broker = AL::ALBroker::createBroker(nomeBroker, \"0.0.0.0\", 54000, pip, pport);\nAL::ALProxy proxy = AL::ALProxy(broker, &lt;nome_do_modulo&gt;);\n</code></pre> <p>Chamadas bloqueadoras e n\u00e3o bloqueadoras</p> <p>Para chamar um m\u00e9todo de um m\u00f3dulo, o NAOqi possibilita dois protocolos de chamadas:</p> <ul> <li> <p>Bloqueadoras: chamada normal de um m\u00e9todo. Instancia-se o objeto da classe e o utiliza usando a estrutura: <code>modulo.metodo()</code>. Esse funcionamento \u00e9 exatamente igual \u00e0s chamadas normais de um m\u00e9todo de uma classe.</p> </li> <li> <p>N\u00e3o bloqueadoras: serve para chamar um m\u00e9todo e, ao mesmo tempo, executar outras a\u00e7\u00f5es. Por exemplo: fazer o rob\u00f4 andar e falar ao mesmo tempo. Para isso, utiliza-se um \u201cpost object\u201d de um proxy. Isso cria um processo que ser\u00e1 executado paralelamente \u00e0 outras atividades. Toda chamada que usa esse post object gera um TaskID, que pode ser usado para verificar se a tarefa est\u00e1 sendo ou j\u00e1 foi executada. Para criar uma chamada n\u00e3o bloqueadora, use a seguinte estrutura: <code>modulo.post.metodo()</code>.</p> </li> </ul> <p>ALMemory</p> <p>Essa ferramenta \u00e9 a mem\u00f3ria do rob\u00f4. </p> <p>Todos os m\u00f3dulos podem ler (resgatar informa\u00e7\u00f5es) ou escrever (registrar/alterar informa\u00e7\u00f5es) na mem\u00f3ria do rob\u00f4. O ALMemory \u00e9 um array de ALValues (valores do m\u00f3dulo ALValues podem ser de todos os tipos tradicionais encontrados na programa\u00e7\u00e3o).</p> <p>Para evitar problemas de acesso concorrente \u00e0 mem\u00f3ria (a\u00e7\u00f5es divergentes ao mesmo tempo no mesmo local da mem\u00f3ria), eles utilizam critical sections de leitura/escrita para proteger o acesso, ou seja, os threads permitem a execu\u00e7\u00e3o de apenas um processo por vez, enquanto os outros ficam suspensos at\u00e9 que o processo atual termine. Isso protege os dados.</p> <p>Para que fique mais claro:</p> <p>Suponha que existam dois m\u00e9todos no mesmo ambiente, X e Y.</p> <pre><code>//C\u00f3digo X: \n\na = 5\n</code></pre> <pre><code>//C\u00f3digo Y:\n\na = 8\n</code></pre> <p>Se esses c\u00f3digos forem executados ao mesmo tempo, a execu\u00e7\u00e3o correta das a\u00e7\u00f5es posteriores pode ser prejudicada. Para evitar esse erro nas opera\u00e7\u00f5es de leitura/escrita em mem\u00f3ria, usa-se a critical section.</p>"},{"location":"Instru%C3%A7%C3%B5es/NAOqi-overview_v6/","title":"NAOqi Framework - Overview","text":"<p>Este \u00e9 um guia de apresenta\u00e7\u00e3o de conceitos-chave do framework NAOqi, conhecimento necess\u00e1rio para o in\u00edcio na programa\u00e7\u00e3o dos rob\u00f4s da Aldebaran Robotics.</p> <p> <p></p> <p></p>"},{"location":"Instru%C3%A7%C3%B5es/NAOqi-overview_v6/#o-que-e","title":"O que \u00e9?","text":"<p>NAOqi: principal software usado no rob\u00f4 para control\u00e1-lo.</p> <p>NAOqi Framework: \u00e9 um framework que funciona como um broker (intermedi\u00e1rio). Isso significa que ele interliga diversos m\u00f3dulos. Suponha que voc\u00ea precise programar uma a\u00e7\u00e3o espec\u00edfica fora das a\u00e7\u00f5es comuns de f\u00e1brica do rob\u00f4. Para isso, o NAOqi utiliza um sistema que resgata os m\u00f3dulos dispon\u00edveis (inclusive m\u00f3dulos criados por voc\u00ea, que contenha as fun\u00e7\u00f5es espec\u00edficas que voc\u00ea precisa) e os disponibiliza em sua aplica\u00e7\u00e3o.</p>"},{"location":"Instru%C3%A7%C3%B5es/NAOqi-overview_v6/#principais-caracteristicas","title":"Principais caracter\u00edsticas","text":"<p>Multiplataforma: dispon\u00edvel no Windows, Linux e MacOS</p> <p>Linguagens aceitas:</p> <ul> <li>Python: o c\u00f3digo criado roda diretamente no rob\u00f4, por\u00e9m \u00e9 mais lento em termos de velocidade de execu\u00e7\u00e3o, tornando o rob\u00f4 menos responsivo;</li> <li>C++: o c\u00f3digo criado precisa ser compilado para o SO alvo. \u00c9 necess\u00e1rio usar uma ferramenta de cross-compila\u00e7\u00e3o para gerar um c\u00f3digo que rode no sistema operacional do rob\u00f4 - o NAOqi SO. Entretanto, a programa\u00e7\u00e3o em C++ possibilita a cria\u00e7\u00e3o de um c\u00f3digo muito mais r\u00e1pido em termos de velocidade de execu\u00e7\u00e3o, tornando o rob\u00f4 mais responsivo.</li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/NAOqi-overview_v6/#conceitos-chave","title":"Conceitos-chave:","text":"<p>M\u00e9todos ou fun\u00e7\u00f5es: conjunto de instru\u00e7\u00f5es a serem realizadas.</p> <p>M\u00f3dulo: conjunto de m\u00e9todos, funciona como uma classe.</p> <p>Biblioteca: conjunto de m\u00f3dulos.</p> <p>Proxy: ao criar um proxy de determinado m\u00f3dulo, \u00e9 poss\u00edvel acessar os m\u00e9todos desse m\u00f3dulo atrav\u00e9s do proxy. Funciona como um objeto de uma classe.</p> <p>NAOqi Broker: \u00e9 um intermediador dos m\u00f3dulos. Por exemplo: o m\u00f3dulo A, em um de seus m\u00e9todos, precisa de um m\u00e9todo do m\u00f3dulo B. O broker \"avisa\" o m\u00f3dulo A da exist\u00eancia do m\u00f3dulo B, possibilitando o acesso desejado.</p> <p>Autoload.ini: arquivo localizado no SO do rob\u00f4, respons\u00e1vel por carregar as bibliotecas quando o rob\u00f4 \u00e9 iniciado.</p> <p></p> <p>M\u00f3dulos locais:  Est\u00e3o em um mesmo ambiente (processo), e portanto podem compartilhar vari\u00e1veis e m\u00e9todos com outros m\u00f3dulos locais. Al\u00e9m disso, apenas um broker \u00e9 necess\u00e1rio para a conex\u00e3o entre m\u00f3dulos locais, n\u00e3o precisando de internet para tal conex\u00e3o. \u00c9 bem mais r\u00e1pido que a conex\u00e3o remota entre m\u00f3dulos.</p> <p>M\u00f3dulos remotos: m\u00f3dulos que utilizam seu broker para se comunicar com outro broker que possui outros m\u00f3dulos. Utilizam a internet para se comunicarem (um broker precisa saber a porta e o IP do outro broker para trocarem informa\u00e7\u00f5es). Possui velocidade menor em compara\u00e7\u00e3o com m\u00f3dulos locais.</p>"},{"location":"Instru%C3%A7%C3%B5es/NAOqi-overview_v6/#mecanismos-importantes","title":"Mecanismos importantes","text":"<p>Conex\u00e3o entre m\u00f3dulos remotos: imagine dois m\u00f3dulos remotos, A e B. A conex\u00e3o entre eles pode ser broker x broker ou proxy x broker (objeto de A acessa B mas B n\u00e3o acessa A).</p> <ul> <li> <p>Conex\u00e3o broker x broker: nesse tipo de conex\u00e3o, A acessa B e B acessa A. Ou seja, trata-se de uma comunica\u00e7\u00e3o rec\u00edproca. Para conectar m\u00f3dulos dessa maneira, basta especificar o IP e a Port (usando \u2013pip e \u2013pport na inicializa\u00e7\u00e3o do m\u00f3dulo). Ent\u00e3o, pode-se criar o proxy (objeto do m\u00f3dulo) com <code>AL::ALProxy proxy = AL::ALProxy(nome_m\u00f3dulo)</code> (em C++) para acessar os m\u00e9todos desse m\u00f3dulo. Como o IP e a Port j\u00e1 foram especificados com \u2013pip e \u2013pport, n\u00e3o \u00e9 necess\u00e1rio informar esses na cria\u00e7\u00e3o do proxy. </p> </li> <li> <p>Conex\u00e3o proxy x broker: nesse tipo de conex\u00e3o, A acessa B, mas B n\u00e3o tem acesso a A. Um m\u00f3dulo (classe) pode se comunicar com outro m\u00f3dulo atrav\u00e9s da instancia\u00e7\u00e3o de seu proxy (objeto). Suponha que o broker de A (que possui o m\u00f3dulo A) se conecta com o broker de B (que \"avisa\" sobre a exist\u00eancia de B). O proxy de A consegue utilizar os m\u00e9todos de B atrav\u00e9s do broker de B, mas os m\u00f3dulos registrados nesse broker (B) N\u00c3O possuem acesso ao m\u00f3dulo (A) que possui esse proxy. Sendo assim, trata-se de uma comunica\u00e7\u00e3o de acesso unilateral.</p> </li> <li> <p>Criar um nome, usar um IP e uma porta.</p> </li> <li>Criar um broker usando essas informa\u00e7\u00f5es</li> <li>Criar um proxy do m\u00f3dulo A com o primeiro par\u00e2metro sendo o broker B, e usando o nome do m\u00f3dulo A como segundo par\u00e2metro</li> </ul> <p>Os passos est\u00e3o exemplificados aqui:</p> <pre><code>// Um broker precisa de um nome, um IP e uma porta para \"escutar\":\nconst std::string nomeBroker = \"mybroker\";\n\n// IP do NAOqi\nconst std::string pip = \"127.0.0.1\"; // local NAOqi\n\n// Porta do NAOqi\nint pport = 9559;\n\n// Crie o seu pr\u00f3prio broker\nboost::shared_ptr&lt;AL::ALBroker&gt; broker = AL::ALBroker::createBroker(nomeBroker, \"0.0.0.0\", 54000, pip, pport);\nAL::ALProxy proxy = AL::ALProxy(broker, &lt;nome_do_modulo&gt;);\n</code></pre> <p>Chamadas bloqueadoras e n\u00e3o bloqueadoras</p> <p>Para chamar um m\u00e9todo de um m\u00f3dulo, o NAOqi possibilita dois protocolos de chamadas:</p> <ul> <li> <p>Bloqueadoras: chamada normal de um m\u00e9todo. Instancia-se o objeto da classe e o utiliza usando a estrutura: <code>modulo.metodo()</code>. Esse funcionamento \u00e9 exatamente igual \u00e0s chamadas normais de um m\u00e9todo de uma classe.</p> </li> <li> <p>N\u00e3o bloqueadoras: serve para chamar um m\u00e9todo e, ao mesmo tempo, executar outras a\u00e7\u00f5es. Por exemplo: fazer o rob\u00f4 andar e falar ao mesmo tempo. Para isso, utiliza-se um \u201cpost object\u201d de um proxy. Isso cria um processo que ser\u00e1 executado paralelamente \u00e0 outras atividades. Toda chamada que usa esse post object gera um TaskID, que pode ser usado para verificar se a tarefa est\u00e1 sendo ou j\u00e1 foi executada. Para criar uma chamada n\u00e3o bloqueadora, use a seguinte estrutura: <code>modulo.post.metodo()</code>.</p> </li> </ul> <p>ALMemory</p> <p>Essa ferramenta \u00e9 a mem\u00f3ria do rob\u00f4. </p> <p>Todos os m\u00f3dulos podem ler (resgatar informa\u00e7\u00f5es) ou escrever (registrar/alterar informa\u00e7\u00f5es) na mem\u00f3ria do rob\u00f4. O ALMemory \u00e9 um array de ALValues (valores do m\u00f3dulo ALValues podem ser de todos os tipos tradicionais encontrados na programa\u00e7\u00e3o).</p> <p>Para evitar problemas de acesso concorrente \u00e0 mem\u00f3ria (a\u00e7\u00f5es divergentes ao mesmo tempo no mesmo local da mem\u00f3ria), eles utilizam critical sections de leitura/escrita para proteger o acesso, ou seja, os threads permitem a execu\u00e7\u00e3o de apenas um processo por vez, enquanto os outros ficam suspensos at\u00e9 que o processo atual termine. Isso protege os dados.</p> <p>Para que fique mais claro:</p> <p>Suponha que existam dois m\u00e9todos no mesmo ambiente, X e Y.</p> <pre><code>//C\u00f3digo X: \n\na = 5\n</code></pre> <pre><code>//C\u00f3digo Y:\n\na = 8\n</code></pre> <p>Se esses c\u00f3digos forem executados ao mesmo tempo, a execu\u00e7\u00e3o correta das a\u00e7\u00f5es posteriores pode ser prejudicada. Para evitar esse erro nas opera\u00e7\u00f5es de leitura/escrita em mem\u00f3ria, usa-se a critical section.</p>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/","title":"Instru\u00e7\u00f5es de instala\u00e7\u00e3o do ROS1 (Noetic) no Ubuntu 20.04","text":"<p>Guia de instala\u00e7\u00e3o do ROS1 em uma m\u00e1quina nativa ou m\u00e1quina virtual no Ubuntu 20.04</p>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#instrucoes-para-o-metodo-manual-de-instalacao","title":"Instru\u00e7\u00f5es para o m\u00e9todo manual de instala\u00e7\u00e3o","text":"<p>Conforme instru\u00e7\u00f5es disponibilizadas na ROS wiki.</p>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#requisitos","title":"Requisitos","text":"<ul> <li>Sistema com Ubuntu 20.04 (Focal Fossa);</li> <li>Ao menos 4GB de espa\u00e7o livre no disco r\u00edgido;</li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#instalacao-do-ros1","title":"Instala\u00e7\u00e3o do ROS1","text":"<p>Os seguintes passos devem ser realizados no terminal da VM criada.</p>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#garantindo-que-o-ubuntu-2004-permita-o-uso-de-repositorios-dos-tipos-restricted-universe-e-multiverse","title":"Garantindo que o Ubuntu 20.04 permita o uso de reposit\u00f3rios dos tipos restricted, universe e multiverse:","text":"<pre><code>sudo apt update\nsudo add-apt-repository restricted\nsudo add-apt-repository universe\nsudo add-apt-repository multiverse\nsudo apt update\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#preparando-o-computador-para-aceitar-softwares-advindos-de-packagesrosorg-onde-o-ros1-esta-distribuido","title":"Preparando o computador para aceitar softwares advindos de 'packages.ros.org' (onde o ROS1 est\u00e1 distribu\u00eddo):","text":"<pre><code>sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" &gt; /etc/apt/sources.list.d/ros-latest.list'\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#instalando-ferramentas-necessarias-e-preparando-as-chaves-de-autenticacao","title":"Instalando ferramentas necess\u00e1rias e preparando as chaves de autentica\u00e7\u00e3o:","text":"<pre><code>sudo apt install curl\ncurl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#atualizando-a-lista-de-pacotes","title":"Atualizando a lista de pacotes:","text":"<pre><code>sudo apt update\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#instalacao-do-ros-instalacao-completa-recomendada","title":"Instala\u00e7\u00e3o do ROS (instala\u00e7\u00e3o completa recomendada):","text":"<p>Instala\u00e7\u00e3o completa (tudos os recursos da vers\u00e3o padr\u00e3o + softwares de visualiza\u00e7\u00e3o 2D/3D e percep\u00e7\u00e3o 2D/3D):</p> <pre><code>sudo apt install ros-noetic-desktop-full\n</code></pre> <p>Instala\u00e7\u00e3o padr\u00e3o (tudo da vers\u00e3o simples + algumas ferramentas como rqt e rviz):</p> <pre><code>sudo apt install ros-noetic-desktop\n</code></pre> <p>Instala\u00e7\u00e3o simples (pacotes do ROS, bibliotecas de compila\u00e7\u00e3o e comunica\u00e7\u00e3o. Sem GUI.)</p> <pre><code>sudo apt install ros-noetic-ros-base\n</code></pre> <ul> <li>Existem muitos outros pacotes do ROS dispon\u00edveis. Para instal\u00e1-los, voc\u00ea pode usar:</li> </ul> <pre><code>sudo apt install ros-noetic-NOME_DO_PACOTE\n</code></pre> <ul> <li>Para encontrar os pacotes dispon\u00edveis, v\u00e1 para o ROS Index ou use:</li> </ul> <pre><code>apt search ros-noetic\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#preparando-o-ambiente","title":"Preparando o ambiente:","text":"<p>Voc\u00ea dever\u00e1 'fontear' esse script em qualquer terminal bash no qual voc\u00ea use o ROS:</p> <pre><code>source /opt/ros/noetic/setup.bash\n</code></pre> <p>Pode ser conveniente fazer isso automaticamente toda vez que iniciar um novo shell para usar o ROS:</p> <ul> <li>Caso seja BASH:</li> </ul> <pre><code>echo \"source /opt/ros/noetic/setup.bash\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <ul> <li>Caso seja zsh:</li> </ul> <pre><code>echo \"source /opt/ros/noetic/setup.zsh\" &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#instalando-dependencias-necessarias-para-construir-seus-proprios-pacotes-do-ros-futuramente","title":"Instalando depend\u00eancias necess\u00e1rias para construir seus pr\u00f3prios pacotes do ROS futuramente:","text":"<pre><code>sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#instalando-as-ultimas-dependencias-atraves-do-pacote-rosdep","title":"Instalando as \u00faltimas depend\u00eancias atrav\u00e9s do pacote rosdep:","text":"<pre><code>sudo rosdep init\nrosdep update\n</code></pre>"},{"location":"Instru%C3%A7%C3%B5es/ROS_1/#verificando-se-a-instalacao-foi-feita-com-sucesso","title":"Verificando se a instala\u00e7\u00e3o foi feita com sucesso:","text":"<pre><code>dpkg -s ros-noetic-ros\n</code></pre> <p>Com este tutorial, o ROS 1 - Noetic estar\u00e1 instalado em sua m\u00e1quina.</p>"},{"location":"Instru%C3%A7%C3%B5es/Robot_Settings/","title":"Instala\u00e7\u00e3o do Robot Settings 2.8.6 (NAO v6) no Ubuntu 16.04","text":"<p>O Robot Settings 2.8.6 \u00e9 um programa usado para configurar e gerenciar rob\u00f4s NAO v6 da Softbank Robotics.</p> <p>Entretanto, at\u00e9 o momento da cria\u00e7\u00e3o desse tutorial, o Robot Settings 2.8.6 \u00e9 compat\u00edvel (em distribui\u00e7\u00f5es Ubuntu) apenas na vers\u00e3o 16.04 (Xenial Xerus).</p>"},{"location":"Instru%C3%A7%C3%B5es/Robot_Settings/#requisitos","title":"Requisitos","text":"<ul> <li>Ubuntu 16.04 (Xenial Xerus)</li> <li>Ao menos 1 GB de espa\u00e7o livre no disco r\u00edgido</li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/Robot_Settings/#instalando-o-robot-settings","title":"Instalando o Robot Settings","text":"<p>Os seguintes passos devem ser realizados dentro da VM com Ubuntu 16.04 ou em um sistema com Ubuntu 16.04 nativo.</p>"},{"location":"Instru%C3%A7%C3%B5es/Robot_Settings/#download-do-robot-settings","title":"Download do Robot Settings","text":"<ul> <li>Abra o navegador</li> <li>Acesse o Site da Aldebaran Robotics</li> <li>Abra a op\u00e7\u00e3o \"Robot Settings\"</li> <li>No sub-menu \"Linux (2.8.6 and later)\", clique sobre \"Robot Settings 2.8.6 - Setup\"</li> <li>Deixe selecionado \"Save file\" e clique em <code>OK</code></li> </ul>"},{"location":"Instru%C3%A7%C3%B5es/Robot_Settings/#instalacao-do-robot-settings","title":"Instala\u00e7\u00e3o do Robot Settings","text":"<p>Pressione <code>CTRL+ALT+T</code> para abrir o terminal. Execute os comandos abaixo:</p> <pre><code>cd ~/Downloads\nchmod +x robot-settings-2.8.6.23-linux64-setup.run\nsudo ./robot-settings-2.8.6.23-linux64-setup.run\n</code></pre> <p>Prosseguindo com a instala\u00e7\u00e3o:</p> <ul> <li>Clique em <code>Next</code> at\u00e9 que apare\u00e7a o bot\u00e3o <code>Install</code></li> <li>Clique em <code>Install</code>, aguarde a instala\u00e7\u00e3o e clique em <code>Finish</code></li> </ul> <p>Com a realiza\u00e7\u00e3o dos passos acima, o Robot Settings estar\u00e1 instalado e operante, podendo ser encontrado no menu de navega\u00e7\u00e3o do Ubuntu ou na \u00e1rea de trabalho.</p> <p>Cabe ressaltar que, como o Robot Settings n\u00e3o \u00e9 compat\u00edvel com o Ubuntu 22.04, deve-se sempre acess\u00e1-lo atrav\u00e9s da m\u00e1quina virtual (com Ubuntu 16.04) gerenciada pelo Virt Manager, ou por uma m\u00e1quina com Ubuntu 16.04 nativo para garantir a compatibilidade do sistema.</p>"},{"location":"naoqi-2.1/cpp/about-the-examples-en/","title":"NAOqi 2.1 C++ programming examples","text":"<p>These examples may be used to learn how to code the most basic behaviours using the NAOqi 2.1 C++98 programming interface.</p> <p>The NAOqi 2.1 Application Programming Interface only supports C++98, regardless of the compiler used. All the examples were compiled by the GCC 4.8.2 and cmake 2.8.12 available on the repositories of Ubuntu 14.04, codenamed trusty and tested on a NAOH25V40 robot, a NAO v4 with a complete body including the feet FSRs.</p> <p>The following examples are included:</p> <ul> <li><code>01.hello-world-legacy</code>: the most basic hello world example. It uses the legacy methods that allow calling a module without an explicit broker. The robot will use its text to speech module, <code>ALTextToSpeech</code>, to say the classic phrase \"Hello, World!\".</li> <li><code>02.hello-world</code>: a hello world example using an explicit broker. This is the recommended way to call any API-provided module.</li> <li><code>03.hello-world-module</code>: a hello world example implemented as a NAOqi 2 module using a broker in its constructor.</li> <li><code>04.using-events</code>: an example that exemplifies how to write a module that will react to events posted by other modules on <code>ALMemory</code> using callback functions and an API-provided mutex implementation. All the events that have been subscribed by the module will have their key, value and message printed on the screen.</li> <li><code>05.riseup</code>: an example that teaches how to change NAO's posture and to allow current to be sent on all of its motors to wake it up. The example also teaches how to enable useful functions, such as current optimisation, external and self-collision protection, and the defensive stance against damages caused by a frontal fall. The robot will react to the tactile buttons on the top of its head:<ul> <li>the front button will cause NAO to wake up, changing its current   posture to stand up on its feet and sending current to all motors in   order to remain in this position;</li> <li>the middle tactile button will cause NAo to rest, sending it to the   standard crouching posture and turning off its motors;</li> <li>the rear tactil will toggle a breathing animation while NAO is awaken.</li> </ul> </li> <li><code>06.walking</code>: this example uses a state machine to make NAO wake up and walk using a standard gait to its left side and forward. The robot will start moving when the front tactil button on its head is activated, and will stop whenever the middle tactil is touched. This example may not work if your robot has problems with its joints or its feet's force sensitive resistors (FSRs).</li> <li><code>07.walking-custom</code>: this example is roughly the same as before, but it makes NAO to walk using a custom gait. It also tolerates robots with problems on their joints or FSRs by checking if the robot has been able to approach the desired posture. This example also uses the NAOqi's abstraction to enable the use of the POSIX <code>sleep</code> or <code>msleep</code> functions.</li> </ul>"},{"location":"naoqi-2.1/cpp/about-the-examples-en/#how-to-find-the-examples","title":"How to find the examples","text":"<ol> <li>Go to Robo Connection repository.</li> <li>Enter the <code>03_Robotica/nao-programs/naoqi-2.1/cpp/</code> directory.</li> <li>All the examples should be listed  and separated by their specific folders.</li> </ol>"},{"location":"naoqi-2.1/cpp/about-the-examples-en/#how-to-run-the-examples","title":"How to run the examples","text":"<ol> <li>Copy the desired example to your <code>qibuild</code> workspace. If you used our scripts, it should be on <code>/home/softex/NAO4/workspace</code>.</li> <li>Change the directory to the example you wish to run using the <code>cd</code> command.</li> <li>Configure the project's toolchain. If you used our scripts, the command <code>qibuild configure -c \"$NAOQI_CPP_QIBUILD_CONFIG\"</code>.</li> <li>Compile the project with <code>qibuild make</code> or <code>qibuild make --rebuild</code>.</li> <li>Run the compiled program. It will usually be located inside a directory structure such as <code>build-${NAOQI_CPP_QIBUILD_CONFIG}/sdk/bin</code>. Most of the examples use arguments to set up a broker, and their order is usually NAO's broker IPv4 or hostname followed by its listening port, usually 9559.</li> </ol>"},{"location":"naoqi-2.1/cpp/about-the-examples-ptbr/","title":"Exemplos de programa\u00e7\u00e3o em C++ do NAOqi 2.1","text":"<p>Esses exemplos podem ser usados para aprender a codificar os comportamentos mais b\u00e1sicos usando a NAOqi 2.1, uma interface de programa\u00e7\u00e3o de aplica\u00e7\u00f5es (API) implementada em C++98.</p> <p>A API NAOqi 2.1 suporta apenas C++98, mesmo no caso de serem usados compiladores mais novos. Todos os exemplos foram compilados usando o GCC 4.8.2 e o cmake 2.8.12 disponibilizados nos reposit\u00f3rios do Ubuntu 14, denominado trusty, e foram testados em um rob\u00f4 NAOH25V40, um modelo do NAO4 com um corpo completo incluindo os sensores de carga resistivos (FSRs) nos p\u00e9s.</p> <p>Os seguintes exemplos est\u00e3o inclu\u00eddos neste diret\u00f3rio:</p> <ul> <li><code>01.hello-world-legacy</code>: o exemplo hello world mais simples. Usa m\u00e9todos legados que permitem chamar um m\u00f3dulo sem um intermedi\u00e1rio (broker) expl\u00edcito. O rob\u00f4 usar\u00e1 seu m\u00f3dulo de texto para voz, denominado <code>ALTextToSpeech</code>, para dizer a cl\u00e1ssica frase \"Hello, World!\".</li> <li><code>02.hello-world</code>: um exemplo hello world com um broker expl\u00edcito. Esse \u00e9 o modo recomendado de se chamar qualquer m\u00f3dulo disponibilizado pela API.</li> <li><code>03.hello-world-module</code>: umj exemplo hello world implementado como um m\u00f3dulo NAOqi2, usando um broker em seu construtor.</li> <li><code>04.using-events</code>: um exemplo que explica como escrever um m\u00f3dulo que reage a eventos postados por outros m\u00f3dulos no <code>ALMemory</code> usando fun\u00e7\u00f5es callback e uma implementa\u00e7\u00e3o de um mutex da pr\u00f3pria API. Todos os eventos que forem assinados pelo m\u00f3dulo ter\u00e3o sua chave, valor e mensagem impressos na tela.</li> <li><code>05.riseup</code>: um exemplo que ensina como modificar a postura do NAO e permitir que todos os motores sejam energizados para \"acord\u00e1-lo\". Tamb\u00e9m h\u00e1 a exemplifica\u00e7\u00e3o de v\u00e1rias fun\u00e7\u00f5es \u00fateis, como a otimiza\u00e7\u00e3o de corrente, prote\u00e7\u00e3o contra colis\u00f5es envolvendo objetos externos e o pr\u00f3prio corpo do rob\u00f4, e a pose defensiva para proteger o NAO de quedas frontais. O rob\u00f4 ir\u00e1 reagir aos bot\u00f5es t\u00e1teis em sua cabe\u00e7a:<ul> <li>o bot\u00e3o frontal acordar\u00e1 o NAO, mudando a sua postura, fazendo-o se levantar e energizar todos seus motores para assim permanecer;</li> <li>o bot\u00e3o do meio far\u00e1 o NAO descansar, ativando a postura de agachamento e desligando todos seus motores;</li> <li>o bot\u00e3o traseiro ativa uma anima\u00e7\u00e3o de respira\u00e7\u00e3o enquanto o NAO estiver acordado.</li> </ul> </li> <li><code>06.walking</code>: esse exemplo usa uma m\u00e1quina de estados finita para fazer o NAO acordar e andar para a esquerda e para frente usando o seu caminhar padr\u00e3o. O rob\u00f4 ir\u00e1 se mover quando o bot\u00e3o frontal for ativado, e parar\u00e1 quando o bot\u00e3o do meio for tocado. O exemplo pode n\u00e3o funcionar em rob\u00f4s com problemas nos atuadores das juntas ou nos sensores dos p\u00e9s.</li> <li><code>07.walking-custom</code>: esse exemplo parece-se com o anterior, mas faz o NAO andar usando um caminhar personalizado. Ele tamb\u00e9m tolera rob\u00f4s com problemas nas juntas ou nos FSRs. Isso \u00e9 feito checando se o rob\u00f4 conseguiu aproximar o suficiente da postura configurada. Tamb\u00e9m \u00e9 usada as abstra\u00e7\u00f5es que a NAOqi fornece para o uso das fun\u00e7\u00f5es POSIX <code>sleep</code> e <code>msleep</code>.</li> </ul>"},{"location":"naoqi-2.1/cpp/about-the-examples-ptbr/#como-encontrar-os-exemplos","title":"Como encontrar os exemplos","text":"<ol> <li>V\u00e1 para Robo Connection repository.</li> <li>Entre no diret\u00f3rio <code>03_Robotica/nao-programs/naoqi-2.1/cpp/</code>.</li> <li>Todos os exemplos devem estar listados e separados em seus diret\u00f3rios espec\u00edficos.</li> </ol>"},{"location":"naoqi-2.1/cpp/about-the-examples-ptbr/#como-executar-os-exemplos","title":"Como executar os exemplos","text":"<ol> <li>Copie o diret\u00f3rio desejado para o seu espa\u00e7o de trabalho <code>qibuild</code>. Caso tenha usado nossos scripts, ele estar\u00e1 em <code>/home/softex/NAO4/workspace</code>.</li> <li>Mude o diret\u00f3rio atual para aquele com o exemplo que deseja executar. Para isso, use o comando <code>cd</code>.</li> <li>Configure o toolchain do projeto. Se usou nossos scripts, o comando <code>qibuild configure -c \"$NAOQI_CPP_QIBUILD_CONFIG\"</code> ser\u00e1 suficiente.</li> <li>Compile o projeto com <code>qibuild make</code> ou <code>qibuild make --rebuild</code>.</li> <li>Execute o programa compilado. Ele normalmente est\u00e1 em uma estrutura de diret\u00f3rios parecida com <code>build-${NAOQI_CPP_QIBUILD_CONFIG}/sdk/bin</code>. A maioria dos exemplos usa argumentos para configurar um broker, e a ordem destes normalmente \u00e9 o nome do broker do NAO ou o seu endere\u00e7o IPv4, seguido da porta em que ele escuta as conex\u00f5es, usualmente 9559.</li> </ol>"},{"location":"naoqi-2.1/cpp/about-the-examples/","title":"NAOqi 2.1 C++ programming examples","text":"<ul> <li>English</li> </ul>"},{"location":"naoqi-2.1/cpp/about-the-examples/#exemplos-de-programacao-em-c-do-naoqi-21","title":"Exemplos de programa\u00e7\u00e3o em C++ do NAOqi 2.1","text":"<ul> <li>Portugu\u00eas</li> </ul>"},{"location":"release/","title":"Marcos","text":"<p>"},{"location":"release/#release-2-v20","title":"Release 2 - V2.0","text":"<p>Temos o prazer de anunciar o lan\u00e7amento da segunda release do Robo Connection!</p> <p></p>"},{"location":"release/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<ul> <li> Imagens em guias que demandavam recursos visuais</li> <li> Cria\u00e7\u00e3o de guia - Conceitos Gerais</li> <li> Corre\u00e7\u00e3o de erros nas documenta\u00e7\u00f5es</li> <li> Cria\u00e7\u00e3o de guias de uso do SDK de C++, incluindo um Hello World testado no rob\u00f4</li> <li> Recursos de vers\u00f5es anteriores</li> </ul>"},{"location":"release/#scripts","title":"Scripts","text":"<ul> <li> Scripts de programa\u00e7\u00e3o do NAO v4 usando SDK C++ (2.1)</li> </ul>"},{"location":"release/#pagina","title":"P\u00e1gina","text":"<ul> <li> Se\u00e7\u00e3o de avalia\u00e7\u00e3o de usu\u00e1rios</li> <li> Novo rodap\u00e9</li> <li> Novo estilo de p\u00e1gina</li> <li> Setoriza\u00e7\u00e3o intuitiva dos menus de navega\u00e7\u00e3o</li> <li> Cria\u00e7\u00e3o das p\u00e1ginas \"Home\", \"Equipe\" e \"Sobre\"</li> </ul> <p> <p>Para acessar a Release direto no GitHub use o link a seguir: </p> <p>Release 2 - V2.0</p> <p></p>"},{"location":"ros1/compiling-for-amd64-based-systems-en/","title":"Compile ROS for Ubuntu 20.04 Focal AMD64-based machines","text":""},{"location":"ros1/compiling-for-amd64-based-systems-en/#instructions","title":"Instructions","text":""},{"location":"ros1/compiling-for-amd64-based-systems-en/#compiling-and-installing-on-ubuntu-based-systems","title":"Compiling and installing on Ubuntu-based Systems","text":"<p>Please be aware that this will add ROS repositories and add many dependencies on your machine.</p> <ol> <li>Run the script <code>ubuntu-compile-install-ros1-noetic.sh</code></li> <li>Authorise the administrative-level operations using your password</li> <li>ROS will be installed on the <code>ros1_noetic</code> directory in the directory which the script was run.</li> </ol>"},{"location":"ros1/compiling-for-amd64-based-systems-ptbr/","title":"Compilar o ROS para o Ubuntu 20.04 Focal em m\u00e1quinas AMD64","text":""},{"location":"ros1/compiling-for-amd64-based-systems-ptbr/#instrucoes","title":"Instru\u00e7\u00f5es","text":""},{"location":"ros1/compiling-for-amd64-based-systems-ptbr/#compilando-e-instalando-em-sistemas-baseados-em-ubuntu","title":"Compilando e instalando em sistemas baseados em Ubuntu","text":"<p>Esteja atento ao fato de que o procedimento abaixo ir\u00e1 adicionar os reposit\u00f3rios do ROS1 e v\u00e1rias depend\u00eancias em sua m\u00e1quina.</p> <ol> <li>Execute o script <code>ubuntu-compile-install-ros1-noetic.sh</code></li> <li>Autorize as opera\u00e7\u00f5es de n\u00edvel administrativo usando a sua senha</li> <li>O ROS1 ser\u00e1 instalado no diret\u00f3rio <code>ros1_noetic</code> dentro do diret\u00f3rio em que o script foi executado</li> </ol>"},{"location":"ros1/compiling-for-amd64-based-systems/","title":"Compile ROS for Ubuntu 20.04 Focal AMD64-based machines","text":"<ul> <li>English</li> </ul>"},{"location":"ros1/compiling-for-amd64-based-systems/#compilar-o-ros-para-o-ubuntu-2004-focal-em-maquinas-amd64","title":"Compilar o ROS para o Ubuntu 20.04 Focal em m\u00e1quinas AMD64","text":"<ul> <li>Portugu\u00eas</li> </ul>"},{"location":"ros1/compiling-for-arm-based-systems-en/","title":"Compile ROS1 for a ARM-based SBC (Raspberry Pi and similar devices) on your computer","text":""},{"location":"ros1/compiling-for-arm-based-systems-en/#packages-to-install","title":"Packages to install","text":"<pre><code>qemu-system-arm\nqemu-utils\nqemu-user-static\nbinfmt-support\ndevscripts\nlibguestfs-tools\n</code></pre>"},{"location":"ros1/compiling-for-arm-based-systems-en/#instructions","title":"Instructions","text":"<p>The scripts are configured by default to compile and create chroots based on ROS1's expected Ubuntu installation: a Ubuntu 20.04 LTS system up-to-date with its security repository.</p> <p>There are variables that enable the modification to compile and generate chroots for all GNU/Linux distributions supported by <code>debootstrap</code>.</p>"},{"location":"ros1/compiling-for-arm-based-systems-en/#bootstraping-a-chroot","title":"Bootstraping a chroot","text":"<p>This step is required if you wish to compile and install ROS1 on a ARM-based SBC.</p> <ol> <li>Run, with administrator priviledges,the script <code>bootstrap-chroot-32.sh</code> or <code>bootstrap-chroot-64.sh</code>, depending on the Operating System installed on your Single Board Computer. This step will be successfull if Git can be successfully installed after authorising uts installation.</li> </ol>"},{"location":"ros1/compiling-for-arm-based-systems-en/#compiling-and-installing-on-ubuntu-based-systems","title":"Compiling and installing on Ubuntu-based Systems","text":"<p>After setting the <code>chroot</code> up, you must run one of the compilation and installation scripts. The version will depend on the architecture and the operating system on your SBC.</p> <ol> <li>Run, with administrator priviledges,the script <code>ubuntu-compile-install-ros1-32.sh</code> or <code>ubuntu-compile-install-ros1-64.sh</code>, depending on the Operating System installed on your Single Board Computer.</li> <li>Authorise the operations inside the chrooted environment using the <code>CHROOTED_USER</code>'s password defined in the <code>chroot-env-vars.sh</code> script.</li> <li>ROS will be installed on the <code>CHROOTED_USER</code>'s home directory. Depending on your operating system, you may need to install <code>ros-dev-tools</code> or a similar package.</li> </ol>"},{"location":"ros1/compiling-for-arm-based-systems-en/#installing-ros1-dependencies-after-compiling-it","title":"Installing ROS1 Dependencies after compiling it","text":"<ol> <li>Copy the directory with the compiled results and the dependency scripts to the target system.</li> <li>Install the basic dependencies. This step depends on the operating system.</li> <li>Run the dependency script <code>ros1-noetic-packages.sh</code> to install the full list of dependencies.</li> </ol>"},{"location":"ros1/compiling-for-arm-based-systems-en/#installing-the-basic-dependencies-on-ubuntu-2004-lts-focal","title":"Installing the basic dependencies on Ubuntu 20.04 LTS (Focal)","text":"<p>The following script will install the basic dependencies and run the dependency script.</p> <pre><code>sudo apt install --yes git wget software-properties-common\nsudo add-apt-repository --yes universe\n\nsudo wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O /usr/share/keyrings/ros-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/ros-archive-keyring.gpg arch=$(dpkg --print-architecture)] http://packages.ros.org/ros/ubuntu focal main\" | sudo tee /etc/apt/sources.list.d/ros1.list &gt; /dev/null\nsudo apt update\n\nsudo apt install --yes ros-dev-tools\n\nsudo ./ros1-noetic-packages.sh\n</code></pre>"},{"location":"ros1/compiling-for-arm-based-systems-ptbr/","title":"Compilar ROS1 para um SBC ARM (Raspberry Pi e similares) em seu computador","text":""},{"location":"ros1/compiling-for-arm-based-systems-ptbr/#pacotes-a-instalar","title":"Pacotes a instalar","text":"<pre><code>qemu-system-arm\nqemu-utils\nqemu-user-static\nbinfmt-support\ndevscripts\nlibguestfs-tools\n</code></pre>"},{"location":"ros1/compiling-for-arm-based-systems-ptbr/#instrucoes","title":"Instru\u00e7\u00f5es","text":"<p>Os scripts s\u00e3o configurados por padr\u00e3o para compilarem e criarem chroots baseados na instala\u00e7\u00e3o do Ubuntu assumida pelo ROS1: um sistema Ubuntu 20.04 LTS que esteja atualizado em rela\u00e7\u00e3o ao seu reposit\u00f3rio de seguran\u00e7a.</p> <p>H\u00e1 vari\u00e1veis que habilitam a modifica\u00e7\u00e3o para compila\u00e7\u00e3o e gera\u00e7\u00e3o de chroots para todas as distribui\u00e7\u00f5es GNU/Linux suportadas pelo <code>debootstrap</code>.</p>"},{"location":"ros1/compiling-for-arm-based-systems-ptbr/#inicializando-um-chroot","title":"Inicializando um chroot","text":"<p>Este passo \u00e9 requerido caso queira compilar e instalar o ROS1 em um SBC baseado na arquitetura ARM.</p> <ol> <li>Execute, com privil\u00e9gios de administrador, o script <code>bootstrap-chroot-32.sh</code> ou <code>bootstrap-chroot-64.sh</code>, dependendo do sistema operacional instalado em seu Single Board Computer. Este passo ter\u00e1 sido executado com sucesso caso o Git consiga ser instalado corretamente ap\u00f3s autorizar a sua instala\u00e7\u00e3o.</li> </ol>"},{"location":"ros1/compiling-for-arm-based-systems-ptbr/#compilando-e-instalando-em-sistemas-baseados-em-ubuntu","title":"Compilando e instalando em sistemas baseados em Ubuntu","text":"<p>Depois de configurar o <code>chroot</code>, dever\u00e1 executar um dos scripts de compila\u00e7\u00e3o e instala\u00e7\u00e3o. A vers\u00e3o deles depender\u00e1 da arquitetura e do sistema operacional do seu SBC.</p> <ol> <li>Execute, com privil\u00e9gios de administrador, o script <code>ubuntu-compile-install-ros1-32.sh</code> ou <code>ubuntu-compile-install-ros1-64.sh</code>, dependendo do sistema operacional instalado no SBC.</li> <li>Autorize as opera\u00e7\u00f5es dentro do ambiente chroot usando a senha do usu\u00e1rio <code>CHROOTED_USER</code> definida no script <code>chroot-env-vars.sh</code>.</li> <li>O ROS1 ser\u00e1 instalado no diret\u00f3rio home do <code>CHROOTED_USER</code>. Dependendo de seu sistema operacional, poder\u00e1 ter que instalar o pacote <code>ros-dev-tools</code> ou o seu equivalente.</li> </ol>"},{"location":"ros1/compiling-for-arm-based-systems-ptbr/#instalando-as-dependencias-do-ros1-apos-compila-lo","title":"Instalando as depend\u00eancias do ROS1 ap\u00f3s compil\u00e1-lo","text":"<ol> <li>Copiar o diret\u00f3rio com os resultados compilados e os scripts de depend\u00eancia para o sistema alvo.</li> <li>Instalar as depend\u00eancias b\u00e1sicas. Este passo depende do sistema operacional.</li> <li>Execute o script de depend\u00eancia <code>ros1-noetic-packages.sh</code> para instalar a lista completa de depend\u00eancias.</li> </ol>"},{"location":"ros1/compiling-for-arm-based-systems-ptbr/#instalando-as-dependencias-basicas-no-ubuntu-2004-focal","title":"Instalando as depend\u00eancias b\u00e1sicas no Ubuntu 20.04 (Focal)","text":"<p>O seguinte script instalar\u00e1 as depend\u00eancias b\u00e1sicas e executar\u00e1 o script de depend\u00eancias.</p> <pre><code>sudo apt install --yes git wget software-properties-common\nsudo add-apt-repository --yes universe\n\nsudo wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O /usr/share/keyrings/ros-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/ros-archive-keyring.gpg arch=$(dpkg --print-architecture)] http://packages.ros.org/ros/ubuntu focal main\" | sudo tee /etc/apt/sources.list.d/ros1.list &gt; /dev/null\nsudo apt update\n\nsudo apt install --yes ros-dev-tools\n\nsudo ./ros1-noetic-packages.sh\n</code></pre>"},{"location":"ros1/compiling-for-arm-based-systems/","title":"Compile ROS1 for a ARM-based SBC (Raspberry Pi and similar devices) on your computer","text":"<ul> <li>English</li> </ul>"},{"location":"ros1/compiling-for-arm-based-systems/#compilar-ros1-para-um-sbc-arm-raspberry-pi-e-similares-em-seu-computador","title":"Compilar ROS1 para um SBC ARM (Raspberry Pi e similares) em seu computador","text":"<ul> <li>Portugu\u00eas</li> </ul>"},{"location":"ros1/general-instructions-en/","title":"Compiling or installing ROS1 on Debian-based systems","text":"<p>Ubuntu 20.04 is the officially supported distribution for ROS1 Noetic. Fortunately, unlike ROS2, ROS1 has been natively packaged by Debian and Ubuntu in more architectures and distributions than ROS1 team officially supports. It will be easier to follow our specific guides using compilation scripts instead of doing everything manually:</p> <ul> <li>if you wish to install precompiled ROS1 packages compiled by ROS1 development team for <code>arm64</code>, <code>amd64</code> or <code>armhf</code> machines, please follow our precompiled installation guide</li> <li>if you wish to compile ROS1:<ul> <li>for <code>amd64</code> please follow our amd64 compilation guide</li> <li>for <code>arm64</code> or <code>armhf</code> SBCs (Single Board Computers), like Raspberry and Orange Pi, Beaglebone, please follow our SBC compilation guide</li> </ul> </li> <li>if you wish to install natively packaged ROS1 in your Debian-based operating system, please follow our native package installation guide</li> </ul>"},{"location":"ros1/general-instructions-ptbr/","title":"Compilando e instalando manualmente o ROS1 em sistemas baseados em Debian","text":"<p>O Ubuntu 20.04  \u00e9 a distribui\u00e7\u00e3o oficialmente suportada pelo ROS1 Noetic. Felizmente, ao contr\u00e1rio do ROS2, o ROS1 foi empacotado nativamente pelo Debian e pelo Ubuntu em mais arquiteturas e vers\u00f5es dos sistemas do que o que foi feito pela equipe do ROS1. Ser\u00e1 mais f\u00e1cil seguir nossos guias espec\u00edficos do que fazer tudo manualmente:</p> <ul> <li>caso deseje instalar os pacotes ROS1 compilados pela equipe do ROS para m\u00e1quinas <code>arm64</code>, <code>amd64</code> ou <code>armhf</code>, siga os nosso guia de instala\u00e7\u00e3o pr\u00e9-compilado</li> <li>caso deseje compilar o ROS1:<ul> <li>para <code>amd64</code>, siga o nosso guia de compila\u00e7\u00e3o amd64</li> <li>para SBCs (Single Board Computers) baseados em <code>arm64</code> ou <code>armhf</code>, como Raspberry e Orange Pi, Beaglobone, siga o nosso guia de compila\u00e7\u00e3o SBC</li> </ul> </li> <li>caso deseje instalar o ROS1 empacotado nativamente em sua distribui\u00e7\u00e3o baseada em Debian, siga o nosso guia de instala\u00e7\u00e3o pacote nativo</li> </ul>"},{"location":"ros1/general-instructions/","title":"Compiling or installing ROS1 on Debian-based systems","text":"<ul> <li>English</li> </ul>"},{"location":"ros1/general-instructions/#compilando-e-instalando-manualmente-o-ros1-em-sistemas-baseados-em-debian","title":"Compilando e instalando manualmente o ROS1 em sistemas baseados em Debian","text":"<ul> <li>Portugu\u00eas</li> </ul>"},{"location":"ros1/installing-native-packages-en/","title":"Installing ROS1 using native packages","text":"<p>ROS1 has been natively packaged 1 by the following Debian-based GNU/Linux distributions:</p> <ul> <li>Debian<ul> <li>Stretch (9): ROS 1.7</li> <li>Buster (10): ROS 1.12</li> <li>Bullseye (11): ROS 1.16</li> <li>Bookworm (12): ROS 1.16</li> </ul> </li> <li>Ubuntu<ul> <li>Xenial (16.04): ROS 1.5</li> <li>Bionic (18.04): ROS 1.10</li> <li>Eoan (19.10): ROS 1.14</li> <li>Focal (20.04): ROS 1.15</li> <li>Groovy (20.10): ROS 1.16</li> <li>Hirsute (21.04): ROS 1.16</li> <li>Impish (21.10): ROS 1.16</li> <li>Jammy (22.04): ROS 1.16</li> <li>Kinetic (22.10): ROS 1.16</li> <li>Lunar (23.04): ROS 1.16</li> </ul> </li> </ul>"},{"location":"ros1/installing-native-packages-en/#installing-on-debian-based-distributions","title":"Installing on Debian-based distributions","text":"<p>Debian-based distributions use <code>apt</code> as a front-end for the <code>dpkg</code>. Packages can be installed using:</p> <pre><code>apt install the-package-name\n</code></pre>"},{"location":"ros1/installing-native-packages-en/#installing-on-debian-and-ubuntu","title":"Installing on Debian and Ubuntu","text":"<p>The following important packages are available on the Debian repositories:</p> <ul> <li><code>ros-desktop-full-dev</code>: <code>ros-desktop-full</code> and the dependencies needed to compile it</li> <li><code>ros-desktop-full</code></li> <li><code>ros-desktop</code>: different from the upstream, this package lacks the tutorials and <code>roslint</code>, which must be compiled from source if needed</li> <li><code>ros-base</code>: provides all the ROS base system</li> <li><code>ros-core</code>: different from the upstream, it lacks <code>geneus</code> and <code>rosbag_migration_rule</code>, which must be compiled from source if needed</li> </ul>"},{"location":"ros1/installing-native-packages-ptbr/","title":"Instalando ROS1 usando pacotes nativos","text":"<p>O ROS1 foi empacotado nativamente 1 pelas seguintes distribui\u00e7\u00f5es baseadas no Debian GNU/Linux:</p> <ul> <li>Debian<ul> <li>Stretch (9): ROS 1.7</li> <li>Buster (10): ROS 1.12</li> <li>Bullseye (11): ROS 1.16</li> <li>Bookworm (12): ROS 1.16</li> </ul> </li> <li>Ubuntu<ul> <li>Xenial (16.04): ROS 1.5</li> <li>Bionic (18.04): ROS 1.10</li> <li>Eoan (19.10): ROS 1.14</li> <li>Focal (20.04): ROS 1.15</li> <li>Groovy (20.10): ROS 1.16</li> <li>Hirsute (21.04): ROS 1.16</li> <li>Impish (21.10): ROS 1.16</li> <li>Jammy (22.04): ROS 1.16</li> <li>Kinetic (22.10): ROS 1.16</li> <li>Lunar (23.04): ROS 1.16</li> </ul> </li> </ul>"},{"location":"ros1/installing-native-packages-ptbr/#instalando-em-distribuicoes-baseadas-no-debian","title":"Instalando em distribui\u00e7\u00f5es baseadas no Debian","text":"<p>Distribui\u00e7\u00f5es baseadas no Debian usam o <code>apt</code> como uma interface que abstrai o <code>dpkg</code>. Pacotes podem ser instalados usando:</p> <pre><code>apt install nome-do-pacote\n</code></pre>"},{"location":"ros1/installing-native-packages-ptbr/#instalando-no-debian-e-no-ubuntu","title":"Instalando no Debian e no Ubuntu","text":"<p>Os seguintes pacotes importantes do ROS1 est\u00e3o dispon\u00edveis nos reposit\u00f3rios do Debian e do Ubuntu:</p> <ul> <li><code>ros-desktop-full-dev</code>: <code>ros-desktop-full</code> e as depend\u00eancias necess\u00e1rias para compil\u00e1-lo</li> <li><code>ros-desktop-full</code></li> <li><code>ros-desktop</code>: diferentemente da compila\u00e7\u00e3o original (upstream), este pacote n\u00e3o inclui os tutoriais e o <code>rosdlint</code>, que deve ser compilado a partir do c\u00f3digo-fonte caso necess\u00e1rio</li> <li><code>ros-base</code>: prov\u00ea todo o sistema b\u00e1sico do ROS</li> <li><code>ros-core</code>: diferente do upstream, n\u00e3o \u00e9 inclu\u00eddo o <code>geneus</code> e o <code>rosbag_migration_rule</code>, que devem ser compilados a partir do c\u00f3digo-fonte caso necess\u00e1rio</li> </ul>"},{"location":"ros1/installing-native-packages/","title":"Installing ROS1 using native packages","text":"<ul> <li>English</li> </ul>"},{"location":"ros1/installing-native-packages/#instalando-ros1-usando-pacotes-nativos","title":"Instalando ROS1 usando pacotes nativos","text":"<ul> <li>Portugu\u00eas</li> </ul>"},{"location":"ros1/installing-precompiled-packages-en/","title":"Installing precompiled ROS1 from ROS repositories","text":"<p>If you're using one of the currently supported operating systems, you will be able to install precompiled binary packages from ROS1 repositories.</p>"},{"location":"ros1/installing-precompiled-packages-en/#compatible-operating-systems","title":"Compatible operating systems","text":"<p>ROS1 currently packages the ROS ecosystem for the following combinations of operating systems and architectures:</p> <ul> <li>Ubuntu 20.04 LTS (focal)<ul> <li>amd64<ul> <li>ros-noetic-ros-base</li> <li>ros-noetic-desktop</li> <li>ros-noetic-desktop-full</li> </ul> </li> <li>arm64<ul> <li>ros-noetic-ros-base</li> <li>ros-noetic-desktop</li> <li>ros-noetic-desktop-full</li> </ul> </li> <li>armhf<ul> <li>ros-noetic-ros-base</li> <li>ros-noetic-desktop</li> </ul> </li> </ul> </li> <li>Debian 10 (buster)<ul> <li>amd64<ul> <li>ros-noetic-ros-base</li> <li>ros-noetic-desktop</li> <li>ros-noetic-desktop-full</li> </ul> </li> <li>arm64<ul> <li>ros-noetic-ros-base</li> <li>ros-noetic-desktop</li> </ul> </li> </ul> </li> </ul> <p>If you're on a unsopported operating system or architecture, it will be necessary to compile the ROS1 ecosystem.</p>"},{"location":"ros1/installing-precompiled-packages-en/#warning","title":"WARNING!","text":"<p>ROS2 precompiled packages are notorious for breaking systems when installed without upgrading the system 1 2! Although the installation scripts follow the recommended procedures, and ROS1 does not cite that the same problem exists for their packages, the risk remains!</p> <p>You MUST have the security repository enabled, as ROS packages are not tested on a standard Debian packaging environment and assume that this repository will be enabled and that the system is up to date. Please note that for Ubuntu, the security repository is different for <code>amd64</code> or <code>armhf</code>/<code>arm64</code>:</p> <ul> <li>Ubuntu Focal<ul> <li>Security repository for <code>amd64</code>: <code>deb http://security.ubuntu.com/ubuntu focal-security main</code></li> <li>Security repository for <code>arm64</code> and <code>armhf</code>: <code>deb http://ports.ubuntu.com/ubuntu-ports focal-security main</code></li> </ul> </li> <li>Debian Buster<ul> <li>Security repository for <code>amd64</code>, <code>i386</code>, <code>arm64</code> and <code>armhf</code>: <code>deb https://security.debian.org/debian-security buster/updates main</code></li> </ul> </li> </ul> <p>The precompiled packages also have chronic problems with dependencies even when installed on the supported configurations 3 4. If the installation fails due to dependency problems, it is advised to compile ROS1 from source or, if possible, installing the distribution's native packages instead of trying to fight the unsatisfiable dependencies.</p>"},{"location":"ros1/installing-precompiled-packages-en/#instructions-for-supported-systems","title":"Instructions for supported systems","text":""},{"location":"ros1/installing-precompiled-packages-en/#bootstraping-a-chroot","title":"Bootstraping a chroot","text":"<p>This step is required only if you wish to test the installation of ROS1 on a ARM-based SBC. The script can be modified to test the installation on an amd64 Debian-based distribution.</p> <ol> <li>Run, with administrator priviledges,the script <code>bootstrap-chroot-32.sh</code> or <code>bootstrap-chroot-64.sh</code>, depending on the Operating System installed on your Single Board Computer. This step will be successfull if Git can be successfully installed after authorising its installation.</li> </ol>"},{"location":"ros1/installing-precompiled-packages-en/#installing-on-ubuntu-based-systems","title":"Installing on Ubuntu-based Systems","text":"<p>You must run one of the installation scripts. The version will depend on the architecture and the operating system on your machine.</p> <p>Due to limited support of ROS1, this repository only supports 64-bit based ARM or AMD64, or 32-bit based ARM (armhf) although the scripts can be easily modified to support other architectures and Debian-based operating systems as soon as they are available.</p> <ol> <li>If you are in a chroot, please run, with administrator priviledges, the scripts <code>ubuntu-install-ros1-32-base.sh</code>, <code>ubuntu-install-ros1-32-desktop.sh</code>, <code>ubuntu-install-ros1-64-base.sh</code>, <code>ubuntu-install-ros1-64-desktop.sh</code>, <code>ubuntu-install-ros1-64-desktop-full.sh</code> depending on the ROS1 packages you wish to install.</li> <li>Authorise the administrative-level operations using your password.</li> </ol>"},{"location":"ros1/installing-precompiled-packages-ptbr/","title":"Instalando pacotes pr\u00e9-compilados do ROS1 a partir dos reposit\u00f3rios ROS","text":"<p>Se estiver usando um sistema operacional suportado, poder\u00e1 instalar os pacotes bin\u00e1rios pr\u00e9-compilados dos reposit\u00f3rios do ROS1.</p>"},{"location":"ros1/installing-precompiled-packages-ptbr/#sistemas-operacionais-compativeis","title":"Sistemas operacionais compat\u00edveis","text":"<p>O ROS1 empacota o ecossistema ROS para as seguintes combina\u00e7\u00f5es de sistemas operacionais e arquiteturas:</p> <ul> <li>Ubuntu 20.04 LTS (focal)<ul> <li>amd64<ul> <li>ros-noetic-ros-base</li> <li>ros-noetic-desktop</li> <li>ros-noetic-desktop-full</li> </ul> </li> <li>arm64<ul> <li>ros-noetic-ros-base</li> <li>ros-noetic-desktop</li> <li>ros-noetic-desktop-full</li> </ul> </li> <li>armhf<ul> <li>ros-noetic-ros-base</li> <li>ros-noetic-desktop</li> </ul> </li> </ul> </li> <li>Debian 10 (buster)<ul> <li>amd64<ul> <li>ros-noetic-ros-base</li> <li>ros-noetic-desktop</li> <li>ros-noetic-desktop-full</li> </ul> </li> <li>arm64<ul> <li>ros-noetic-ros-base</li> <li>ros-noetic-desktop</li> </ul> </li> </ul> </li> </ul> <p>Caso esteja em um sistema n\u00e3o suportado, ser\u00e1 necess\u00e1rio compilar o ecossistema ROS1.</p>"},{"location":"ros1/installing-precompiled-packages-ptbr/#aviso","title":"AVISO!","text":"<p>Os pacotes pr\u00e9-compilados do ROS2 s\u00e3o not\u00f3rios por quebrar sistemas que n\u00e3o foram atualizados 1 2! Apesar dos scripts de instala\u00e7\u00e3o seguirem os procedimentos recomendados, e do ROS1 n\u00e3o citar que o mesmo problema existe para os seus pacotes, o risco ainda permanece!</p> <p>Voc\u00ea DEVE habilitar o reposit\u00f3rio de seguran\u00e7a, pois os pacotes do ROS1 n\u00e3o s\u00e3o testados em um ambiente padr\u00e3o de empacotamento Debian e assumem que o esse reposit\u00f3rio estar\u00e1 habilitado e o sistema estar\u00e1 atualizado em rela\u00e7\u00e3o a ele. Fique atento ao fato de que o reposit\u00f3rio de seguran\u00e7a \u00e9 diferente para <code>amd64</code> ou <code>armhf</code>/<code>arm64</code>:</p> <ul> <li>Ubuntu Focal<ul> <li>Reposit\u00f3rio de seguran\u00e7a para <code>amd64</code>: <code>deb http://security.ubuntu.com/ubuntu focal-security main</code></li> <li>Reposit\u00f3rio de seguran\u00e7a para <code>arm64</code> and <code>armhf</code>: <code>deb http://ports.ubuntu.com/ubuntu-ports focal-security main</code></li> </ul> </li> <li>Debian Buster<ul> <li>Reposit\u00f3rio de seguran\u00e7a para <code>amd64</code>, <code>i386</code>, <code>arm64</code> and <code>armhf</code>: <code>deb https://security.debian.org/debian-security buster/updates main</code></li> </ul> </li> </ul> <p>Os pacotes pr\u00e9-compilados tamb\u00e9m possuem problemas cr\u00f4nicos com depend\u00eancias mesmo quando s\u00e3o instalados na configura\u00e7\u00e3o suportada do Ubuntu 3 4. Caso a instala\u00e7\u00e3o falhe devido a problemas de depend\u00eancia, aconselha-se compilar o ROS1 a partir do c\u00f3digo-fonte, ou, se poss\u00edvel, instalar os pacotes nativos da distribui\u00e7\u00e3o e n\u00e3o tentar lutar com as depend\u00eancias n\u00e3o satisfeitas.</p>"},{"location":"ros1/installing-precompiled-packages-ptbr/#instrucoes-para-sistemas-suportados","title":"Instru\u00e7\u00f5es para sistemas suportados","text":""},{"location":"ros1/installing-precompiled-packages-ptbr/#inicializando-um-chroot","title":"Inicializando um chroot","text":"<p>Este passo s\u00f3 \u00e9 necess\u00e1rio caso queira testar a instala\u00e7\u00e3o do ROS1 em um SBC ARM. O script pode ser modificado para testar a instala\u00e7\u00e3o em outras distribui\u00e7\u00f5es baseadas no Debian.</p> <ol> <li>Execute, com privil\u00e9gios de administrador, o script <code>bootstrap-chroot-32.sh</code> ou <code>bootstrap-chroot-64.sh</code>, dependendo do sistema operacional instalado em seu Single Board Computer. Este passo ter\u00e1 sido executado com sucesso caso o Git consiga ser instalado corretamente ap\u00f3s autorizar a sua instala\u00e7\u00e3o.</li> </ol>"},{"location":"ros1/installing-precompiled-packages-ptbr/#instalando-em-sistemas-baseados-em-ubuntu","title":"Instalando em sistemas baseados em Ubuntu","text":"<p>Dever\u00e1 executar um dos scripts de instala\u00e7\u00e3o. A vers\u00e3o depender\u00e1 da arquitetura e do sistema operacional instalado em sua m\u00e1quina.</p> <p>Devido ao suporte limitado do ROS1, o reposit\u00f3rio suporta apenas ARM de 64 bits ou AMD64. ou sistemas ARM de 32 bits (armhf). Os scripts podem ser facilmente modificados para suportarem outras arquiteturas t\u00e3o logo estiverem dispon\u00edveis.</p> <ol> <li>Se estiver em um chroot, favor executar os scripts <code>ubuntu-install-ros1-32-base.sh</code>, <code>ubuntu-install-ros1-32-desktop.sh</code>, <code>ubuntu-install-ros1-64-base.sh</code>, <code>ubuntu-install-ros1-64-desktop.sh</code>, <code>ubuntu-install-ros1-64-desktop-full.sh</code> com privil\u00e9gios administrativos dependendo dos pacotes ROS1 que quiser instalar.</li> <li>Autorize as opera\u00e7\u00f5es de n\u00edvel administrativo com sua senha.</li> </ol>"},{"location":"ros1/installing-precompiled-packages/","title":"Installing precompiled ROS1 from ROS repositories","text":"<ul> <li>English</li> </ul>"},{"location":"ros1/installing-precompiled-packages/#instalando-pacotes-pre-compilados-do-ros1-a-partir-dos-repositorios-ros","title":"Instalando pacotes pr\u00e9-compilados do ROS1 a partir dos reposit\u00f3rios ROS","text":"<ul> <li>Portugu\u00eas</li> </ul>"},{"location":"ros2/compiling-for-amd64-based-systems-en/","title":"Compile ROS2 for Ubuntu 22.04 Jammy AMD64-based machines","text":""},{"location":"ros2/compiling-for-amd64-based-systems-en/#instructions","title":"Instructions","text":""},{"location":"ros2/compiling-for-amd64-based-systems-en/#compiling-and-installing-on-ubuntu-based-systems","title":"Compiling and installing on Ubuntu-based Systems","text":"<p>Please be aware that this will add ROS2 repositories and add many dependencies on your machine.</p> <ol> <li>Run the script <code>ubuntu-compile-install-ros2-humble.sh</code></li> <li>Authorise the administrative-level operations using your password</li> <li>ROS will be installed on the <code>ros2_humble</code> directory in the directory which the script was run.</li> </ol>"},{"location":"ros2/compiling-for-amd64-based-systems-ptbr/","title":"Compilar o ROS2 para o Ubuntu 22.04 Jammy em m\u00e1quinas AMD64","text":""},{"location":"ros2/compiling-for-amd64-based-systems-ptbr/#instrucoes","title":"Instru\u00e7\u00f5es","text":""},{"location":"ros2/compiling-for-amd64-based-systems-ptbr/#compilando-e-instalando-em-sistemas-baseados-em-ubuntu","title":"Compilando e instalando em sistemas baseados em Ubuntu","text":"<p>Esteja atento ao fato de que o procedimento abaixo ir\u00e1 adicionar os reposit\u00f3rios do ROS2 e v\u00e1rias depend\u00eancias em sua m\u00e1quina.</p> <ol> <li>Execute o script <code>ubuntu-compile-install-ros2-humble.sh</code></li> <li>Autorize as opera\u00e7\u00f5es de n\u00edvel administrativo usando a sua senha</li> <li>O ROS2 ser\u00e1 instalado no diret\u00f3rio <code>ros2_humble</code> dentro do diret\u00f3rio em que o script foi executado</li> </ol>"},{"location":"ros2/compiling-for-amd64-based-systems/","title":"Compile ROS for Ubuntu 22.04 Jammy AMD64-based machines","text":"<ul> <li>English</li> </ul>"},{"location":"ros2/compiling-for-amd64-based-systems/#compilar-o-ros2-para-o-ubuntu-2204-jammy-em-maquinas-amd64","title":"Compilar o ROS2 para o Ubuntu 22.04 Jammy em m\u00e1quinas AMD64","text":"<ul> <li>Portugu\u00eas</li> </ul>"},{"location":"ros2/compiling-for-arm-based-systems-en/","title":"Compile ROS for a ARM-based SBC (Raspberry Pi and similar devices) on your computer","text":""},{"location":"ros2/compiling-for-arm-based-systems-en/#packages-to-install","title":"Packages to install","text":"<pre><code>qemu-system-arm\nqemu-utils\nqemu-user-static\nbinfmt-support\ndevscripts\nlibguestfs-tools\n</code></pre>"},{"location":"ros2/compiling-for-arm-based-systems-en/#instructions","title":"Instructions","text":"<p>The scripts are configured by default to compile and create chroots based on ROS2's expected Ubuntu installation: a Ubuntu 22.04 LTS system up-to-date with its security repository.</p> <p>There are variables that enable the modification to compile and generate chroots for all GNU/Linux distributions supported by <code>debootstrap</code>.</p>"},{"location":"ros2/compiling-for-arm-based-systems-en/#bootstraping-a-chroot","title":"Bootstraping a chroot","text":"<p>This step is required if you wish to compile and install ROS2 on a ARM-based SBC.</p> <ol> <li>Run, with administrator priviledges,the script <code>bootstrap-chroot-32.sh</code> or <code>bootstrap-chroot-64.sh</code>, depending on the Operating System installed on your Single Board Computer. This step will be successfull if Git can be successfully installed after authorising its installation.</li> </ol>"},{"location":"ros2/compiling-for-arm-based-systems-en/#compiling-and-installing-on-ubuntu-based-systems","title":"Compiling and installing on Ubuntu-based Systems","text":"<p>After setting the <code>chroot</code> up, you must run one of the compilation and installation scripts. The version will depend on the architecture and the operating system on your SBC.</p> <ol> <li>Run, with administrator priviledges,the script <code>ubuntu-compile-install-ros2-32.sh</code> or <code>ubuntu-compile-install-ros2-64.sh</code>, depending on the Operating System installed on your Single Board Computer.</li> <li>Authorise the operations inside the chrooted environment using the <code>CHROOTED_USER</code>'s password defined in the <code>chroot-env-vars.sh</code> script.</li> <li>ROS will be installed on the <code>CHROOTED_USER</code>'s home directory. Depending on your operating system, you may need to install <code>ros-dev-tools</code> or a similar package.</li> </ol>"},{"location":"ros2/compiling-for-arm-based-systems-en/#installing-ros2-dependencies-after-compiling-it","title":"Installing ROS2 Dependencies after compiling it","text":"<ol> <li>Copy the directory with the compiled results and the dependency scripts to the target system.</li> <li>Install the basic dependencies. This step depends on the operating system.</li> <li>Run the dependency script <code>ros2-humble-packages.sh</code> to install the full list of dependencies.</li> </ol>"},{"location":"ros2/compiling-for-arm-based-systems-en/#installing-the-basic-dependencies-on-ubuntu-2204-lts-jammy","title":"Installing the basic dependencies on Ubuntu 22.04 LTS (Jammy)","text":"<p>The following script will install the basic dependencies and run the dependency script.</p> <pre><code>sudo apt install --yes git wget software-properties-common\nsudo add-apt-repository --yes universe\n\nsudo wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O /usr/share/keyrings/ros-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/ros-archive-keyring.gpg arch=$(dpkg --print-architecture)] http://packages.ros.org/ros2/ubuntu jammy main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\nsudo apt update\n\nsudo apt install --yes ros-dev-tools\n\nsudo ./ros2-humble-packages.sh\n</code></pre>"},{"location":"ros2/compiling-for-arm-based-systems-ptbr/","title":"Compilar ROS2 para um SBC ARM (Raspberry Pi e similares) em seu computador","text":""},{"location":"ros2/compiling-for-arm-based-systems-ptbr/#pacotes-a-instalar","title":"Pacotes a instalar","text":"<pre><code>qemu-system-arm\nqemu-utils\nqemu-user-static\nbinfmt-support\ndevscripts\nlibguestfs-tools\n</code></pre>"},{"location":"ros2/compiling-for-arm-based-systems-ptbr/#instrucoes","title":"Instru\u00e7\u00f5es","text":"<p>Os scripts s\u00e3o configurados por padr\u00e3o para compilarem e criarem chroots baseados na instala\u00e7\u00e3o do Ubuntu assumida pelo ROS2: um sistema Ubuntu 22.04 LTS que esteja atualizado em rela\u00e7\u00e3o ao seu reposit\u00f3rio de seguran\u00e7a.</p> <p>H\u00e1 vari\u00e1veis que habilitam a modifica\u00e7\u00e3o para compila\u00e7\u00e3o e gera\u00e7\u00e3o de chroots para todas as distribui\u00e7\u00f5es GNU/Linux suportadas pelo <code>debootstrap</code>.</p>"},{"location":"ros2/compiling-for-arm-based-systems-ptbr/#inicializando-um-chroot","title":"Inicializando um chroot","text":"<p>Este passo \u00e9 requerido caso queira compilar e instalar o ROS2 em um SBC baseado na arquitetura ARM.</p> <ol> <li>Execute, com privil\u00e9gios de administrador, o script <code>bootstrap-chroot-32.sh</code> ou <code>bootstrap-chroot-64.sh</code>, dependendo do sistema operacional instalado em seu Single Board Computer. Este passo ter\u00e1 sido executado com sucesso caso o Git consiga ser instalado corretamente ap\u00f3s autorizar a sua instala\u00e7\u00e3o.</li> </ol>"},{"location":"ros2/compiling-for-arm-based-systems-ptbr/#compilando-e-instalando-em-sistemas-baseados-em-ubuntu","title":"Compilando e instalando em sistemas baseados em Ubuntu","text":"<p>Depois de configurar o <code>chroot</code>, dever\u00e1 executar um dos scripts de compila\u00e7\u00e3o e instala\u00e7\u00e3o. A vers\u00e3o deles depender\u00e1 da arquitetura e do sistema operacional do seu SBC.</p> <ol> <li>Execute, com privil\u00e9gios de administrador, o script <code>ubuntu-compile-install-ros2-32.sh</code> ou <code>ubuntu-compile-install-ros2-64.sh</code>, dependendo do sistema operacional instalado no SBC.</li> <li>Autorize as opera\u00e7\u00f5es dentro do ambiente chroot usando a senha do usu\u00e1rio <code>CHROOTED_USER</code> definida no script <code>chroot-env-vars.sh</code>.</li> <li>O ROS2 ser\u00e1 instalado no diret\u00f3rio home do <code>CHROOTED_USER</code>. Dependendo de seu sistema operacional, poder\u00e1 ter que instalar o pacote <code>ros-dev-tools</code> ou o seu equivalente.</li> </ol>"},{"location":"ros2/compiling-for-arm-based-systems-ptbr/#instalando-as-dependencias-do-ros2-apos-compila-lo","title":"Instalando as depend\u00eancias do ROS2 ap\u00f3s compil\u00e1-lo","text":"<ol> <li>Copiar o diret\u00f3rio com os resultados compilados e os scripts de depend\u00eancia para o sistema alvo.</li> <li>Instalar as depend\u00eancias b\u00e1sicas. Este passo depende do sistema operacional.</li> <li>Execute o script de depend\u00eancia <code>ros2-humble-packages.sh</code> para instalar a lista completa de depend\u00eancias.</li> </ol>"},{"location":"ros2/compiling-for-arm-based-systems-ptbr/#instalando-as-dependencias-basicas-no-ubuntu-2204-jammy","title":"Instalando as depend\u00eancias b\u00e1sicas no Ubuntu 22.04 (Jammy)","text":"<p>O seguinte script instalar\u00e1 as depend\u00eancias b\u00e1sicas e executar\u00e1 o script de depend\u00eancias.</p> <pre><code>sudo apt install --yes git wget software-properties-common\nsudo add-apt-repository --yes universe\n\nsudo wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O /usr/share/keyrings/ros-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/ros-archive-keyring.gpg arch=$(dpkg --print-architecture)] http://packages.ros.org/ros2/ubuntu jammy main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\nsudo apt update\n\nsudo apt install --yes ros-dev-tools\n\nsudo ./ros2-humble-packages.sh\n</code></pre>"},{"location":"ros2/compiling-for-arm-based-systems/","title":"Compile ROS for a ARM-based SBC (Raspberry Pi and similar devices) on your computer","text":"<ul> <li>English</li> </ul>"},{"location":"ros2/compiling-for-arm-based-systems/#compilar-ros2-para-um-sbc-arm-raspberry-pi-e-similares-em-seu-computador","title":"Compilar ROS2 para um SBC ARM (Raspberry Pi e similares) em seu computador","text":"<ul> <li>Portugu\u00eas</li> </ul>"},{"location":"ros2/general-instructions-en/","title":"Manually compiling and installing ROS2 on Debian-based systems","text":"<p>How to manually compile and install ROS2 from its source code on Debian-based GNU/Linux distributions. This guide uses Debian 12 Bookworm as the chrooted distribution and requires some experience with GNU/Linux, Debian-based systems administration and shell scripts.</p> <p>Ubuntu 22.04 is the officially supported distribution for ROS2 Humble. It will be easier to follow our specific guides using compilation scripts instead of doing everything manually:</p> <ul> <li>if you wish to install precompiled ROS2 packages on <code>arm64</code> and <code>amd64</code> machines, please follow our precompiled installation guide</li> <li>if you wish to compile ROS2:<ul> <li>for <code>amd64</code> please follow our amd64 compilation guide</li> <li>for <code>arm64</code> or <code>armhf</code> SBCs (Single Board Computers), like Raspberry and Orange Pi, Beaglebone, please follow our SBC compilation guide</li> </ul> </li> </ul>"},{"location":"ros2/general-instructions-en/#ros2-wikis-approach","title":"ROS2 Wiki's approach","text":"<p>As stated in the ROS2 Humble source installation documentation. This approach compiles software that already exists on Debian repositories or that is not relevant to the system.</p> <p>Due to ROS insisting on using packages from their repositories, even when Debian or Ubuntu builds the same package from the same source, this approach requires uninstalling the native version to allow <code>rosdep</code> to install some renamed dependencies.</p> <p>This approach is recommended for Ubuntu and its derivatives as long as the distribution codename is correctly replaced on the <code>debootstrap</code> and the ROS2 repositories.</p>"},{"location":"ros2/general-instructions-en/#generating-the-chroot","title":"Generating the chroot","text":"<pre><code>debootstrap bookworm ./bookworm-chroot http://deb.debian.org/debian\n# Do not bind mount /sys/firmware/efi/efivars\n# Do not bind mount /dev\nfor i in /dev/pts /proc /sys /run; do sudo mount -B $i $(pwd)/bookworm-chroot$i; done\nchroot bookworm-chroot\n</code></pre>"},{"location":"ros2/general-instructions-en/#deactivating-the-bound-mounts","title":"Deactivating the bound mounts","text":"<p>When you leave the chroot, do not forget to unmount the directories that were bind-mounted to it.</p> <pre><code>for i in /dev/pts /proc /sys /run; do umount $(pwd)/bookworm-chroot$i; done\n</code></pre>"},{"location":"ros2/general-instructions-en/#compiling","title":"Compiling","text":"<pre><code># Tools to download code\napt install git colcon python3-rosdep2 vcstool wget\n\n# ROS repositories where the old python3-vcstool lives\n# THIS WILL OVERWRITE ROS-RELATED SYSTEM PACKAGES!\nwget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O /usr/share/keyrings/ros-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu bookworm main\" &gt; /etc/apt/sources.list.d/ros2.list\napt update\n\n# Common dependencies\napt install python3-flake8-docstrings python3-pip python3-pytest-cov\n\n# Other dependencies\napt install python3-flake8-blind-except python3-flake8-builtins python3-flake8-class-newline python3-flake8-comprehensions python3-flake8-deprecated python3-flake8-import-order python3-flake8-quotes python3-pytest-repeat python3-pytest-rerunfailures\n\n# Create a workspace and clone all repos\nmkdir -p ros2_humble/src\ncd ros2_humble\nvcs import --input https://raw.githubusercontent.com/ros2/ros2/humble/ros2.repos src\n\n# Install even more dependencies\n# rosdep init\nrosdep update\n\n# Broken python3-vcstools (rosdep thinks it is  python3-vcstool)\napt remove vcstool\nrosdep install --from-paths src --ignore-src -y --skip-keys \"fastcdr rti-connext-dds-6.0.1 urdfdom_headers\"\n\n# Build the code\n# Colcon needs pty devices or it will die before compiling anything\n# If you're building in a chrooted environment, you must bind mount the required devices\ncd ros2_humble/\ncolcon build\n\n# Source the environment script\n# Replace \".bash\" with your shell if you're not using bash\n# Possible values are: setup.bash, setup.sh, setup.zsh\n. ros2_humble/install/local_setup.bash\n\n# Try the examples\n. ros2_humble/install/local_setup.bash\nros2 run demo_nodes_cpp talker\n\n. ros2_humble/install/local_setup.bash\nros2 run demo_nodes_py listener\n</code></pre>"},{"location":"ros2/general-instructions-en/#debian-wikis-approach","title":"Debian Wiki's approach","text":"<p>Instructions adapted from Debian's Wiki and the current ROS2 LTS release, Humble Hawksbill.</p> <p>This approach removes unnecessary artifacts from the build phase, as most of them are already compiled in Debian or are not relevant for compiling and installing ROS2 Humble or Rolling in the system.</p> <p>It is recommended to follow this approach when compiling on Debian 12, although Ubuntu-based distributions newer than 23.04 are likely to have packaged the same dependencies.</p>"},{"location":"ros2/general-instructions-en/#generating-the-chroot_1","title":"Generating the chroot","text":"<pre><code>debootstrap bookworm ./bookworm-chroot-wiki http://deb.debian.org/debian\n# Do not bind mount /sys/firmware/efi/efivars\n# Do not bind mount /dev\nfor i in /dev/pts /proc /sys /run; do sudo mount -B $i $(pwd)/bookworm-chroot-wiki$i; done\nchroot bookworm-chroot-wiki\n# Create softex user with softex as a password\nuseradd --home-dir '/home/softex' --skel '/etc/skel' --create-home --shell '/bin/bash' softex\nchpasswd &lt;&lt;&lt; 'softex:softex'\n</code></pre>"},{"location":"ros2/general-instructions-en/#deactivating-the-bound-mounts_1","title":"Deactivating the bound mounts","text":"<p>When you leave the chroot, do not forget to unmount the directories that were bind-mounted to it.</p> <pre><code>for i in /dev/pts /proc /sys /run; do umount $(pwd)/bookworm-chroot-wiki$i; done\n</code></pre>"},{"location":"ros2/general-instructions-en/#compiling_1","title":"Compiling","text":"<pre><code># Check UTF-8 support\n# as root\nif command -v locale &gt; /dev/null; then\n    if grep --quiet 'UTF-8' &lt;&lt;&lt; \"$(locale)\"; then\n        echo \"UTF-8 locale found\"\n    else\n        echo \"No UTF-8 locales found! Installation may FAIL!\"\n    fi\nelse\n    echo \"Please install 'locales' package\"\nfi\n\n# Tools to download code\n# as root\napt install git colcon python3-rosdep2 vcstool wget\n\n# Create a workspace and clone all repos\n# as other user\nmkdir -p ros2_humble/src\ncd /home/softex/ros2_humble\nwget https://raw.githubusercontent.com/ros2/ros2/humble/ros2.repos\n# Remove what is already packaged in Debian\nsed -i '/\\(ament\\|eProsima\\|eclipse\\|ignition\\|osrf\\|tango\\|urdfdom\\|tinyxml_\\|loader\\|pluginlib\\|rcutils\\|rcpputils\\|test_interface\\|testing_tools\\|fixture\\|rosidl:\\)/,+3d' ros2.repos\nvcs import src &lt; ros2.repos\n\n# Install even more dependencies\nrosdep update\nrosdep check --from-paths src --ignore-src -y --skip-keys \"fastcdr rti-connext-dds-6.0.1 urdfdom_headers\"\nprintf '#!/bin/bash\\n' &gt; ros2-humble-packages.sh\nprintf 'apt install --yes' &gt;&gt; ros2-humble-packages.sh\nperl -ne 'print \" $+{package}\" if /apt\\s(?&lt;package&gt;.+)/' &lt;&lt;&lt; \"$(rosdep check --from-paths src --ignore-src -y --skip-keys \"fastcdr rti-connext-dds-6.0.1 urdfdom_headers\" 2&gt;/dev/null)\" &gt;&gt; ros2-humble-packages.sh\nchmod +x ros2-humble-packages.sh\n\n# as root\ncd /home/softex/ros2_humble\n./ros2-humble-packages.sh\n\n# Build the code\n# Colcon needs pty devices or it will die before compiling anything\n# If you're building in a chrooted environment, you must bind mount the required devices\n# as other user\ncd /home/softex/ros2_humble\nrosdep fix-permissions\nrosdep update\nrosdep check --from-paths src --ignore-src -y --skip-keys \"fastcdr rti-connext-dds-6.0.1 urdfdom_headers\"\ncolcon build\n\n# Source the environment script\n# Replace \".bash\" with your shell if you're not using bash\n# Possible values are: setup.bash, setup.sh, setup.zsh\n. ros2_humble/install/local_setup.bash\n\n# Try the examples\n. ros2_humble/install/local_setup.bash\nros2 run demo_nodes_cpp talker\n\n. ros2_humble/install/local_setup.bash\nros2 run demo_nodes_py listener\n</code></pre>"},{"location":"ros2/general-instructions-ptbr/","title":"Compilando e instalando manualmente o ROS2 em sistemas baseados em Debian","text":"<p>Como instalar e compilar manualmente o ROS2 a partir de seu c\u00f3digo-fonte em distribui\u00e7\u00f5es GNU/Linux baseadas no Debian. Este guia usa o Debian 12 Bookworm como a distribui\u00e7\u00e3o do chroot, e requer alguma experi\u00eancia com GNU/Linux, administra\u00e7\u00e3o de sistemas baseados em Debian e shell scripts.</p> <p>O Ubuntu 22.04 \u00e9 a distribui\u00e7\u00e3o oficialmente suportada pelo ROS2 Humble. Ser\u00e1 mais f\u00e1cil seguir nossos guias espec\u00edficos que usam scripts de compila\u00e7\u00e3o do que fazer tudo manualmente:</p> <ul> <li>se deseja instalar pacotes pr\u00e9-compilados do ROS2 em m\u00e1quinas <code>arm64</code> ou <code>amd64</code>, por favor siga o nosso guia de instala\u00e7\u00e3o pr\u00e9-compilada</li> <li>se deseja compilar o ROS2:<ul> <li>para <code>amd64</code>, por favor siga o nosso guia de compila\u00e7\u00e3o amd64</li> <li>para SBCs (Single Board Computers) <code>arm64</code> ou <code>armhf</code>, por favor siga nosso guia de compila\u00e7\u00e3o SBC</li> </ul> </li> </ul>"},{"location":"ros2/general-instructions-ptbr/#abordagem-da-wiki-do-ros2","title":"Abordagem da Wiki do ROS2","text":"<p>Assim como visto na documenta\u00e7\u00e3o de instala\u00e7\u00e3o a partir do c\u00f3digo-fonte. Essa abordagem compila o software que j\u00e1 existe nos reposit\u00f3rios do Debian ou que n\u00e3o \u00e9 relevante para o sistema.</p> <p>Como o ROS insiste em usar pacotes de seus pr\u00f3prios reposit\u00f3rios, mesmo quando o Debian ou o Ubuntu constroem o mesmo pacote do mesmo c\u00f3digo-fonte, essa abordagem requer a desinstala\u00e7\u00e3o da vers\u00e3o nativa para permitir que o <code>rosdep</code> instale algumas depend\u00eancias renomeadas.</p> <p>Essa abordagem \u00e9 recomendada para o Ubuntu e seus derivados, contanto que o nome da distribui\u00e7\u00e3o seja corretamente substitu\u00eddo no <code>debootstrap</code> e nos reposit\u00f3rios do ROS2.</p>"},{"location":"ros2/general-instructions-ptbr/#gerando-o-chroot","title":"Gerando o chroot","text":"<pre><code>debootstrap bookworm ./bookworm-chroot http://deb.debian.org/debian\n# N\u00e3o montar vinculando /sys/firmware/efi/efivars\n# N\u00e3o montar vinculando /dev\nfor i in /dev/pts /proc /sys /run; do sudo mount -B $i $(pwd)/bookworm-chroot$i; done\nchroot bookworm-chroot\n</code></pre>"},{"location":"ros2/general-instructions-ptbr/#desativando-as-montagens-vinculadas-bound-mounts","title":"Desativando as montagens vinculadas (bound mounts)","text":"<p>Quando sair do chroot, n\u00e3o se esque\u00e7a de desmontar os diret\u00f3rios que foram montados com v\u00ednculo no chroot.</p> <pre><code>for i in /dev/pts /proc /sys /run; do umount $(pwd)/bookworm-chroot$i; done\n</code></pre>"},{"location":"ros2/general-instructions-ptbr/#compilando","title":"Compilando","text":"<pre><code># Ferramentas para baixar c\u00f3digo\napt install git colcon python3-rosdep2 vcstool wget\n\n# Reposit\u00f3rios ROS onde o velho python3-vcstool mora\n# ISSO VAI SOBRESCREVER TODOS OS PACOTES DE SISTEMA RELACIONADOS AO ROS!\nwget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O /usr/share/keyrings/ros-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu bookworm main\" &gt; /etc/apt/sources.list.d/ros2.list\napt update\n\n# Depend\u00eancias comuns\napt install python3-flake8-docstrings python3-pip python3-pytest-cov\n\n# Outras depend\u00eancias\napt install python3-flake8-blind-except python3-flake8-builtins python3-flake8-class-newline python3-flake8-comprehensions python3-flake8-deprecated python3-flake8-import-order python3-flake8-quotes python3-pytest-repeat python3-pytest-rerunfailures\n\n# Criar um espa\u00e7o de trabalho e clonar todos os reposit\u00f3rios\nmkdir -p ros2_humble/src\ncd ros2_humble\nvcs import --input https://raw.githubusercontent.com/ros2/ros2/humble/ros2.repos src\n\n# Instalar ainda mais depend\u00eancias\n# rosdep init\nrosdep update\n\n# python3-vcstools quebrado (rosdep acha que \u00e9 python3-vcstool)\napt remove vcstool\nrosdep install --from-paths src --ignore-src -y --skip-keys \"fastcdr rti-connext-dds-6.0.1 urdfdom_headers\"\n\n# Construir o c\u00f3digo\n# Colcon precisa de dispositivos pty ou vai morrer antes de compilar qualquer coisa\n# Se estiver construindo em um ambiente chroot, precisar\u00e1 de montar com v\u00ednculo os dispositivos requeridos\ncd ros2_humble/\ncolcon build\n\n# Ler o script de ambiente\n# Substitua \".bash\" pelo seu shell caso n\u00e3o esteja usando-o\n# Valores poss\u00edveis s\u00e3o: setup.bash, setup.sh, setup.zsh\n. ros2_humble/install/local_setup.bash\n\n# Teste os exemplos\n. ros2_humble/install/local_setup.bash\nros2 run demo_nodes_cpp talker\n\n. ros2_humble/install/local_setup.bash\nros2 run demo_nodes_py listener\n</code></pre>"},{"location":"ros2/general-instructions-ptbr/#abordagem-da-debian-wiki","title":"Abordagem da Debian Wiki","text":"<p>Instru\u00e7\u00f5es adaptadas da Wiki do Debian e do lan\u00e7amento atual do ROS2 LTS Humble Hawksbill.</p> <p>Essa abordagem remove artefatos desnecess\u00e1rios da fase de constru\u00e7\u00e3o, j\u00e1 que a maioria deles j\u00e1 est\u00e1 compilada no Debian ou n\u00e3o s\u00e3o relevantes para a compila\u00e7\u00e3o e instala\u00e7\u00e3o do ROS2 Humble ou Rolling no sistema.</p> <p>Recomenda-se seguir esta abordagem quando compilar no Debian 12, apesar de que distribui\u00e7\u00f5es baseadas mp Ubuntu mais novas que a vers\u00e3o 23.04 provavelmente empacotaram as mesmas depend\u00eancias.</p>"},{"location":"ros2/general-instructions-ptbr/#gerando-o-chroot_1","title":"Gerando o chroot","text":"<pre><code>debootstrap bookworm ./bookworm-chroot-wiki http://deb.debian.org/debian\n# N\u00e3o montar vinculando /sys/firmware/efi/efivars\n# N\u00e3o montar vinculando /dev\nfor i in /dev/pts /proc /sys /run; do sudo mount -B $i $(pwd)/bookworm-chroot-wiki$i; done\nchroot bookworm-chroot-wiki\n# Criar usu\u00e1rio softex com senha softex\nuseradd --home-dir '/home/softex' --skel '/etc/skel' --create-home --shell '/bin/bash' softex\nchpasswd &lt;&lt;&lt; 'softex:softex'\n</code></pre>"},{"location":"ros2/general-instructions-ptbr/#desativando-as-montagens-vinculadas-bound-mounts_1","title":"Desativando as montagens vinculadas (bound mounts)","text":"<p>Quando sair do chroot, n\u00e3o se esque\u00e7a de desmontar os diret\u00f3rios que foram montados com v\u00ednculo no chroot.</p> <pre><code>for i in /dev/pts /proc /sys /run; do umount $(pwd)/bookworm-chroot-wiki$i; done\n</code></pre>"},{"location":"ros2/general-instructions-ptbr/#compilando_1","title":"Compilando","text":"<pre><code># Checar suporte a UTF-8\n# como root\nif command -v locale &gt; /dev/null; then\n    if grep --quiet 'UTF-8' &lt;&lt;&lt; \"$(locale)\"; then\n        echo \"UTF-8 locale found\"\n    else\n        echo \"No UTF-8 locales found! Installation may FAIL!\"\n    fi\nelse\n    echo \"Please install 'locales' package\"\nfi\n\n# Ferramentas para baixar c\u00f3digo\n# como root\napt install git colcon python3-rosdep2 vcstool wget\n\n# Criar um espa\u00e7o de trabalho e clonar todos os reposit\u00f3rios\n# como outro usu\u00e1rio\nmkdir -p ros2_humble/src\ncd /home/softex/ros2_humble\nwget https://raw.githubusercontent.com/ros2/ros2/humble/ros2.repos\n# Remover o que j\u00e1 foi empacotado no Debian\nsed -i '/\\(ament\\|eProsima\\|eclipse\\|ignition\\|osrf\\|tango\\|urdfdom\\|tinyxml_\\|loader\\|pluginlib\\|rcutils\\|rcpputils\\|test_interface\\|testing_tools\\|fixture\\|rosidl:\\)/,+3d' ros2.repos\nvcs import src &lt; ros2.repos\n\n# Instalar ainda mais depend\u00eancias\nrosdep update\nrosdep check --from-paths src --ignore-src -y --skip-keys \"fastcdr rti-connext-dds-6.0.1 urdfdom_headers\"\nprintf '#!/bin/bash\\n' &gt; ros2-humble-packages.sh\nprintf 'apt install --yes' &gt;&gt; ros2-humble-packages.sh\nperl -ne 'print \" $+{package}\" if /apt\\s(?&lt;package&gt;.+)/' &lt;&lt;&lt; \"$(rosdep check --from-paths src --ignore-src -y --skip-keys \"fastcdr rti-connext-dds-6.0.1 urdfdom_headers\" 2&gt;/dev/null)\" &gt;&gt; ros2-humble-packages.sh\nchmod +x ros2-humble-packages.sh\n\n# como root\ncd /home/softex/ros2_humble\n./ros2-humble-packages.sh\n\n# Construir o c\u00f3digo\n# Colcon precisa de dispositivos pty ou vai morrer antes de compilar qualquer coisa\n# Se estiver construindo em um ambiente chroot, precisar\u00e1 de montar com v\u00ednculo os dispositivos requeridos\n# como outro usu\u00e1rio\ncd /home/softex/ros2_humble\nrosdep fix-permissions\nrosdep update\nrosdep check --from-paths src --ignore-src -y --skip-keys \"fastcdr rti-connext-dds-6.0.1 urdfdom_headers\"\ncolcon build\n\n# Ler o script de ambiente\n# Substitua \".bash\" pelo seu shell caso n\u00e3o esteja usando-o\n# Valores poss\u00edveis s\u00e3o: setup.bash, setup.sh, setup.zsh\n. ros2_humble/install/local_setup.bash\n\n# Teste os exemplos\n. ros2_humble/install/local_setup.bash\nros2 run demo_nodes_cpp talker\n\n. ros2_humble/install/local_setup.bash\nros2 run demo_nodes_py listener\n</code></pre>"},{"location":"ros2/general-instructions/","title":"Manually compiling and installing ROS2 on Debian-based systems","text":"<ul> <li>English</li> </ul>"},{"location":"ros2/general-instructions/#compilando-e-instalando-manualmente-o-ros2-em-sistemas-baseados-em-debian","title":"Compilando e instalando manualmente o ROS2 em sistemas baseados em Debian","text":"<ul> <li>Portugu\u00eas</li> </ul>"},{"location":"ros2/installing-precompiled-packages-en/","title":"Installing precompiled ROS2 from ROS repositories","text":"<p>If you're using one of the currently supported operating systems, you will be able to install precompiled binary packages from ROS2 repositories.</p>"},{"location":"ros2/installing-precompiled-packages-en/#compatible-operating-systems","title":"Compatible operating systems","text":"<p>ROS2 currently packages the ROS ecosystem for the following combinations of operating systems and architectures:</p> <ul> <li>Ubuntu 22.04 LTS (Jammy)<ul> <li>amd64</li> <li>arm64</li> </ul> </li> </ul> <p>If you're on a unsupported operating system or architecture, it will be necessary to compile the ROS2 ecosystem.</p>"},{"location":"ros2/installing-precompiled-packages-en/#warning","title":"WARNING!","text":"<p>ROS2 precompiled packages are notorious for breaking systems when installed without upgrading the system 1 2! Although the installation scripts follow the recommended procedures, the risk remains!</p> <p>You MUST have the security repository enabled, as ROS2 packages are not tested on a standard Debian packaging environment and assume that this repository will be enabled and that the system is up to date. Please note that the security repository is different for <code>amd64</code> or <code>armhf</code>/<code>arm64</code>:</p> <ul> <li>Security repository for <code>amd64</code>: <code>deb http://security.ubuntu.com/ubuntu jammy-security main</code></li> <li>Security repository for <code>arm64</code> and <code>armhf</code>: <code>deb http://ports.ubuntu.com/ubuntu-ports jammy-security main</code></li> </ul> <p>The precompiled packages also have chronic problems with dependencies even when installed on the supported Ubuntu configuration 3 4. If the installation fails due to dependency problems, it is advised to compile ROS2 from source instead of trying to fight the unsatisfiable dependencies.</p>"},{"location":"ros2/installing-precompiled-packages-en/#instructions-for-supported-systems","title":"Instructions for supported systems","text":""},{"location":"ros2/installing-precompiled-packages-en/#bootstraping-a-chroot","title":"Bootstraping a chroot","text":"<p>This step is required only if you wish to test the installation of ROS2 on a ARM-based SBC. The script can be modified to test the installation on other Debian-based distributions.</p> <ol> <li>Run, with administrator priviledges,the script <code>bootstrap-chroot-32.sh</code> or <code>bootstrap-chroot-64.sh</code>, depending on the Operating System installed on your Single Board Computer. This step will be successfull if Git can be successfully installed after authorising its installation.</li> </ol>"},{"location":"ros2/installing-precompiled-packages-en/#installing-on-ubuntu-based-systems","title":"Installing on Ubuntu-based Systems","text":"<p>You must run one of the installation scripts. The version will depend on the architecture and the operating system on your machine.</p> <p>Due to limited support of ROS2, this repository only supports 64-bit based ARM or AMD64, although the scripts can be easily modified to support other architectures and operating systems as soon as they are available.</p> <ol> <li>If you are in a chroot, please run, with administrator priviledges, the scripts <code>ubuntu-install-ros2-64-base.sh</code> or <code>ubuntu-install-ros2-64-desktop.sh</code> depending on the ROS2 packages you wish to install. If you are in a regular installation, please run the scripts <code>ubuntu-install-ros2-humble-base.sh</code> or <code>ubuntu-install-ros2-humble-desktop.sh</code>.</li> <li>Authorise the administrative-level operations using your password.</li> </ol>"},{"location":"ros2/installing-precompiled-packages-ptbr/","title":"Instalando pacotes pr\u00e9-compilados do ROS2 a partir dos reposit\u00f3rios ROS","text":"<p>Se estiver usando um sistema operacional suportado, poder\u00e1 instalar os pacotes bin\u00e1rios pr\u00e9-compilados dos reposit\u00f3rios do ROS2.</p>"},{"location":"ros2/installing-precompiled-packages-ptbr/#sistemas-operacionais-compativeis","title":"Sistemas operacionais compat\u00edveis","text":"<p>O ROS2 empacota o ecossistema ROS para as seguintes combina\u00e7\u00f5es de sistemas operacionais e arquiteturas:</p> <ul> <li>Ubuntu 22.04 LTS (Jammy)<ul> <li>amd64</li> <li>arm64</li> </ul> </li> </ul> <p>Caso esteja em um sistema n\u00e3o suportado, ser\u00e1 necess\u00e1rio compilar o ecossistema ROS.</p>"},{"location":"ros2/installing-precompiled-packages-ptbr/#aviso","title":"AVISO!","text":"<p>Os pacotes pr\u00e9-compilados do ROS2 s\u00e3o not\u00f3rios por quebrar sistemas que n\u00e3o foram atualizados 1 2! Apesar dos scripts de instala\u00e7\u00e3o seguirem os procedimentos recomendados, o risco ainda permanece!</p> <p>Voc\u00ea DEVE habilitar o reposit\u00f3rio de seguran\u00e7a, pois os pacotes do ROS2 n\u00e3o s\u00e3o testados em um ambiente padr\u00e3o de empacotamento Debian e assumem que o esse reposit\u00f3rio estar\u00e1 habilitado e o sistema estar\u00e1 atualizado em rela\u00e7\u00e3o a ele. Fique atento ao fato de que o reposit\u00f3rio de seguran\u00e7a \u00e9 diferente para <code>amd64</code> ou <code>armhf</code>/<code>arm64</code>:</p> <ul> <li>Reposit\u00f3rio de seguran\u00e7a para <code>amd64</code>: <code>deb http://security.ubuntu.com/ubuntu jammy-security main</code></li> <li>Reposit\u00f3rio de seguran\u00e7a para <code>arm64</code> e <code>armhf</code>: <code>deb http://ports.ubuntu.com/ubuntu-ports jammy-security main</code></li> </ul> <p>Os pacotes pr\u00e9-compilados tamb\u00e9m possuem problemas cr\u00f4nicos com depend\u00eancias mesmo quando s\u00e3o instalados na configura\u00e7\u00e3o suportada do Ubuntu 3 4. Caso a instala\u00e7\u00e3o falhe devido a problemas de depend\u00eancia, aconselha-se compilar o ROS2 a partir do c\u00f3digo-fonte e n\u00e3o tentar lutar com as depend\u00eancias n\u00e3o satisfeitas.</p>"},{"location":"ros2/installing-precompiled-packages-ptbr/#instrucoes-para-sistemas-suportados","title":"Instru\u00e7\u00f5es para sistemas suportados","text":""},{"location":"ros2/installing-precompiled-packages-ptbr/#inicializando-um-chroot","title":"Inicializando um chroot","text":"<p>Este passo s\u00f3 \u00e9 necess\u00e1rio caso queira testar a instala\u00e7\u00e3o do ROS2 em um SBC ARM. O script pode ser modificado para testar a instala\u00e7\u00e3o em outras distribui\u00e7\u00f5es baseadas no Debian.</p> <ol> <li>Execute, com privil\u00e9gios de administrador, o script <code>bootstrap-chroot-32.sh</code> ou <code>bootstrap-chroot-64.sh</code>, dependendo do sistema operacional instalado em seu Single Board Computer. Este passo ter\u00e1 sido executado com sucesso caso o Git consiga ser instalado corretamente ap\u00f3s autorizar a sua instala\u00e7\u00e3o.</li> </ol>"},{"location":"ros2/installing-precompiled-packages-ptbr/#instalando-em-sistemas-baseados-em-ubuntu","title":"Instalando em sistemas baseados em Ubuntu","text":"<p>Dever\u00e1 executar um dos scripts de instala\u00e7\u00e3o. A vers\u00e3o depender\u00e1 da arquitetura e do sistema operacional instalado em sua m\u00e1quina.</p> <p>Devido ao suporte limitado do ROS2, o reposit\u00f3rio suporta apenas ARM de 64 bits ou AMD64. Os scripts podem ser facilmente modificados para suportarem outras arquiteturas t\u00e3o logo estiverem dispon\u00edveis.</p> <ol> <li>Se estiver em um chroot, favor executar os scripts <code>ubuntu-install-ros2-64-base.sh</code> ou <code>ubuntu-install-ros2-64-desktop.sh</code> com privil\u00e9gios administrativos dependendo dos pacotes ROS2 que quiser instalar. Se estiver em uma instala\u00e7\u00e3o padr\u00e3o, favor executar os scripts <code>ubuntu-install-ros2-humble-base.sh</code> ou <code>ubuntu-install-ros2-humble-desktop.sh</code>.</li> <li>Autorize as opera\u00e7\u00f5es de n\u00edvel administrativo com sua senha.</li> </ol>"},{"location":"ros2/installing-precompiled-packages/","title":"Installing precompiled ROS2 from ROS repositories","text":"<ul> <li>English</li> </ul>"},{"location":"ros2/installing-precompiled-packages/#instalando-pacotes-pre-compilados-do-ros2-a-partir-dos-repositorios-ros","title":"Instalando pacotes pr\u00e9-compilados do ROS2 a partir dos reposit\u00f3rios ROS","text":"<ul> <li>Portugu\u00eas</li> </ul>"},{"location":"sobre/equipe/","title":"Equipe","text":""},{"location":"sobre/sobre/","title":"Sobre o projeto","text":"<p>O Robo Connection \u00e9 um projeto desenvolvido no decorrer do ano de 2023, atrav\u00e9s da Resid\u00eancia em Tecnologia da Informa\u00e7\u00e3o e Comunica\u00e7\u00e3o (TIC) da BRISA, em parceria com a Softex, a Universidade de Bras\u00edlia (UnB) e o Minist\u00e9rio da Ci\u00eancia e Tecnologia (MCTI). A Resid\u00eancia em TIC da BRISA selecionou 40 alunos da UnB para realizarem projetos que atendessem demandas do mercado local de tecnologia.</p> <p>O presente projeto \u00e9 de autoria da equipe Robo Connection, uma das equipes envolvidas no projeto de Resid\u00eancia em TIC da BRISA.</p>"},{"location":"sobre/sobre/#missao","title":"Miss\u00e3o","text":"<p>Atrav\u00e9s da tecnologia, o Robo Connection visa impactar imensamente o processo de inicia\u00e7\u00e3o em projetos de rob\u00f3tica, em especial no que se refere \u00e0 equipe UnBeatables da UnB, que utiliza rob\u00f4s NAO (produzidos pela SoftBank Robotics).</p> <p>Os rob\u00f4s NAO possuem um acervo de softwares disponibilizados pelo fabricante. Al\u00e9m disso, outros programas, como o ROS, tamb\u00e9m s\u00e3o utilizados amplamente na rob\u00f3tica. Entretanto, muitos desses programas apresentam problemas, tais como:</p> <ul> <li>Compatibilidade com diferentes sistemas operacionais;</li> <li>Compatibilidade com sistemas operacionais sem suporte;</li> <li>Descontinuidade no suporte e atualiza\u00e7\u00f5es;</li> <li>Arquivos corrompidos;</li> <li>Instala\u00e7\u00e3o complicada e sens\u00edvel.</li> </ul> <p>Al\u00e9m disso, a documenta\u00e7\u00e3o dos rob\u00f4s NAO, disponibilizada pela Aldebaran Robotics, pode ser bastante complicada no que se refere \u00e0 programa\u00e7\u00e3o dos rob\u00f4s na linguagem C++.</p> <p>Portanto, a Robo Connection atua mitigando os problemas evidenciados acima, atrav\u00e9s das seguintes a\u00e7\u00f5es:</p> <ul> <li>Automatiza\u00e7\u00e3o da instala\u00e7\u00e3o dos programas atrav\u00e9s de scripts;</li> <li>Documenta\u00e7\u00e3o das instala\u00e7\u00f5es;</li> <li>Cria\u00e7\u00e3o de guias e tutoriais de download, instala\u00e7\u00e3o e uso de ferramentas;</li> <li>Guia de inicia\u00e7\u00e3o na programa\u00e7\u00e3o do NAO em C++.</li> </ul>"},{"location":"sobre/sobre/#a-experiencia","title":"A experi\u00eancia","text":"<p>Trabalhar no Robo Connection \u00e9, ao mesmo tempo, inspirador e desafiador. Os rob\u00f4s NAO s\u00e3o incr\u00edveis, e abrem um leque de possiblidades enorme no ensino e desenvolvimento da rob\u00f3tica ao redor do mundo. Por\u00e9m, como toda tecnologia caracterizada como \"estado da arte\", apresenta muitos problemas.</p> <p>Muitas barreiras foram derrubadas para chegarmos ao produto que temos hoje. Enfrentamos programas que apresentavam problemas desde sua instala\u00e7\u00e3o at\u00e9 seu uso e manuten\u00e7\u00e3o. Al\u00e9m disso, foi necess\u00e1rio que a equipe se reinventasse, uma vez que as especialidades dos integrantes, em sua totalidade, n\u00e3o se alinhavam perfeitamente \u00e0 demanda do projeto. Sendo assim, o projeto consiste em uma jornada de intenso esfor\u00e7o e aprendizado, trabalho em conjunto, supera\u00e7\u00e3o de desafios e problemas e, sobretudo, conquistas.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/","title":"Set up and run a VM for developing NAOv4-based solutions","text":""},{"location":"vms/ubuntu-14/how-to-use-en/#setup","title":"Setup","text":"<p>The scripts are flexible, but they still have requirements in order to be run.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#packages","title":"Packages","text":"<p>These scripts need the following packages to be installed on the host's system (assuming a Debian GNU/Linux based distribution, such as Ubuntu, Linux Mint):</p> Package Version qemu-system-x86 6.2.0 qemu-utils 6.2.0 qemu-system-gui 6.2.0 qemu-block-extra 6.2.0 ovmf 2022.02 libguestfs-tools 1.46.2 iproute2 5.15 nftables 1.0.2 <p>The scripts assume that KVM-based accelerated virtualisation is enabled on the host machine. This requires a compatible processor and it may require a configuration in the UEFI/BIOS (AMD-V, AMD SVM, Intel VT, Intel VT-x, Intel VMX).</p> <p>The package <code>cpu-checker</code> is able to verify if KVM is correctly enabled: one only needs to run the command <code>kvm-ok</code> as superuser.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#expected-directory-structure","title":"Expected directory structure","text":"<p>Even though these scripts can be modified easily, they expect the following directory structure in their current form:</p> <ul> <li><code>env-vars.sh</code>, a script to centralise the VM's configurations</li> <li>an image from Ubuntu's installation disk version 14.04 named as <code>ubuntu-14.04-desktop-amd64.iso</code> (this can be altered in the <code>IMAGE_LOCATION</code> variable at the <code>env-vars.sh</code> script)</li> </ul> <p>The GNU/Linux distribution for fully installing NAOv4's programming environment is Ubuntu 14.04 LTS. It is highly possible that one may be able to run it on the equivalent Debian release.</p> <p>If the user wishes to only develop programs using NAOv4's C++98 API, it may be possible to use a newer GNU/Linux distribution, provided that it has support for Python 2 and Pip 20.3.4.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#creating-the-vm-and-preparing-to-compile-naoqi-for-naov4","title":"Creating the VM and preparing to compile NAOqi for NAOv4","text":"<p>The user must run in their host machine the scripts inside this repository in the following order:</p> <ol> <li><code>reset-main-drive.sh</code></li> <li><code>first-boot.sh</code></li> </ol> <p>After installing Ubuntu 14.04 in their virtual machine, the following scripts must be executed in their host machine:</p> <ol> <li><code>update-sources.sh</code></li> <li><code>inject-home.sh</code></li> </ol> <p>Now, inside the virtual machine, also known as the guest machine, the user must run the <code>prepare-naoqi-requirements.sh</code> script to compile Python 2.7.11 and install Pip 20.3.4.</p> <p>Finally, the user will be able to install the NAOv4 development environment using the <code>install-naov4.sh</code> script. The newer Python will be used only to download Pip, as it crashes the Python SDK.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#starting-the-virtual-machine-up-for-the-first-time","title":"Starting the Virtual Machine up for the first time","text":"<p>The initial images are created by the <code>reset-main-drive.sh</code> and <code>first-boot.sh</code> scripts. The former creates a QCOW2 image that will perform as the virtual machine's or guest system's hard drive, and the latter will boot the VM with the Ubuntu 14 LTS installation disk.</p> <p>With the drives created, run the initialisation script and install a regular Ubuntu 14.04 LTS installation:</p> <ul> <li>Language and keyboard layout: Portugu\u00eas Brasileiro (or other UTF-8 locale)</li> <li>Erase disk and install Ubuntu</li> <li>Timezone: Sao Paulo (or your local timezone)</li> <li>User: softex (must be the one specified in <code>VM_USER</code> in <code>env-vars.sh</code>)</li> </ul>"},{"location":"vms/ubuntu-14/how-to-use-en/#warning","title":"WARNING","text":"<p>The scripts expect an unified root partition scheme. Do not split <code>/home</code> or other directories into other partitions unless you know how to modify the scripts that copy data into or from the virtual machine or guest system.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#running-the-vm","title":"Running the VM","text":"<p>Sometimes the Brazilian server takes too long to synchronise with the main server, leading to failed installations or upgrades. In order to avoid this problem, please run the following script to set the repository to the main archive:</p> <pre><code>./update-sources.sh\n</code></pre> <p>Don't forget to update (<code>apt-get update</code>) and upgrade (<code>apt-get dist-upgrade</code>) if there are any updates available.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#how-to-reclaim-unused-memory-from-the-virtual-machine","title":"How to reclaim unused memory from the Virtual Machine","text":"<p>If you are running the virtual machine on a memory constrained host, we recommend you to use the included <code>virtio-balloon</code> functionality. This will recover unused memory from the virtual machine (the guest) and return it to your computer (the host).</p> <p>A balloon driver is a special driver included on the kernels of some operating systems that helps the hypervisors, programs used to run virtual machines, to recover unused memory from their guests. This drivers offers two operations: a balloon inflation and a deflation.</p> <p>The inflation procedure is used to reclaim unused memory: it orders the driver to create memory pressure on the guest machine, triggering a page update. This decreases the available memory in the guest, but it enables the host to reclaim any unused pages.</p> <p>The deflation procedure increases the available memory on the guest up its configured physical memory limit. It is commonly used after an inflation procedure to allow the virtual machine to use its configured physical memory.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#how-to-use-the-qemus-balloon-driver","title":"How to use the QEMU's balloon driver","text":"<p>The QEMU's balloon driver is controlled in the QEMU monitor on the implementation offered by the scripts. The <code>balloon</code> command takes an argument that specifies the target logical size of the virtual machine:</p> <ul> <li>if the argument is less than the physical memory configured for the VM, the balloon will be inflated in the guest, and any unused pages will be reclaimed;</li> <li>if the argument is equal or greater than the guest's physical memory, the balloon will be deflated until it no longer restricts the virtual machine's physical memory.</li> </ul> <p>Please be aware that the <code>virtio-balloon</code> does not require the installation of any external driver on most GNU/Linux-based guests, as it is included in the kernel since 2008 (version 2.6.25).</p> <p>It is important to always have in mind that the balloon inflation operation should only be performed when the virtual machine is not under memory pressure. This means that you should only try to recover unused memory from the VM when it has a healthy amount of free memory to keep running without needing to swap.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#preparing-to-install-naoqi-for-naov4","title":"Preparing to install NAOqi for NAOv4","text":"<p>Ubuntu 14.04 has an old version of Python 2.7. It lacks support to download data from websites that enforce HTTPS, such as the modern Python packages index (<code>pip</code>). This requires a compilation of a newer Python version and the installation of the last compatible <code>pip</code> release. These steps can be automated by sending a script to the user's home on the VM:</p> <pre><code>./inject-home.sh\n</code></pre> <p>After the script is sent to the user's home, it must be executed in the VM. It will propmpt for administrative privileges before updating the repository and installing dependencies for compiling and installing Python 2 and Pip:</p> <pre><code>./prepare-naoqi-requirements.sh\n</code></pre>"},{"location":"vms/ubuntu-14/how-to-use-en/#installing-naov4-development-environment","title":"Installing NAOv4 development environment","text":"<p>After running the preparation script, the installation one must be run on a new terminal session. If you wish to remain in the same session, you must reload your <code>.bashrc</code> (<code>source .bashrc</code>) to enable the modifications made to redirect Python 2 to a newer version and to enable PIP2 and its binaries.</p> <pre><code>./install-naov4.sh\n</code></pre> <p>This script will also prompt for administrative rights, as it needs to install packages used by the C++ and Python2 SDKs.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#activating-choregraphe","title":"Activating Choregraphe","text":"<p>Choregraphe will prompt for its activation key on its first initialisation. This key is available in the installation script, and it will also be printed to the terminal after the script is executed.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#configuring-the-host-usb","title":"Configuring the host USB","text":"<p>The <code>env-vars.sh</code> script has four variables to control how the virtual machine will connect to the host USB device:</p> <ul> <li><code>USB_HOST_BUS</code>: the bus' ID, including leading zeros</li> <li><code>USB_HOST_ADDRESS</code>: the device's ID in the aforementioned bus, including leading zeros</li> <li><code>USB_VENDOR_ID</code>: the device's vendor ID in hexadecimal notation, that is, the device's vendor ID preceded by <code>0x</code></li> <li><code>USB_PRODUCT_ID</code>: the device's product ID in hexadecimal notation, that is, the device's product ID preceded by <code>0x</code></li> </ul> <p>The variables match the output of the <code>lsusb</code> command:</p> <pre><code>Bus $USB_HOST_BUS Device $USB_HOST_ADDRESS: ID $USB_VENDOR_ID:$USB_PRODUCT_ID MyUSB Device Thing\n</code></pre> <p>There are two scripts that will connect the host's device to the virtual machine:</p> <ul> <li><code>run-usb-productid.sh</code>: connects only the device with the matching vendor and product ID as long as it is connected to the specified port. It requires specifying all the four variables;</li> <li><code>run-usb-hostid.sh</code>: connects anything currenctly connected to the specified port. It requires specifying only the bus and the device.</li> </ul> <p>The virtualiser uses the <code>/dev/bus/usb</code> files to connect the VM to the host device. This requires superuser permissions on most machines. In order to connect a host USB device to the VM, the user must provide the script with the necessary privileges (run it as root, prefix with <code>sudo</code>) or change the permissions of the USB interface (changing its group with <code>chgrp</code> to a group that it user takes part in, or changing its owner with <code>chown</code>).</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#example","title":"Example","text":"<p>Consider the following <code>lsusb</code> output:</p> <pre><code>Bus 001 Device 001: ID 0001:0001 USB Thing 1\nBus 001 Device 002: ID 0001:0002 USB Thing 2\nBus 001 Device 003: ID 0001:0001 USB Thing 1\nBus 002 Device 001: ID 0002:0001 USB Device 1\nBus 002 Device 002: ID 0002:0002 USB Device 2\nBus 002 Device 003: ID 0002:0001 USB Device 1\n</code></pre> <p>If one wishes to connect the <code>USB Thing 1</code> connected at the <code>Bus 001</code> as the device numbered <code>003</code>, they should configure the variables at <code>env-vars.sh</code> as:</p> <pre><code>USB_HOST_BUS=\"001\"\nUSB_HOST_ADDRESS=\"003\"\nUSB_VENDOR_ID=\"0x0001\"\nUSB_PRODUCT_ID=\"0x0001\"\n</code></pre> <p>Before running the desired script, the permissions must be set for the USB file (<code>chown the-user /dev/bus/usb/001/003</code>) or the script must be run with elevated privileges (<code>sudo</code> or run as root).</p> <p>Please be aware that in order to connect only the required device to the VM, one must run the VM using <code>run-usb-productid.sh</code>. Choosing the <code>run-usb-productid.sh</code> would connect all the devices connected to the <code>Bus 001</code>, the two <code>USB Thing 1</code> and the <code>USB Thing 2</code>.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#nao-flasher-permissions","title":"NAO Flasher permissions","text":"<p>NAO Flasher requires administrative permissions (<code>sudo</code> or execution as the <code>root</code> user) to write data. If <code>sudo</code> can't find the program's path, you may find it with <code>command -v flasher</code>.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#compiling-c-code","title":"Compiling C++ code","text":"<p>The qibuild framework requires that all projects must be based inside a worktree. The configuration script creates a worktree inside the <code>NAO4/worktree</code> directory. It is configured with the C++ SDK as the default toolchain, and the CTC is also available if the user wishes to set up their projects as so.</p> <p>The worktree path is stored in the user's <code>.bashrc</code> in the <code>NAO_QIBUILD_WORKSPACE</code> variable.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#qibuild-configuration","title":"Qibuild configuration","text":"<p>The script sets up the configurations' names in the user's <code>.bashrc</code>. The following environment variables hold data important for setting up qibuild-based projects:</p> <ul> <li><code>NAOQI_CPP_QIBUILD_TOOLCHAIN</code>: the name of the toolchain used when it was added to the worktree.</li> <li><code>NAOQI_CPP_QIBUILD_CONFIG</code>: the name of the configuration generated after the SDK was added to the worktree. It is the default toolchain configuration.</li> <li><code>NAOQI_QIBUILD_CTC</code>: the name of the cross toolchain in the worktree.</li> <li><code>NAOQI_QIBUILD_CTC_CONFIG</code>: the name of the configuration in the worktree. It can be used to replace the C++ SDK as the project's toolchain in order to create a binary that can be transfered to the robot.</li> </ul>"},{"location":"vms/ubuntu-14/how-to-use-en/#basic-project-setup","title":"Basic project setup","text":"<p>The following steps will create and build a C++ SDK-based project on the configured worktree:</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure\nqibuild make\n</code></pre> <p>The C++ SDK is configured as the default toolchain. If you wish to set up a project with an explicit configuration and build setup, you may run:</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure -c \"${NAOQI_CPP_QIBUILD_CONFIG}\" my-project\nqibuild make -c \"${NAOQI_CPP_QIBUILD_CONFIG}\" my-project\n</code></pre> <p>Compiling a project that will be run on the robot requires an explicit configuration to replace the default toolchain by the cross-compilation one (NAO CTC):</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure -c \"${NAOQI_QIBUILD_CTC_CONFIG}\" \nqibuild make -c \"${NAOQI_QIBUILD_CTC_CONFIG}\" \n</code></pre>"},{"location":"vms/ubuntu-14/how-to-use-en/#connecting-to-the-simulated-robot","title":"Connecting to the simulated robot","text":"<p>The simulated robot is an executable located in the C++ toolchain directory named <code>naoqi</code>. Provided that the tools were installed with the aforementioned scripts in their default configuration, it will be located at <code>/home/softex/NAO4/SDKs/cpp/naoqi-sdk-2.1.4.13-linux64/naoqi</code>.</p> <p>The simulated robot must always be initialised before running Choregraphe or your desired module. It will behave similarly to a physical robot, except by its lack of cameras, and it will by default initialise its broker at localhost, also known as IPv4 127.0.0.1, at the port 9559.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#simulating-in-choregraphe","title":"Simulating in Choregraphe","text":"<p>If you wish to simulate your C++ module in Choregraphe, first you should start the simulated <code>naoqi</code>. After doing it, then you must open Choregraphe, and connect it to the broker available at 127.0.0.1 port 9559.</p> <p>After these steps you should see a 3D simulation of a NAO robot in the Robot View panel. At this stage you are ready to connect to the simulated robot and check how it behaves in the simplified simulation offered by Choregraphe.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#connecting-to-the-robot","title":"Connecting to the robot","text":"<p>There are three scripts that are used when connecting the Virtual Machine to your NAO:</p> <ol> <li><code>enable-nat-bridge-network.sh</code>: this script must be run with elevated privileges to set a bridge with a bound DHCP server and a NAT masquerade up</li> <li><code>run-nat-bridge.sh</code>: this script executes the VM with connectivity to the previously configured bridge. This is achieved by a <code>tap</code> device that QEMU will automatically add to the bridge using <code>/usr/lib/qemu/qemu-bridge-helper</code> and <code>/etc/qemu/bridge.conf</code>. It may be executed by a common user.</li> <li><code>disable-nat-bridge-network.sh</code>: this script must be run with elevated privileges to undo all the modifications made by the NAT enabler script.</li> </ol>"},{"location":"vms/ubuntu-14/how-to-use-en/#warning-to-docker-users","title":"Warning to Docker users","text":"<p>Docker overrides all user firewall configurations. The scripts currently require a standard firewall configuration, so it will be necessary to remove all tables and rules created by Docker. It is recommended to stop Docker with <code>systemctl stop docker.service docker.socket</code> to avoid a surprise firewall reconfiguration event.</p> <p>You should be able to reset nftables to its standard configuration using the command: <code>nft flush ruleset</code>. This will break the network for the containers until the machine or the Docker service unit are restarted.</p>"},{"location":"vms/ubuntu-14/how-to-use-en/#how-to-manually-add-files-to-the-virtual-machine","title":"How to manually add files to the Virtual Machine","text":"<p>You may want to add files from the host system, your current machine, to the guest one, stored in the virtual machines. An usual way to do it is through SSH, but it requires configuring an SSH server in the guest and a client in the host.</p> <p>A quicker way is to add the files directly to the virtual machine images. This approach requires that the VMs must not be in execution, unlike the SSH-based one. It is most convenient to use <code>guestfish</code>, a system shell that specialises in manipulating virtual machine images, to manually add files to the VMs.</p> <p>You may create a script based on <code>inject-home.sh</code>, or use <code>guestfish</code> on its interactive mode, which works similarly to the usual system shell. Even though it requires more typing, the latter approach is more user-friendly and will be explored in this tutorial.</p> <p>Firstly, you must know the path to the files that you wish to add to your VM and their desired location in the virtual machine. These will be parameters that will be used in <code>guestfish</code>'s <code>copy-in</code> command, responsible for copying files into the VM.</p> <p>Then you must mount the virtual machine's partition that holds the output path. This is the more cumbersome stage, as it requires knowing which partitions are included in the virtual machine's image file. If you followed the previous instructions and installed the VM using the recommended settings, you will be able to use the following commands after executing <code>guestfish</code> on your terminal with the working directory pointing where the image is located:</p> <pre><code>&lt;!. ./env-vars.sh &gt; /dev/null; echo \"add '${DISK_LOCATION}'\"\nrun\nmount '/dev/sda1' '/'\n</code></pre> <p>With the main partition mounted, you may use the <code>ls</code> command to list files and directories. Copying files into the VM is done though the <code>copy-in</code> command:</p> <pre><code># copying a file or directory from the current host directory\ncopy-in my-file-or-directory /home/softex\n# copying a file or directory from an absolute path in the host\ncopy-in /absolute/path/in/the/host/something /desired/path/in/the/vm\n</code></pre> <p>The scripts use a more complicated syntax to automatically obtain the user that has been configured in the <code>env-vars.sh</code> file:</p> <pre><code>&lt;!. ./env-vars.sh &gt; /dev/null; echo \"copy-in 'my-file' '/home/${VM_USER}/abc'\"\n</code></pre> <p>After copying all the desired files, do not forget to unmount all the partitions and close <code>guestfish</code> before running the VM:</p> <pre><code>umount-all\nexit\n</code></pre>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/","title":"Configurando e executando uma m\u00e1quina virtual para desenvolver para o NAO4","text":""},{"location":"vms/ubuntu-14/how-to-use-ptbr/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Os scripts s\u00e3o flex\u00edveis, mas possuem requisitos para serem executados.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#pacotes","title":"Pacotes","text":"<p>Considerando uma distyribui\u00e7\u00e3o baseada no Debian GNU/Linux, como o Ubuntu ou o Linux Mint, os scripts precisam que os seguintes pacotes estejam instalados:</p> Pacote Vers\u00e3o qemu-system-x86 6.2.0 qemu-utils 6.2.0 qemu-system-gui 6.2.0 qemu-block-extra 6.2.0 ovmf 2022.02 libguestfs-tools 1.46.2 iproute2 5.15 nftables 1.0.2 <p>Os pacotes assumem que a virtualiza\u00e7\u00e3o por KVM est\u00e1 habilitada na m\u00e1quina anfitri\u00e3, aquela que executar\u00e1 as m\u00e1quinas virtuais, tamb\u00e9m conhecidas como m\u00e1quinas hospedadas ou virtual machines (VMs). Essa tecnologia requer um processador compat\u00edvel e uma habilita\u00e7\u00e3o na UEFI/BIOS (AMD-V, AMD SVM, Intel VT, Intel VT-x, Intel VMX).</p> <p>O pacote <code>cpu-checker</code> consegue verificar se o KVM est\u00e1 funcionando atrav\u00e9s do comando <code>kvm-ok</code>, que necessita de permiss\u00f5es de superusu\u00e1rio.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#estrutura-de-diretorios-esperada","title":"Estrutura de diret\u00f3rios esperada","text":"<p>Apesar da modifica\u00e7\u00e3o f\u00e1cil, os scripts esperam uma estrutura de diret\u00f3rio espec\u00edfica:</p> <ul> <li><code>env-vars.sh</code>, um script que centraliza as configura\u00e7\u00f5es da VM</li> <li>uma imagem do disco de instala\u00e7\u00e3o do Ubuntu vers\u00e3o 14.04 nomeada como <code>ubuntu-14.04-desktop-amd64.iso</code> (isto pode ser alterado na vari\u00e1vel <code>IMAGE_LOCATION</code> do script <code>env-vars.sh</code>)</li> </ul> <p>A distribui\u00e7\u00e3o GNU/Linux usada para instalar o ambiente completo do NAOv4 \u00e9 o Ubuntu 14.04 LTS. \u00c9 muito prov\u00e1vel que o mesmo possa ser feito na vers\u00e3o equivalente do Debian.</p> <p>Caso o usu\u00e1rio deseje desenvolver programas apenas na API C++98 do NAOv4, pode ser poss\u00edvel usar uma distribui\u00e7\u00e3o GNU/Linux mais atualizada, contanto que tenha suporte para Python 2 e Pip 20.3.4.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#criando-a-vm-e-preparando-para-compilar-o-naoqi-do-naov4","title":"Criando a VM e preparando para compilar o NAOqi do NAOv4","text":"<p>O usu\u00e1rio deve executar os seguintes scripts em sua m\u00e1quina anfitri\u00e3o na ordem em que aparecem abaixo:</p> <ol> <li><code>reset-main-drive.sh</code></li> <li><code>first-boot.sh</code></li> </ol> <p>Depois de instalar o Ubuntu 14.04 na m\u00e1quina virtual, ainda \u00e9 necess\u00e1rio que os seguintes scripts sejam executados na m\u00e1quina anfitri\u00e3:</p> <ol> <li><code>update-sources.sh</code></li> <li><code>inject-home.sh</code></li> </ol> <p>Agora, dentro da m\u00e1quina virtual, tamb\u00e9m conhecida como m\u00e1quina hospedada, o usu\u00e1rio deve executar o script <code>prepare-naoqi-requirements.sh</code> para compilar o Python 2.7.11 e instalar o Pip 20.3.4.</p> <p>Por fim, o usu\u00e1rio poder\u00e1 instalar o ambiente de desenvolvimento do NAOv4 executando o script <code>install-naov4.sh</code>. A vers\u00e3o mais nova do Python \u00e9 usada apenas para baixar o Pip, pois ela \u00e9 incompat\u00edvel com o SDK Python do rob\u00f4.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#inicializando-a-maquina-virtual-pela-primeira-vez","title":"Inicializando a M\u00e1quina Virtual pela Primeira vez","text":"<p>A imagem \u00e9 inicializada com os scripts <code>reset-main-drive.sh</code> e <code>first-boot.sh</code>. O primeiro cria uma imagem QCOW2, que funciona como o disco r\u00edgido da m\u00e1quina virtual ou sistema anfitri\u00e3o, e o segundo inicializa a m\u00e1quina virtual com o disco de instala\u00e7\u00e3o do Ubuntu 14.</p> <p>Com o disco criado, execute o script de inicializa\u00e7\u00e3o e instale o Ubuntu 14 com as configura\u00e7\u00f5es usuais:</p> <ul> <li>Linguagem e leiaute do teclado: Portugu\u00eas Brasileiro (ou putro locale UTF-8)</li> <li>Apagar o disco e instalar o Ubuntu</li> <li>Fuso hor\u00e1rio: Sao Paulo (ou o seu fuso hor\u00e1rio local)</li> <li>Usu\u00e1rio: <code>softex</code> (deve ser o mesmo especificado na <code>VM_USER</code> do <code>env-vars.sh</code>)</li> </ul>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#aviso","title":"AVISO","text":"<p>Os scripts esperam um esquema de parti\u00e7\u00e3o com o root unificado. N\u00e3o separe o <code>/home</code> ou qualquer outro diret\u00f3rio em outras parti\u00e7\u00f5es, a n\u00e3o ser que saiba como modificar os scripts que copiam dados para dentro ou a partir da m\u00e1quina virtual (sistema anfitri\u00e3o).</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#executando-a-vm","title":"Executando a VM","text":"<p>De vez em quando, o servidor brasileiro demora demais para sincronizar com o principal, causando falhas na instala\u00e7\u00e3o ou atualiza\u00e7\u00e3o. Para evitar tal problema, por favor execute o seguinte script, que configurar\u00e1 o reposit\u00f3rio do sistema para o arquivo principal do Ubuntu:</p> <pre><code>./update-sources.sh\n</code></pre> <p>N\u00e3o se esque\u00e7a de atualizar a lista de pacotes (<code>apt-get update</code>) e atualiz\u00e1-los (<code>apt-get dist-upgrade</code>) sempre que houver atualiza\u00e7\u00f5es dispon\u00edveis.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#como-recuperar-memoria-nao-usada-da-maquina-virtual","title":"Como recuperar mem\u00f3ria n\u00e3o usada da m\u00e1quina virtual","text":"<p>Se estiver executando a m\u00e1quina virtual em um anfitri\u00e3o com limita\u00e7\u00f5es de mem\u00f3ria, recomenda-se qie use a funcionalidade <code>virtio-balloon</code>, j\u00e1 inclu\u00edda nos scripts. Ela recuperar\u00e1 a mem\u00f3ria sem uso da m\u00e1quina virtual (convidado ou hospedado) e devolv\u00ea-la-\u00e1 para o computador (anfitri\u00e3o).</p> <p>Um balloon driver \u00e9 um driver especial inclu\u00eddo nos kernels de alguns sistemas operacionais que ajuda os hypervisors, programas que executam as m\u00e1quinas virtuais, a recuperar mem\u00f3ria sem uso dos sistemas convidados. Estes drivers implementam duas opera\u00e7\u00f5es: o enchimento e o esvaziamento do bal\u00e3o.</p> <p>A opera\u00e7\u00e3o de enchimento \u00e9 usada para recuperar a mem\u00f3ria sem uso: ela faz com que o driver crie press\u00e3o na mem\u00f3ria na m\u00e1quina hospedada, causando atualiza\u00e7\u00f5es nas p\u00e1ginas. Essa opera\u00e7\u00e3o diminui a mem\u00f3ria dispon\u00edvel no convidado, mas possibilita que o anfitri\u00e3o recupere as p\u00e1ginas que est\u00e3o sem uso.</p> <p>A opera\u00e7\u00e3o de esvaziamento aumenta a mem\u00f3ria dispon\u00edvel no hospedado at\u00e9 o seu limite de mem\u00f3ria f\u00edsica. Ela normalmente \u00e9 feita ap\u00f3s uma opera\u00e7\u00e3o de esvaziamento de modo a permitir que a m\u00e1quina virtual possa utilizar a sua mem\u00f3ria f\u00edsica configurada.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#como-usar-o-driver-balloon-do-qemu","title":"Como usar o driver balloon do QEMU","text":"<p>O driver bal\u00e3o do QEMU \u00e9 controlado pelo monitor QEMU na implementa\u00e7\u00e3o fornecida pelos scripts. O comando <code>balloon</code> possui um argumento que especifica o alvo para o tamanho l\u00f3gico da m\u00e1quina virtual:</p> <ul> <li>se o argumento for menor que o tamanho da mem\u00f3ria f\u00edsica configurado para a VM, o bal\u00e3p ser\u00e1 \"inflado\" na m\u00e1quina convidada, e as p\u00e1ginas n\u00e3o usadas ser\u00e3o recuperadas;</li> <li>se o argumento for igual ou maior que o tamanho da mem\u00f3ria f\u00edsica configurado para a VM, o bal\u00e3o ser\u00e1 \"esvaziado\" at\u00e9 que n\u00e3o mais limite o uso da mem\u00f3ria na m\u00e1quina virtual.</li> </ul> <p>\u00c9 importante lembrar que o <code>virtio-balloon</code> n\u00e3o requer a instala\u00e7\u00e3o de qualquer driver externo na maioria dos convidados baseados em GNU/Linux, j\u00e1 que ele est\u00e1 inclu\u00eddo no kernel desde 2008 (vers\u00e3o 2.6.25).</p> <p>\u00c9 importante lembnrar que a opera\u00e7\u00e3o de enchimento do bal\u00e3o s\u00f3 deve ser realizada quando a m\u00e1quina virtual n\u00e3o est\u00e1 sob press\u00e3o de mem\u00f3ria. Isso significa que s\u00f3 se deve tentar recuperar mem\u00f3ria sem uso da m\u00e1quina virtual enquanto ela possuir uma quantidade suficiente de mem\u00f3ria livre para continuar executando sem a necessidade de entrar e, swap.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#preparando-para-instalar-o-naoqi-para-o-naov4","title":"Preparando para instalar o NAOqi para o NAOv4","text":"<p>O Ubuntu 14.04 tem uma vers\u00e3o antiga do Python 2.7. Ela n\u00e3o consegue mais baixar dados de sites que exigem conex\u00f5es HTTPS, como o \u00edndice de pacotes moderno do Python (<code>pip</code>). Isso requer que se compile uma vers\u00e3o mais nova do Python e que se compile a \u00faltima vers\u00e3o compat\u00edvel do <code>pip</code>. Tais passos podem ser automatizados com o envio de um script para o diret\u00f3rio <code>home</code> do usu\u00e1rio na VM:</p> <pre><code>./inject-home.sh\n</code></pre> <p>Depois do script ser enviado para o <code>home</code>, ele deve ser executado na VM. Ele ir\u00e1 pedir por privil\u00e9gios administrativos antes de atualizar o reposit\u00f3rio e instalar as depend\u00eancias e compilar e instalar o Python 2 e o Pip:</p> <pre><code>./prepare-naoqi-requirements.sh\n</code></pre>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#instalando-o-ambiente-de-desenvolvimento-do-naov4","title":"Instalando o ambiente de desenvolvimento do NAOv4","text":"<p>Depois de executar o script de prepara\u00e7\u00e3o, o instalador deve ser executado em uma nova sess\u00e3o de terminal. Caso deseje permanecer na mesma sess\u00e3o, dever\u00e1 recarregar o <code>.bashrc</code> (<code>source .bashrc</code>) para habilitar as modifica\u00e7\u00f5es feitas para redirecionar o Python 2 para uma nova vers\u00e3o e habilitar o PIP 2 e seus bin\u00e1rios.</p> <pre><code>./install-naov4.sh\n</code></pre> <p>O script de instala\u00e7\u00e3o tamb\u00e9m requer direitos administrativos, pois precisa de instalar pacotes usados pelos SDKs C++ e Python 2.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#ativando-o-choregraphe","title":"Ativando o Choregraphe","text":"<p>O Choregraphe vai pedir por uma chave de ativa\u00e7\u00e3o na sua primeira inicializa\u00e7\u00e3o. Essa chave est\u00e1 dispon\u00edvel no script de instala\u00e7\u00e3o, e tamb\u00e9m ser\u00e1 impressa no terminal depois da execu\u00e7\u00e3o do script.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#configurando-o-usb-do-anfitriao","title":"Configurando o USB do anfitri\u00e3o","text":"<p>O script <code>env-vars.sh</code> tem quatro vari\u00e1veis que controlam como a m\u00e1quina virtual vai se conectar com o dispositivo USB conectado no anfitri\u00e3o:</p> <ul> <li><code>USB_HOST_BUS</code>: o identificador do barramento, incluindo os zeros \u00e0 esquerda</li> <li><code>USB_HOST_ADDRESS</code>: o identificador do dispositivo no barramento mencionado anteriormente, incluindo os zeros \u00e0 esquerda</li> <li><code>USB_VENDOR_ID</code>: o identificador do fabricante do dispositivo em nota\u00e7\u00e3o hexadecimal, isto \u00e9, o identificador do fabricante precedido por <code>0x</code></li> <li><code>USB_PRODUCT_ID</code>: o identificador do produto em nota\u00e7\u00e3o hexadecimal, isto \u00e9, o identificador do produto precedido por <code>0x</code></li> </ul> <p>As vari\u00e1veis relacionam-se com a sa\u00edda do comando <code>lsusb</code>:</p> <pre><code>Bus $USB_HOST_BUS Device $USB_HOST_ADDRESS: ID $USB_VENDOR_ID:$USB_PRODUCT_ID MyUSB Device Thing\n</code></pre> <p>H\u00e1 dois scripts que conectar\u00e3o o dispositivo no anfitri\u00e3o na m\u00e1quina virtual:</p> <ul> <li><code>run-usb-productid.sh</code>: conecta apenas o dispositivo com os mesmos identificadores do fabricante e do produto, contanto que ele esteja conectado \u00e0 porta especificada. Requer a especifica\u00e7\u00e3o de todas as quatro vari\u00e1veis;</li> <li><code>run-usb-hostid.sh</code>: conecta qualquer dispositivo presente na porta especificada. Requer a especifica\u00e7\u00e3o somente do barramento e do dispositivo.</li> </ul> <p>O virtualizador usa os arquivos presentes em <code>/dev/bus/usb</code> para conectar a VM ao dispositivo do anfitri\u00e3o. Isso requer permiss\u00f5es de superusu\u00e1rio na maioria das m\u00e1quinas. Para conectar um dispositivo USB do anfitri\u00e3o \u00e0 VM, o usu\u00e1rio deve prover o script com os privil\u00e9gios suficientes, executando-o como <code>root</code> ou com o comando <code>sudo</code>; ou modificar as permiss\u00f5es da interface USB, modificando o seu grupo para um que o usu\u00e1rio fa\u00e7a parte com <code>chgrp</code>, ou modificando o propriet\u00e1rio do arquivo com <code>chown</code>.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#exemplo","title":"Exemplo","text":"<p>Considere a seguinte sa\u00edda do <code>lsusb</code>:</p> <pre><code>Bus 001 Device 001: ID 0001:0001 USB Thing 1\nBus 001 Device 002: ID 0001:0002 USB Thing 2\nBus 001 Device 003: ID 0001:0001 USB Thing 1\nBus 002 Device 001: ID 0002:0001 USB Device 1\nBus 002 Device 002: ID 0002:0002 USB Device 2\nBus 002 Device 003: ID 0002:0001 USB Device 1\n</code></pre> <p>Se algu\u00e9m deseja conectar o <code>USB Thing 1</code>, conectado no barramento <code>Bus 001</code> como o dispositivo de n\u00famero <code>003</code>, \u00e9 necess\u00e1rio configurar as vari\u00e1veis em <code>env-vars.sh</code> como:</p> <pre><code>USB_HOST_BUS=\"001\"\nUSB_HOST_ADDRESS=\"003\"\nUSB_VENDOR_ID=\"0x0001\"\nUSB_PRODUCT_ID=\"0x0001\"\n</code></pre> <p>Antes de executar o script desejado, as permiss\u00f5es devem ser configuradas para o arquivo USB (<code>chown the-user /dev/bus/usb/001/003</code>), ou ent\u00e3o o script deve ser executado com privil\u00e9gios elevados (<code>sudo</code> ou como <code>root</code>).</p> <p>Lembre-se de que, para conectar somente o dispositivo especificado, a m\u00e1quina virtual deve ser executada a partir do script <code>run-usb-productid.sh</code>. Caso tivesse escolhido <code>run-usb-productid.sh</code>, todos os dispositivos do barramento <code>Bus 001</code> seriam conectados, ambos <code>USB Thing 1</code> e <code>USB Thing 2</code>.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#permissoes-do-nao-flasher","title":"Permiss\u00f5es do NAO Flasher","text":"<p>O NAO Flasher requer permiss\u00f5es administrativas na m\u00e1quina virtual (<code>sudo</code> ou execu\u00e7\u00e3o como <code>root</code>). Caso o <code>sudo</code> n\u00e3o consiga encontrar o caminho do comando, este pode ser encontrado usando-se <code>command -v flasher</code>.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#compilando-codigo-em-c","title":"Compilando c\u00f3digo em C++","text":"<p>O arcabou\u00e7o Qibuild requer que todos os projetos estejam dentro de uma \u00e1rvore de trabalho (worktree). O script de configura\u00e7\u00e3o cria uma \u00e1rvore de trabalho no diret\u00f3rio <code>NAO4/worktree</code>. Ela j\u00e1 \u00e9 configurada com o SDK C++ como ferramental padr\u00e3o, e o CTC tamb\u00e9m est\u00e1 dispon\u00edvel caso o usu\u00e1rio deseje configurar os seus projetos para us\u00e1-lo.</p> <p>O caminho da worktree \u00e9 armazenado no <code>.bashrc</code> do usu\u00e1rio, na vari\u00e1vel <code>NAO_QIBUILD_WORKSPACE</code>.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#configuracao-do-qibuild","title":"Configura\u00e7\u00e3o do Qibuild","text":"<p>O script configura os nomes das configura\u00e7\u00f5es no <code>.bashrc</code> do usu\u00e1rio. As seguintes vari\u00e1veis de ambiente armazenam dados importantes para a configura\u00e7\u00e3o de projetos baseados no Qibuild:</p> <ul> <li><code>NAOQI_CPP_QIBUILD_TOOLCHAIN</code>: o nome do ferramental usado quando ele foi adicionado \u00e0 \u00e1rvore de trabalho</li> <li><code>NAOQI_CPP_QIBUILD_CONFIG</code>: o nome da configura\u00e7\u00e3o gerado ap\u00f3s a adi\u00e7\u00e3o do SDK \u00e0 worktree. \u00c9 a configura\u00e7\u00e3o de ferramental padr\u00e3o.</li> <li><code>NAOQI_QIBUILD_CTC</code>: o nome do ferramental de compila\u00e7\u00e3o cruzada na \u00e1rvore de trabalho.</li> <li><code>NAOQI_QIBUILD_CTC_CONFIG</code>: o nome da configura\u00e7\u00e3o na worktree. Pode ser usada para substituir o C++ SDK como ferramental do projeto, possibilitando a cria\u00e7\u00e3o de bin\u00e1rios que podem ser executados diretamente no rob\u00f4.</li> </ul>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#configuracao-basica-de-um-projeto","title":"Configura\u00e7\u00e3o b\u00e1sica de um projeto","text":"<p>Os seguintes passos criar\u00e3o e construir\u00e3o um projeto baseado no C++ SDK na worktree configurada:</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure\nqibuild make\n</code></pre> <p>O SDK C++ \u00e9 configurado como o ferramental padr\u00e3o. Caso deseje configurar um projeto com uma configura\u00e7\u00e3o expl\u00edcita, execute:</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure -c \"${NAOQI_CPP_QIBUILD_CONFIG}\" my-project\nqibuild make -c \"${NAOQI_CPP_QIBUILD_CONFIG}\" my-project\n</code></pre> <p>Compilar um projeto que ser\u00e1 executado no rob\u00f4 requer uma configura\u00e7\u00e3o expl\u00edcita para substituir o ferramental padr\u00e3o pelo capaz de fazer compila\u00e7\u00e3o cruzada (NAO CTC):</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure -c \"${NAOQI_QIBUILD_CTC_CONFIG}\"\nqibuild make -c \"${NAOQI_QIBUILD_CTC_CONFIG}\"\n</code></pre>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#conectando-ao-robo-simulado","title":"Conectando ao rob\u00f4 simulado","text":"<p>O rob\u00f4 simulado \u00e9 um execut\u00e1vel chamado <code>naoqi</code>, e est\u00e1 localizado no diret\u00f3rio do ferramental C++. Considerando que as ferramentas foram instaladas usando os scripts supracitados nas suas configura\u00e7\u00f5es padr\u00f5es, ele estar\u00e1 localizado em: <code>/home/softex/NAO4/SDKs/cpp/naoqi-sdk-2.1.4.13-linux64/naoqi</code>.</p> <p>O rob\u00f4 simulado sempre deve ser inicializado antes de se executar o Choregraphe ou o seu m\u00f3dulo desejado. Ele comportar-se-\u00e1 de maneira similar ao rob\u00f4 f\u00edsico, exceto pela sua aus\u00eancia de c\u00e2meras, e iniciar\u00e1 por padr\u00e3o seu broker no localhost (IPv4 127.0.0.1) na porta 9559.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#simulando-no-choregraphe","title":"Simulando no Choregraphe","text":"<p>Caso queira simular seu m\u00f3dulo C++ no Choregraphe, primeiro deve iniciar o <code>naoqi</code> simulado. Depois, \u00e9 necess\u00e1rio abrir o Choregraphe e conect\u00e1-lo ao broker dispon\u00edvel em 127.0.0.1 na porta 9559.</p> <p>Depois desses passos, dever\u00e1 ser poss\u00edvel visualizar uma simula\u00e7\u00e3o 3D do rob\u00f4 NAO no painel de visualiza\u00e7\u00e3o do rob\u00f4. Nesta etapa estar\u00e1 pronto para conectar o m\u00f3dulo ao rob\u00f4 simulado e verificar seu comportamento na simula\u00e7\u00e3o simplificada oferecida pelo Choregraphe.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#conectando-ao-robo","title":"Conectando ao rob\u00f4","text":"<p>H\u00e1 tr\u00eas scripts que s\u00e3o usados para conectar a m\u00e1quina virtual ao seu NAO:</p> <ol> <li><code>enable-nat-bridge-network.sh</code>: este script deve ser executado com privil\u00e9gios elevados para estabelecer uma ponte com um servidor DHCP atrelado e um NAT masquerade</li> <li><code>run-nat-bridge.sh</code>: este script executa a VM com conectividade \u00e0 ponte mencionada anteriormente. Isso \u00e9 feito por meio de um dispositivo <code>tap</code> que o QEMU vai adicionar automaticamente \u00e0 ponte usando <code>/usr/lib/qemu/qemu-bridge-helper</code> e <code>/etc/qemu/bridge.conf</code>. Ele pode ser executado por um usu\u00e1rio comum.</li> <li><code>disable-nat-bridge-network.sh</code>: este script deve ser executado com privil\u00e9gios elevados para desfazer todas as modifica\u00e7\u00f5es feitas pelo script que habilitou o NAT.</li> </ol>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#aviso-aos-usuarios-de-docker","title":"Aviso aos usu\u00e1rios de Docker","text":"<p>O Docker anula todas as configura\u00e7\u00f5es de firewall feitas anteriormente. Os scripts exigem uma configura\u00e7\u00e3o padr\u00e3o de firewall, portanto ser\u00e1 necess\u00e1rio remover todas as tabelas e regras criadas pelo Docker. Recomenda-se parar o servi\u00e7o do Docker com <code>systemctl stop docker.service docker.socket</code> para evitar uma reconfigura\u00e7\u00e3o surpresa do firewall.</p> <p>Dever\u00e1 ser poss\u00edvel restaurar as configura\u00e7\u00f5es padr\u00f5es do firewall usando o comando: <code>systemctl stop docker.service docker.socket</code>. Isso vai quebrar a conex\u00e3o \u00e0 rede de quaisquer cont\u00eaineres na m\u00e1quina at\u00e9 que o servi\u00e7o do Docker seja reiniciado.</p>"},{"location":"vms/ubuntu-14/how-to-use-ptbr/#como-adicionar-arquivos-manualmente-a-sua-maquina-virtual","title":"Como adicionar arquivos manualmente \u00e0 sua m\u00e1quina virtual","text":"<p>\u00c9 poss\u00edvel que deseje adicionar arquivos do sistema anfitri\u00e3o, a sua m\u00e1quina atual, para o convidado, armazenado nas m\u00e1quinas virtuais. A maneira mais comum de se fazer isso \u00e9 usando a tecnologia SSH, mas ela requer a configura\u00e7\u00e3o de um servidor SSH no convidado e de um cliente SSH no anfitri\u00e3o.</p> <p>uma maneira mais r\u00e1pida \u00e9 adicionar os arquivos diretamente <code>as imagens das m\u00e1quinas virtuais. Essa abordagem requer que as VMs n\u00e3o estejam em execu\u00e7\u00e3o, ao contr\u00e1rio da baseada em SSH. \u00c9 mais conveniente fazer a transfer\u00eancia de arquivos usando a</code>guestfish`, uma shell de sistema especializada em manipular imagens de m\u00e1quinas virtuais.</p> <p>\u00c9 poss\u00edvel criar um script baseado no <code>inject-home.sh</code>, ou usar o <code>guestfish</code> em seu modo interativo, que funciona de modo semelhante a um shell de sistema comum. Apesar de exigir mais digita\u00e7\u00e3o, a segunda abordagem \u00e9 mais amig\u00e1vel para usu\u00e1rios iniciantes, e ser\u00e1 a explorada neste tutorial.</p> <p>Primeiramente, deve-se saber o caminho dos arquivos que deseja adicionar \u00e0 VM, e a localiza\u00e7\u00e3o desejada deles na m\u00e1quina virtual. Esses ser\u00e3o par\u00e2metros que ser\u00e3o usados no comando <code>copy-in</code> da <code>guestfish</code>, respons\u00e1vel por copiar os arquivos para a VM.</p> <p>Ent\u00e3o, deve-se montar a parti\u00e7\u00e3o da m\u00e1quina virtual que possui o caminho de sa\u00edda. Essa \u00e9 a etapa mais complicada, pois requer o conhecimento das parti\u00e7\u00f5es presentes no arquivo de imagem da m\u00e1quina virtual. Caso tenha seguido as instru\u00e7\u00f5es anteriores, e tenha instalado a VM usando as configura\u00e7\u00f5es recomendadas, conseguir\u00e1 usar os seguintes comandos ap\u00f3s executar <code>guestfish</code> em seu terminal com o diret\u00f3rio de trabalho apontando para onde a imagem est\u00e1 localizada:</p> <pre><code>&lt;!. ./env-vars.sh &gt; /dev/null; echo \"add '${DISK_LOCATION}'\"\nrun\nmount '/dev/sda1' '/'\n</code></pre> <p>Com a parti\u00e7\u00e3o principal montada, poder\u00e1 usar o comando <code>ls</code> para listar os arquivos e diret\u00f3rios. A c\u00f3pia dos arquivos para a VM \u00e9 feita atrav\u00e9s do comando <code>copy-in</code>:</p> <pre><code># copying a file or directory from the current host directory\ncopy-in my-file-or-directory /home/softex\n# copying a file or directory from an absolute path in the host\ncopy-in /absolute/path/in/the/host/something /desired/path/in/the/vm\n</code></pre> <p>Os scripts usam uma sintaxe mais complicada para onter automaticamente o usu\u00e1rio que foi configurado no arquivo <code>env-vars.sh</code>:</p> <pre><code>&lt;!. ./env-vars.sh &gt; /dev/null; echo \"copy-in 'my-file' '/home/${VM_USER}/abc'\"\n</code></pre> <p>Depois de copiar todos os arquivos, n\u00e3o se esque\u00e7a de desmontar todas as parti\u00e7\u00f5es e fechar o <code>guestfish</code> antes de rodar a VM:</p> <pre><code>umount-all\nexit\n</code></pre>"},{"location":"vms/ubuntu-14/how-to-use/","title":"Set up and run a VM for developing NAOv4-based solutions","text":"<ul> <li>English</li> </ul>"},{"location":"vms/ubuntu-14/how-to-use/#configurando-e-executando-uma-maquina-virtual-para-desenvolver-para-o-naov4","title":"Configurando e executando uma m\u00e1quina virtual para desenvolver para o NAOv4","text":"<ul> <li>Portugu\u00eas</li> </ul>"},{"location":"vms/ubuntu-16/how-to-use-en/","title":"Set up and run a VM for developing NAOv6-based solutions","text":""},{"location":"vms/ubuntu-16/how-to-use-en/#setup","title":"Setup","text":"<p>The scripts are flexible, but they still have requirements in order to be run.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#packages","title":"Packages","text":"<p>These scripts need the following packages to be installed on the host's system (assuming a Debian GNU/Linux based distribution, such as Ubuntu, Linux Mint):</p> Package Version qemu-system-x86 6.2.0 qemu-utils 6.2.0 qemu-system-gui 6.2.0 qemu-block-extra 6.2.0 ovmf 2022.02 libguestfs-tools 1.46.2 iproute2 5.15 nftables 1.0.2 <p>The scripts assume that KVM-based accelerated virtualisation is enabled on the host machine. This requires a compatible processor and it may require a configuration in the UEFI/BIOS (AMD-V, AMD SVM, Intel VT, Intel VT-x, Intel VMX).</p> <p>The package <code>cpu-checker</code> is able to verify if KVM is correctly enabled: one only needs to run the command <code>kvm-ok</code> as superuser.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#expected-directory-structure","title":"Expected directory structure","text":"<p>Even though these scripts can be modified easily, they expect the following directory structure in their current form:</p> <ul> <li><code>env-vars.sh</code>, a script to centralise the VM's configurations</li> <li>an image from Ubuntu's installation disk version 16.04 named as <code>ubuntu-16.04-desktop-amd64.iso</code> (this can be altered in the <code>IMAGE_LOCATION</code> variable at the <code>env-vars.sh</code> script)</li> </ul> <p>The GNU/Linux distribution for fully installing NAOv6's programming environment is Ubuntu 16.04 LTS. It is highly possible that one may be able to run it on the equivalent Debian release.</p> <p>If the user wishes to only develop programs using NAOv6's C++11 API, it may be possible to use a newer GNU/Linux distribution, provided that it has support for Python 2 and Pip 20.3.4.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#creating-the-vm-and-preparing-to-compile-naoqi-for-naov6","title":"Creating the VM and preparing to compile NAOqi for NAOv6","text":"<p>The user must run in their host machine the scripts inside this repository in the following order:</p> <ol> <li><code>reset-main-drive.sh</code></li> <li><code>first-boot.sh</code></li> </ol> <p>After installing Ubuntu 16.04 in their virtual machine, the following scripts must be executed in their host machine:</p> <ol> <li><code>update-sources.sh</code></li> <li><code>inject-home.sh</code></li> </ol> <p>Now, inside the virtual machine, also known as the guest machine, the user must run the <code>prepare-naoqi-requirements.sh</code> script to install Pip 20.3.4.</p> <p>Finally, the user will be able to install the NAOv6 development environment using the <code>install-naov6.sh</code> script.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#starting-the-virtual-machine-up-for-the-first-time","title":"Starting the Virtual Machine up for the first time","text":"<p>The initial images are created by the <code>reset-main-drive.sh</code> and <code>first-boot.sh</code> scripts. The former creates a QCOW2 image that will perform as the virtual machine's or guest system's hard drive, and the latter will boot the VM with the Ubuntu 16 LTS installation disk.</p> <p>With the drives created, run the initialisation script and install a regular Ubuntu 16.04 LTS installation:</p> <ul> <li>Language and keyboard layout: Portugu\u00eas Brasileiro (or other UTF-8 locale)</li> <li>Erase disk and install Ubuntu</li> <li>Timezone: Sao Paulo (or your local timezone)</li> <li>User: softex (must be the one specified in <code>VM_USER</code> in <code>env-vars.sh</code>)</li> </ul>"},{"location":"vms/ubuntu-16/how-to-use-en/#warning","title":"WARNING","text":"<p>The scripts expect an unified root partition scheme. Do not split <code>/home</code> or other directories into other partitions unless you know how to modify the scripts that copy data into or from the virtual machine or guest system.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#running-the-vm","title":"Running the VM","text":"<p>Sometimes the Brazilian server takes too long to synchronise with the main server, leading to failed installations or upgrades. In order to avoid this problem, please run the following script to set the repository to the main archive:</p> <pre><code>./update-sources.sh\n</code></pre> <p>Don't forget to update (<code>apt update</code>) and upgrade (<code>apt dist-upgrade</code>) if there are any updates available.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#how-to-reclaim-unused-memory-from-the-virtual-machine","title":"How to reclaim unused memory from the Virtual Machine","text":"<p>If you are running the virtual machine on a memory constrained host, we recommend you to use the included <code>virtio-balloon</code> functionality. This will recover unused memory from the virtual machine (the guest) and return it to your computer (the host).</p> <p>A balloon driver is a special driver included on the kernels of some operating systems that helps the hypervisors, programs used to run virtual machines, to recover unused memory from their guests. This drivers offers two operations: a balloon inflation and a deflation.</p> <p>The inflation procedure is used to reclaim unused memory: it orders the driver to create memory pressure on the guest machine, triggering a page update. This decreases the available memory in the guest, but it enables the host to reclaim any unused pages.</p> <p>The deflation procedure increases the available memory on the guest up its configured physical memory limit. It is commonly used after an inflation procedure to allow the virtual machine to use its configured physical memory.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#how-to-use-the-qemus-balloon-driver","title":"How to use the QEMU's balloon driver","text":"<p>The QEMU's balloon driver is controlled in the QEMU monitor on the implementation offered by the scripts. The <code>balloon</code> command takes an argument that specifies the target logical size of the virtual machine:</p> <ul> <li>if the argument is less than the physical memory configured for the VM, the balloon will be inflated in the guest, and any unused pages will be reclaimed;</li> <li>if the argument is equal or greater than the guest's physical memory, the balloon will be deflated until it no longer restricts the virtual machine's physical memory.</li> </ul> <p>Please be aware that the <code>virtio-balloon</code> does not require the installation of any external driver on most GNU/Linux-based guests, as it is included in the kernel since 2008 (version 2.6.25).</p> <p>It is important to always have in mind that the balloon inflation operation should only be performed when the virtual machine is not under memory pressure. This means that you should only try to recover unused memory from the VM when it has a healthy amount of free memory to keep running without needing to swap.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#preparing-to-install-naoqi-for-naov6","title":"Preparing to install NAOqi for NAOv6","text":"<p>Ubuntu 16.04 has an old version of <code>pip</code>. This requires an installation of the last Python 2 compatible release to be able to download the packages and their dependencies. These steps can be automated by sending a script to the user's home on the VM:</p> <pre><code>./inject-home.sh\n</code></pre> <p>After the script is sent to the user's home, it must be executed in the VM. It will propmpt for administrative privileges before updating the repository and installing dependencies for installing Pip:</p> <pre><code>./prepare-naoqi-requirements.sh\n</code></pre>"},{"location":"vms/ubuntu-16/how-to-use-en/#installing-naov6-development-environment","title":"Installing NAOv6 development environment","text":"<p>After running the preparation script, the installation one must be run on a new terminal session. If you wish to remain in the same session, you must reload your <code>.bashrc</code> (<code>source .bashrc</code>) to enable the modifications made to enable PIP2 and its binaries.</p> <pre><code>./install-naov6.sh\n</code></pre> <p>This script will also prompt for administrative rights, as it needs to install packages used by the C++ and Python2 SDKs.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#activating-choregraphe","title":"Activating Choregraphe","text":"<p>Choregraphe may prompt for its activation key on its first initialisation. This key is available in the installation script, and it will also be printed to the terminal after the script is executed.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#configuring-the-host-usb","title":"Configuring the host USB","text":"<p>The <code>env-vars.sh</code> script has four variables to control how the virtual machine will connect to the host USB device:</p> <ul> <li><code>USB_HOST_BUS</code>: the bus' ID, including leading zeros</li> <li><code>USB_HOST_ADDRESS</code>: the device's ID in the aforementioned bus, including leading zeros</li> <li><code>USB_VENDOR_ID</code>: the device's vendor ID in hexadecimal notation, that is, the device's vendor ID preceded by <code>0x</code></li> <li><code>USB_PRODUCT_ID</code>: the device's product ID in hexadecimal notation, that is, the device's product ID preceded by <code>0x</code></li> </ul> <p>The variables match the output of the <code>lsusb</code> command:</p> <pre><code>Bus $USB_HOST_BUS Device $USB_HOST_ADDRESS: ID $USB_VENDOR_ID:$USB_PRODUCT_ID MyUSB Device Thing\n</code></pre> <p>There are two scripts that will connect the host's device to the virtual machine:</p> <ul> <li><code>run-usb-productid.sh</code>: connects only the device with the matching vendor and product ID as long as it is connected to the specified port. It requires specifying all the four variables;</li> <li><code>run-usb-hostid.sh</code>: connects anything currenctly connected to the specified port. It requires specifying only the bus and the device.</li> </ul> <p>The virtualiser uses the <code>/dev/bus/usb</code> files to connect the VM to the host device. This requires superuser permissions on most machines. In order to connect a host USB device to the VM, the user must provide the script with the necessary privileges (run it as root, prefix with <code>sudo</code>) or change the permissions of the USB interface (changing its group with <code>chgrp</code> to a group that it user takes part in, or changing its owner with <code>chown</code>).</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#example","title":"Example","text":"<p>Consider the following <code>lsusb</code> output:</p> <pre><code>Bus 001 Device 001: ID 0001:0001 USB Thing 1\nBus 001 Device 002: ID 0001:0002 USB Thing 2\nBus 001 Device 003: ID 0001:0001 USB Thing 1\nBus 002 Device 001: ID 0002:0001 USB Device 1\nBus 002 Device 002: ID 0002:0002 USB Device 2\nBus 002 Device 003: ID 0002:0001 USB Device 1\n</code></pre> <p>If one wishes to connect the <code>USB Thing 1</code> connected at the <code>Bus 001</code> as the device numbered <code>003</code>, they should configure the variables at <code>env-vars.sh</code> as:</p> <pre><code>USB_HOST_BUS=\"001\"\nUSB_HOST_ADDRESS=\"003\"\nUSB_VENDOR_ID=\"0x0001\"\nUSB_PRODUCT_ID=\"0x0001\"\n</code></pre> <p>Before running the desired script, the permissions must be set for the USB file (<code>chown the-user /dev/bus/usb/001/003</code>) or the script must be run with elevated privileges (<code>sudo</code> or run as root).</p> <p>Please be aware that in order to connect only the required device to the VM, one must run the VM using <code>run-usb-productid.sh</code>. Choosing the <code>run-usb-productid.sh</code> would connect all the devices connected to the <code>Bus 001</code>, the two <code>USB Thing 1</code> and the <code>USB Thing 2</code>.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#nao-flasher-permissions","title":"NAO Flasher permissions","text":"<p>NAO Flasher requires administrative permissions (<code>sudo</code> or execution as the <code>root</code> user) to write data. If <code>sudo</code> can't find the program's path, you may find it with <code>command -v flasher</code>.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#compiling-c-code","title":"Compiling C++ code","text":"<p>The qibuild framework requires that all projects must be based inside a worktree. The configuration script creates a worktree inside the <code>NAO6/worktree</code> directory. It is configured with the C++ SDK as the default toolchain, and the CTC is also available if the user wishes to set up their projects as so.</p> <p>The worktree path is stored in the user's <code>.bashrc</code> in the <code>NAO_QIBUILD_WORKSPACE</code> variable.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#qibuild-configuration","title":"Qibuild configuration","text":"<p>The script sets up the configurations' names in the user's <code>.bashrc</code>. The following environment variables hold data important for setting up qibuild-based projects:</p> <ul> <li><code>NAOQI_CPP_QIBUILD_TOOLCHAIN</code>: the name of the toolchain used when it was added to the worktree.</li> <li><code>NAOQI_CPP_QIBUILD_CONFIG</code>: the name of the configuration generated after the SDK was added to the worktree. It is the default toolchain configuration.</li> <li><code>NAOQI_QIBUILD_CTC</code>: the name of the cross toolchain in the worktree.</li> <li><code>NAOQI_QIBUILD_CTC_CONFIG</code>: the name of the configuration in the worktree. It can be used to replace the C++ SDK as the project's toolchain in order to create a binary that can be transfered to the robot.</li> </ul>"},{"location":"vms/ubuntu-16/how-to-use-en/#basic-project-setup","title":"Basic project setup","text":"<p>The following steps will create and build a C++ SDK-based project on the configured worktree:</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure\nqibuild make\n</code></pre> <p>The C++ SDK is configured as the default toolchain. If you wish to set up a project with an explicit configuration and build setup, you may run:</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure -c \"${NAOQI_CPP_QIBUILD_CONFIG}\" my-project\nqibuild make -c \"${NAOQI_CPP_QIBUILD_CONFIG}\" my-project\n</code></pre> <p>Compiling a project that will be run on the robot requires an explicit configuration to replace the default toolchain by the cross-compilation one (NAO CTC):</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure -c \"${NAOQI_QIBUILD_CTC_CONFIG}\" \nqibuild make -c \"${NAOQI_QIBUILD_CTC_CONFIG}\" \n</code></pre>"},{"location":"vms/ubuntu-16/how-to-use-en/#connecting-to-the-simulated-robot","title":"Connecting to the simulated robot","text":"<p>The simulated robot is an executable located in the C++ toolchain directory named <code>naoqi</code>. Provided that the tools were installed with the aforementioned scripts in their default configuration, it will be located at <code>/home/softex/NAO6/SDKs/cpp/naoqi-sdk-2.8.5.10-linux64/naoqi</code>.</p> <p>The simulated robot must always be initialised before running Choregraphe or your desired module. It will behave similarly to a physical robot, except by its lack of cameras, and it will by default initialise its broker at localhost, also known as IPv4 127.0.0.1, at the port 9559.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#simulating-in-choregraphe","title":"Simulating in Choregraphe","text":"<p>If you wish to simulate your C++ module in Choregraphe, first you should start the simulated <code>naoqi</code>. After doing it, then you must open Choregraphe, and connect it to the broker available at 127.0.0.1 port 9559.</p> <p>After these steps you should see a 3D simulation of a NAO robot in the Robot View panel. At this stage you are ready to connect to the simulated robot and check how it behaves in the simplified simulation offered by Choregraphe.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#connecting-to-the-robot","title":"Connecting to the Robot","text":"<p>There are three scripts that are used when connecting the Virtual Machine to your NAO:</p> <ol> <li><code>enable-nat-bridge-network.sh</code>: this script must be run with elevated privileges to set a bridge with a bound DHCP server and a NAT masquerade up</li> <li><code>run-nat-bridge.sh</code>: this script executes the VM with connectivity to the previously configured bridge. This is achieved by a <code>tap</code> device that QEMU will automatically add to the bridge using <code>/usr/lib/qemu/qemu-bridge-helper</code> and <code>/etc/qemu/bridge.conf</code>. It may be executed by a common user.</li> <li><code>disable-nat-bridge-network.sh</code>: this script must be run with elevated privileges to undo all the modifications made by the NAT enabler script.</li> </ol>"},{"location":"vms/ubuntu-16/how-to-use-en/#warning-to-docker-users","title":"Warning to Docker users","text":"<p>Docker overrides all user firewall configurations. The scripts currently require a standard firewall configuration, so it will be necessary to remove all tables and rules created by Docker. It is recommended to stop Docker with <code>systemctl stop docker.service docker.socket</code> to avoid a surprise firewall reconfiguration event.</p> <p>You should be able to reset nftables to its standard configuration using the command: <code>nft flush ruleset</code>. This will break the network for the containers until the machine or the Docker service unit are restarted.</p>"},{"location":"vms/ubuntu-16/how-to-use-en/#how-to-manually-add-files-to-the-virtual-machine","title":"How to manually add files to the Virtual Machine","text":"<p>You may want to add files from the host system, your current machine, to the guest one, stored in the virtual machines. An usual way to do it is through SSH, but it requires configuring an SSH server in the guest and a client in the host.</p> <p>A quicker way is to add the files directly to the virtual machine images. This approach requires that the VMs must not be in execution, unlike the SSH-based one. It is most convenient to use <code>guestfish</code>, a system shell that specialises in manipulating virtual machine images, to manually add files to the VMs.</p> <p>You may create a script based on <code>inject-home.sh</code>, or use <code>guestfish</code> on its interactive mode, which works similarly to the usual system shell. Even though it requires more typing, the latter approach is more user-friendly and will be explored in this tutorial.</p> <p>Firstly, you must know the path to the files that you wish to add to your VM and their desired location in the virtual machine. These will be parameters that will be used in <code>guestfish</code>'s <code>copy-in</code> command, responsible for copying files into the VM.</p> <p>Then you must mount the virtual machine's partition that holds the output path. This is the more cumbersome stage, as it requires knowing which partitions are included in the virtual machine's image file. If you followed the previous instructions and installed the VM using the recommended settings, you will be able to use the following commands after executing <code>guestfish</code> on your terminal with the working directory pointing where the image is located:</p> <pre><code>&lt;!. ./env-vars.sh &gt; /dev/null; echo \"add '${DISK_LOCATION}'\"\nrun\nmount '/dev/sda2' '/'\n</code></pre> <p>With the main partition mounted, you may use the <code>ls</code> command to list files and directories. Copying files into the VM is done though the <code>copy-in</code> command:</p> <pre><code># copying a file or directory from the current host directory\ncopy-in my-file-or-directory /home/softex\n# copying a file or directory from an absolute path in the host\ncopy-in /absolute/path/in/the/host/something /desired/path/in/the/vm\n</code></pre> <p>The scripts use a more complicated syntax to automatically obtain the user that has been configured in the <code>env-vars.sh</code> file:</p> <pre><code>&lt;!. ./env-vars.sh &gt; /dev/null; echo \"copy-in 'my-file' '/home/${VM_USER}/abc'\"\n</code></pre> <p>After copying all the desired files, do not forget to unmount all the partitions and close <code>guestfish</code> before running the VM:</p> <pre><code>umount-all\nexit\n</code></pre>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/","title":"Configurando e executando uma m\u00e1quina virtual para desenvolver para o NAO6","text":""},{"location":"vms/ubuntu-16/how-to-use-ptbr/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Os scripts s\u00e3o flex\u00edveis, mas possuem requisitos para serem executados.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#pacotes","title":"Pacotes","text":"<p>Considerando uma distyribui\u00e7\u00e3o baseada no Debian GNU/Linux, como o Ubuntu ou o Linux Mint, os scripts precisam que os seguintes pacotes estejam instalados:</p> Pacote Vers\u00e3o qemu-system-x86 6.2.0 qemu-utils 6.2.0 qemu-system-gui 6.2.0 qemu-block-extra 6.2.0 ovmf 2022.02 libguestfs-tools 1.46.2 iproute2 5.15 nftables 1.0.2 <p>Os pacotes assumem que a virtualiza\u00e7\u00e3o por KVM est\u00e1 habilitada na m\u00e1quina anfitri\u00e3, aquela que executar\u00e1 as m\u00e1quinas virtuais, tamb\u00e9m conhecidas como m\u00e1quinas hospedadas ou virtual machines (VMs). Essa tecnologia requer um processador compat\u00edvel e uma habilita\u00e7\u00e3o na UEFI/BIOS (AMD-V, AMD SVM, Intel VT, Intel VT-x, Intel VMX).</p> <p>O pacote <code>cpu-checker</code> consegue verificar se o KVM est\u00e1 funcionando atrav\u00e9s do comando <code>kvm-ok</code>, que necessita de permiss\u00f5es de superusu\u00e1rio.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#estrutura-de-diretorios-esperada","title":"Estrutura de diret\u00f3rios esperada","text":"<p>Apesar da modifica\u00e7\u00e3o f\u00e1cil, os scripts esperam uma estrutura de diret\u00f3rio espec\u00edfica:</p> <ul> <li><code>env-vars.sh</code>, um script que centraliza as configura\u00e7\u00f5es da VM</li> <li>uma imagem do disco de instala\u00e7\u00e3o do Ubuntu vers\u00e3o 16.04 nomeada como <code>ubuntu-16.04-desktop-amd64.iso</code> (isto pode ser alterado na vari\u00e1vel <code>IMAGE_LOCATION</code> do script <code>env-vars.sh</code>)</li> </ul> <p>A distribui\u00e7\u00e3o GNU/Linux usada para instalar o ambiente completo do NAOv6 \u00e9 o Ubuntu 16.04 LTS. \u00c9 muito prov\u00e1vel que o mesmo possa ser feito na vers\u00e3o equivalente do Debian.</p> <p>Caso o usu\u00e1rio deseje desenvolver programas apenas na API C++11 do NAOv6, pode ser poss\u00edvel usar uma distribui\u00e7\u00e3o GNU/Linux mais atualizada, contanto que tenha suporte para Python 2 e Pip 20.3.4.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#criando-a-vm-e-preparando-para-compilar-o-naoqi-do-naov6","title":"Criando a VM e preparando para compilar o NAOqi do NAOv6","text":"<p>O usu\u00e1rio deve executar os seguintes scripts em sua m\u00e1quina anfitri\u00e3o na ordem em que aparecem abaixo:</p> <ol> <li><code>reset-main-drive.sh</code></li> <li><code>first-boot.sh</code></li> </ol> <p>Depois de instalar o Ubuntu 16.04 na m\u00e1quina virtual, ainda \u00e9 necess\u00e1rio que os seguintes scripts sejam executados na m\u00e1quina anfitri\u00e3:</p> <ol> <li><code>update-sources.sh</code></li> <li><code>inject-home.sh</code></li> </ol> <p>Agora, dentro da m\u00e1quina virtual, tamb\u00e9m conhecida como m\u00e1quina hospedada, o usu\u00e1rio deve executar o script <code>prepare-naoqi-requirements.sh</code> para instalar o Pip 20.3.4.</p> <p>Por fim, o usu\u00e1rio poder\u00e1 instalar o ambiente de desenvolvimento do NAOv6 executando o script <code>install-naov6.sh</code>.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#inicializando-a-maquina-virtual-pela-primeira-vez","title":"Inicializando a M\u00e1quina Virtual pela Primeira vez","text":"<p>A imagem \u00e9 inicializada com os scripts <code>reset-main-drive.sh</code> e <code>first-boot.sh</code>. O primeiro cria uma imagem QCOW2, que funciona como o disco r\u00edgido da m\u00e1quina virtual ou sistema anfitri\u00e3o, e o segundo inicializa a m\u00e1quina virtual com o disco de instala\u00e7\u00e3o do Ubuntu 16.</p> <p>Com o disco criado, execute o script de inicializa\u00e7\u00e3o e instale o Ubuntu 16 com as configura\u00e7\u00f5es usuais:</p> <ul> <li>Linguagem e leiaute do teclado: Portugu\u00eas Brasileiro (ou putro locale UTF-8)</li> <li>Apagar o disco e instalar o Ubuntu</li> <li>Fuso hor\u00e1rio: Sao Paulo (ou o seu fuso hor\u00e1rio local)</li> <li>Usu\u00e1rio: <code>softex</code> (deve ser o mesmo especificado na <code>VM_USER</code> do <code>env-vars.sh</code>)</li> </ul>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#aviso","title":"AVISO","text":"<p>Os scripts esperam um esquema de parti\u00e7\u00e3o com o root unificado. N\u00e3o separe o <code>/home</code> ou qualquer outro diret\u00f3rio em outras parti\u00e7\u00f5es, a n\u00e3o ser que saiba como modificar os scripts que copiam dados para dentro ou a partir da m\u00e1quina virtual (sistema anfitri\u00e3o).</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#executando-a-vm","title":"Executando a VM","text":"<p>De vez em quando, o servidor brasileiro demora demais para sincronizar com o principal, causando falhas na instala\u00e7\u00e3o ou atualiza\u00e7\u00e3o. Para evitar tal problema, por favor execute o seguinte script, que configurar\u00e1 o reposit\u00f3rio do sistema para o arquivo principal do Ubuntu:</p> <pre><code>./update-sources.sh\n</code></pre> <p>N\u00e3o se esque\u00e7a de atualizar a lista de pacotes (<code>apt update</code>) e atualiz\u00e1-los (<code>apt dist-upgrade</code>) sempre que houver atualiza\u00e7\u00f5es dispon\u00edveis.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#como-recuperar-memoria-nao-usada-da-maquina-virtual","title":"Como recuperar mem\u00f3ria n\u00e3o usada da m\u00e1quina virtual","text":"<p>Se estiver executando a m\u00e1quina virtual em um anfitri\u00e3o com limita\u00e7\u00f5es de mem\u00f3ria, recomenda-se qie use a funcionalidade <code>virtio-balloon</code>, j\u00e1 inclu\u00edda nos scripts. Ela recuperar\u00e1 a mem\u00f3ria sem uso da m\u00e1quina virtual (convidado ou hospedado) e devolv\u00ea-la-\u00e1 para o computador (anfitri\u00e3o).</p> <p>Um balloon driver \u00e9 um driver especial inclu\u00eddo nos kernels de alguns sistemas operacionais que ajuda os hypervisors, programas que executam as m\u00e1quinas virtuais, a recuperar mem\u00f3ria sem uso dos sistemas convidados. Estes drivers implementam duas opera\u00e7\u00f5es: o enchimento e o esvaziamento do bal\u00e3o.</p> <p>A opera\u00e7\u00e3o de enchimento \u00e9 usada para recuperar a mem\u00f3ria sem uso: ela faz com que o driver crie press\u00e3o na mem\u00f3ria na m\u00e1quina hospedada, causando atualiza\u00e7\u00f5es nas p\u00e1ginas. Essa opera\u00e7\u00e3o diminui a mem\u00f3ria dispon\u00edvel no convidado, mas possibilita que o anfitri\u00e3o recupere as p\u00e1ginas que est\u00e3o sem uso.</p> <p>A opera\u00e7\u00e3o de esvaziamento aumenta a mem\u00f3ria dispon\u00edvel no hospedado at\u00e9 o seu limite de mem\u00f3ria f\u00edsica. Ela normalmente \u00e9 feita ap\u00f3s uma opera\u00e7\u00e3o de esvaziamento de modo a permitir que a m\u00e1quina virtual possa utilizar a sua mem\u00f3ria f\u00edsica configurada.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#como-usar-o-driver-balloon-do-qemu","title":"Como usar o driver balloon do QEMU","text":"<p>O driver bal\u00e3o do QEMU \u00e9 controlado pelo monitor QEMU na implementa\u00e7\u00e3o fornecida pelos scripts. O comando <code>balloon</code> possui um argumento que especifica o alvo para o tamanho l\u00f3gico da m\u00e1quina virtual:</p> <ul> <li>se o argumento for menor que o tamanho da mem\u00f3ria f\u00edsica configurado para a VM, o bal\u00e3p ser\u00e1 \"inflado\" na m\u00e1quina convidada, e as p\u00e1ginas n\u00e3o usadas ser\u00e3o recuperadas;</li> <li>se o argumento for igual ou maior que o tamanho da mem\u00f3ria f\u00edsica configurado para a VM, o bal\u00e3o ser\u00e1 \"esvaziado\" at\u00e9 que n\u00e3o mais limite o uso da mem\u00f3ria na m\u00e1quina virtual.</li> </ul> <p>\u00c9 importante lembrar que o <code>virtio-balloon</code> n\u00e3o requer a instala\u00e7\u00e3o de qualquer driver externo na maioria dos convidados baseados em GNU/Linux, j\u00e1 que ele est\u00e1 inclu\u00eddo no kernel desde 2008 (vers\u00e3o 2.6.25).</p> <p>\u00c9 importante lembnrar que a opera\u00e7\u00e3o de enchimento do bal\u00e3o s\u00f3 deve ser realizada quando a m\u00e1quina virtual n\u00e3o est\u00e1 sob press\u00e3o de mem\u00f3ria. Isso significa que s\u00f3 se deve tentar recuperar mem\u00f3ria sem uso da m\u00e1quina virtual enquanto ela possuir uma quantidade suficiente de mem\u00f3ria livre para continuar executando sem a necessidade de entrar e, swap.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#preparando-para-instalar-o-naoqi-para-o-naov6","title":"Preparando para instalar o NAOqi para o NAOv6","text":"<p>Ubuntu 16.04 has an old version of <code>pip</code>. This requires an installation of the last Python 2 compatible release to be able to download the packages and their dependencies. These steps can be automated by sending a script to the user's home on the VM:</p> <p>O Ubuntu 16.04 tem uma vers\u00e3o antiga do <code>pip</code>. Ela n\u00e3o consegue mais baixar os pacotes e suas depend\u00eancias. Isso requer que se instale a \u00faltima vers\u00e3o compat\u00edvel com o Python 2. Tais passos podem ser automatizados com o envio de um script para o diret\u00f3rio <code>home</code> do usu\u00e1rio na VM:</p> <pre><code>./inject-home.sh\n</code></pre> <p>Depois do script ser enviado para o <code>home</code>, ele deve ser executado na VM. Ele ir\u00e1 pedir por privil\u00e9gios administrativos antes de atualizar o reposit\u00f3rio, instalar as depend\u00eancias e instalar o Pip:</p> <pre><code>./prepare-naoqi-requirements.sh\n</code></pre>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#instalando-o-ambiente-de-desenvolvimento-do-naov6","title":"Instalando o ambiente de desenvolvimento do NAOv6","text":"<p>Depois de executar o script de prepara\u00e7\u00e3o, o instalador deve ser executado em uma nova sess\u00e3o de terminal. Caso deseje permanecer na mesma sess\u00e3o, dever\u00e1 recarregar o <code>.bashrc</code> (<code>source .bashrc</code>) para habilitar as modifica\u00e7\u00f5es feitas para habilitar o PIP 2 e seus bin\u00e1rios.</p> <pre><code>./install-naov6.sh\n</code></pre> <p>O script de instala\u00e7\u00e3o tamb\u00e9m requer direitos administrativos, pois precisa de instalar pacotes usados pelos SDKs C++ e Python 2.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#ativando-o-choregraphe","title":"Ativando o Choregraphe","text":"<p>O Choregraphe pode pedir por uma chave de ativa\u00e7\u00e3o na sua primeira inicializa\u00e7\u00e3o. Essa chave est\u00e1 dispon\u00edvel no script de instala\u00e7\u00e3o, e tamb\u00e9m ser\u00e1 impressa no terminal depois da execu\u00e7\u00e3o do script.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#configurando-o-usb-do-anfitriao","title":"Configurando o USB do anfitri\u00e3o","text":"<p>O script <code>env-vars.sh</code> tem quatro vari\u00e1veis que controlam como a m\u00e1quina virtual vai se conectar com o dispositivo USB conectado no anfitri\u00e3o:</p> <ul> <li><code>USB_HOST_BUS</code>: o identificador do barramento, incluindo os zeros \u00e0 esquerda</li> <li><code>USB_HOST_ADDRESS</code>: o identificador do dispositivo no barramento mencionado anteriormente, incluindo os zeros \u00e0 esquerda</li> <li><code>USB_VENDOR_ID</code>: o identificador do fabricante do dispositivo em nota\u00e7\u00e3o hexadecimal, isto \u00e9, o identificador do fabricante precedido por <code>0x</code></li> <li><code>USB_PRODUCT_ID</code>: o identificador do produto em nota\u00e7\u00e3o hexadecimal, isto \u00e9, o identificador do produto precedido por <code>0x</code></li> </ul> <p>As vari\u00e1veis relacionam-se com a sa\u00edda do comando <code>lsusb</code>:</p> <pre><code>Bus $USB_HOST_BUS Device $USB_HOST_ADDRESS: ID $USB_VENDOR_ID:$USB_PRODUCT_ID MyUSB Device Thing\n</code></pre> <p>H\u00e1 dois scripts que conectar\u00e3o o dispositivo no anfitri\u00e3o na m\u00e1quina virtual:</p> <ul> <li><code>run-usb-productid.sh</code>: conecta apenas o dispositivo com os mesmos identificadores do fabricante e do produto, contanto que ele esteja conectado \u00e0 porta especificada. Requer a especifica\u00e7\u00e3o de todas as quatro vari\u00e1veis;</li> <li><code>run-usb-hostid.sh</code>: conecta qualquer dispositivo presente na porta especificada. Requer a especifica\u00e7\u00e3o somente do barramento e do dispositivo.</li> </ul> <p>O virtualizador usa os arquivos presentes em <code>/dev/bus/usb</code> para conectar a VM ao dispositivo do anfitri\u00e3o. Isso requer permiss\u00f5es de superusu\u00e1rio na maioria das m\u00e1quinas. Para conectar um dispositivo USB do anfitri\u00e3o \u00e0 VM, o usu\u00e1rio deve prover o script com os privil\u00e9gios suficientes, executando-o como <code>root</code> ou com o comando <code>sudo</code>; ou modificar as permiss\u00f5es da interface USB, modificando o seu grupo para um que o usu\u00e1rio fa\u00e7a parte com <code>chgrp</code>, ou modificando o propriet\u00e1rio do arquivo com <code>chown</code>.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#exemplo","title":"Exemplo","text":"<p>Considere a seguinte sa\u00edda do <code>lsusb</code>:</p> <pre><code>Bus 001 Device 001: ID 0001:0001 USB Thing 1\nBus 001 Device 002: ID 0001:0002 USB Thing 2\nBus 001 Device 003: ID 0001:0001 USB Thing 1\nBus 002 Device 001: ID 0002:0001 USB Device 1\nBus 002 Device 002: ID 0002:0002 USB Device 2\nBus 002 Device 003: ID 0002:0001 USB Device 1\n</code></pre> <p>Se algu\u00e9m deseja conectar o <code>USB Thing 1</code>, conectado no barramento <code>Bus 001</code> como o dispositivo de n\u00famero <code>003</code>, \u00e9 necess\u00e1rio configurar as vari\u00e1veis em <code>env-vars.sh</code> como:</p> <pre><code>USB_HOST_BUS=\"001\"\nUSB_HOST_ADDRESS=\"003\"\nUSB_VENDOR_ID=\"0x0001\"\nUSB_PRODUCT_ID=\"0x0001\"\n</code></pre> <p>Antes de executar o script desejado, as permiss\u00f5es devem ser configuradas para o arquivo USB (<code>chown the-user /dev/bus/usb/001/003</code>), ou ent\u00e3o o script deve ser executado com privil\u00e9gios elevados (<code>sudo</code> ou como <code>root</code>).</p> <p>Lembre-se de que, para conectar somente o dispositivo especificado, a m\u00e1quina virtual deve ser executada a partir do script <code>run-usb-productid.sh</code>. Caso tivesse escolhido <code>run-usb-productid.sh</code>, todos os dispositivos do barramento <code>Bus 001</code> seriam conectados, ambos <code>USB Thing 1</code> e <code>USB Thing 2</code>.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#permissoes-do-nao-flasher","title":"Permiss\u00f5es do NAO Flasher","text":"<p>O NAO Flasher requer permiss\u00f5es administrativas na m\u00e1quina virtual (<code>sudo</code> ou execu\u00e7\u00e3o como <code>root</code>). Caso o <code>sudo</code> n\u00e3o consiga encontrar o caminho do comando, este pode ser encontrado usando-se <code>command -v flasher</code>.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#compilando-codigo-em-c","title":"Compilando c\u00f3digo em C++","text":"<p>O arcabou\u00e7o Qibuild requer que todos os projetos estejam dentro de uma \u00e1rvore de trabalho (worktree). O script de configura\u00e7\u00e3o cria uma \u00e1rvore de trabalho no diret\u00f3rio <code>NAO6/worktree</code>. Ela j\u00e1 \u00e9 configurada com o SDK C++ como ferramental padr\u00e3o, e o CTC tamb\u00e9m est\u00e1 dispon\u00edvel caso o usu\u00e1rio deseje configurar os seus projetos para us\u00e1-lo.</p> <p>O caminho da worktree \u00e9 armazenado no <code>.bashrc</code> do usu\u00e1rio, na vari\u00e1vel <code>NAO_QIBUILD_WORKSPACE</code>.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#configuracao-do-qibuild","title":"Configura\u00e7\u00e3o do Qibuild","text":"<p>O script configura os nomes das configura\u00e7\u00f5es no <code>.bashrc</code> do usu\u00e1rio. As seguintes vari\u00e1veis de ambiente armazenam dados importantes para a configura\u00e7\u00e3o de projetos baseados no Qibuild:</p> <ul> <li><code>NAOQI_CPP_QIBUILD_TOOLCHAIN</code>: o nome do ferramental usado quando ele foi adicionado \u00e0 \u00e1rvore de trabalho</li> <li><code>NAOQI_CPP_QIBUILD_CONFIG</code>: o nome da configura\u00e7\u00e3o gerado ap\u00f3s a adi\u00e7\u00e3o do SDK \u00e0 worktree. \u00c9 a configura\u00e7\u00e3o de ferramental padr\u00e3o.</li> <li><code>NAOQI_QIBUILD_CTC</code>: o nome do ferramental de compila\u00e7\u00e3o cruzada na \u00e1rvore de trabalho.</li> <li><code>NAOQI_QIBUILD_CTC_CONFIG</code>: o nome da configura\u00e7\u00e3o na worktree. Pode ser usada para substituir o C++ SDK como ferramental do projeto, possibilitando a cria\u00e7\u00e3o de bin\u00e1rios que podem ser executados diretamente no rob\u00f4.</li> </ul>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#configuracao-basica-de-um-projeto","title":"Configura\u00e7\u00e3o b\u00e1sica de um projeto","text":"<p>Os seguintes passos criar\u00e3o e construir\u00e3o um projeto baseado no C++ SDK na worktree configurada:</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure\nqibuild make\n</code></pre> <p>O SDK C++ \u00e9 configurado como o ferramental padr\u00e3o. Caso deseje configurar um projeto com uma configura\u00e7\u00e3o expl\u00edcita, execute:</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure -c \"${NAOQI_CPP_QIBUILD_CONFIG}\" my-project\nqibuild make -c \"${NAOQI_CPP_QIBUILD_CONFIG}\" my-project\n</code></pre> <p>Compilar um projeto que ser\u00e1 executado no rob\u00f4 requer uma configura\u00e7\u00e3o expl\u00edcita para substituir o ferramental padr\u00e3o pelo capaz de fazer compila\u00e7\u00e3o cruzada (NAO CTC):</p> <pre><code>cd \"${NAO_QIBUILD_WORKSPACE}\"\nqisrc create my-project\ncd my-project\nqibuild configure -c \"${NAOQI_QIBUILD_CTC_CONFIG}\"\nqibuild make -c \"${NAOQI_QIBUILD_CTC_CONFIG}\"\n</code></pre>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#conectando-ao-robo-simulado","title":"Conectando ao rob\u00f4 simulado","text":"<p>O rob\u00f4 simulado \u00e9 um execut\u00e1vel chamado <code>naoqi</code>, e est\u00e1 localizado no diret\u00f3rio do ferramental C++. Considerando que as ferramentas foram instaladas usando os scripts supracitados nas suas configura\u00e7\u00f5es padr\u00f5es, ele estar\u00e1 localizado em: <code>/home/softex/NAO6/SDKs/cpp/naoqi-sdk-2.8.5.10-linux64/naoqi</code>.</p> <p>O rob\u00f4 simulado sempre deve ser inicializado antes de se executar o Choregraphe ou o seu m\u00f3dulo desejado. Ele comportar-se-\u00e1 de maneira similar ao rob\u00f4 f\u00edsico, exceto pela sua aus\u00eancia de c\u00e2meras, e iniciar\u00e1 por padr\u00e3o seu broker no localhost (IPv4 127.0.0.1) na porta 9559.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#simulando-no-choregraphe","title":"Simulando no Choregraphe","text":"<p>Caso queira simular seu m\u00f3dulo C++ no Choregraphe, primeiro deve iniciar o <code>naoqi</code> simulado. Depois, \u00e9 necess\u00e1rio abrir o Choregraphe e conect\u00e1-lo ao broker dispon\u00edvel em 127.0.0.1 na porta 9559.</p> <p>Depois desses passos, dever\u00e1 ser poss\u00edvel visualizar uma simula\u00e7\u00e3o 3D do rob\u00f4 NAO no painel de visualiza\u00e7\u00e3o do rob\u00f4. Nesta etapa estar\u00e1 pronto para conectar o m\u00f3dulo ao rob\u00f4 simulado e verificar seu comportamento na simula\u00e7\u00e3o simplificada oferecida pelo Choregraphe.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#conectando-ao-robo","title":"Conectando ao rob\u00f4","text":"<p>H\u00e1 tr\u00eas scripts que s\u00e3o usados para conectar a m\u00e1quina virtual ao seu NAO:</p> <ol> <li><code>enable-nat-bridge-network.sh</code>: este script deve ser executado com privil\u00e9gios elevados para estabelecer uma ponte com um servidor DHCP atrelado e um NAT masquerade</li> <li><code>run-nat-bridge.sh</code>: este script executa a VM com conectividade \u00e0 ponte mencionada anteriormente. Isso \u00e9 feito por meio de um dispositivo <code>tap</code> que o QEMU vai adicionar automaticamente \u00e0 ponte usando <code>/usr/lib/qemu/qemu-bridge-helper</code> e <code>/etc/qemu/bridge.conf</code>. Ele pode ser executado por um usu\u00e1rio comum.</li> <li><code>disable-nat-bridge-network.sh</code>: este script deve ser executado com privil\u00e9gios elevados para desfazer todas as modifica\u00e7\u00f5es feitas pelo script que habilitou o NAT.</li> </ol>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#aviso-aos-usuarios-de-docker","title":"Aviso aos usu\u00e1rios de Docker","text":"<p>O Docker anula todas as configura\u00e7\u00f5es de firewall feitas anteriormente. Os scripts exigem uma configura\u00e7\u00e3o padr\u00e3o de firewall, portanto ser\u00e1 necess\u00e1rio remover todas as tabelas e regras criadas pelo Docker. Recomenda-se parar o servi\u00e7o do Docker com <code>systemctl stop docker.service docker.socket</code> para evitar uma reconfigura\u00e7\u00e3o surpresa do firewall.</p> <p>Dever\u00e1 ser poss\u00edvel restaurar as configura\u00e7\u00f5es padr\u00f5es do firewall usando o comando: <code>systemctl stop docker.service docker.socket</code>. Isso vai quebrar a conex\u00e3o \u00e0 rede de quaisquer cont\u00eaineres na m\u00e1quina at\u00e9 que o servi\u00e7o do Docker seja reiniciado.</p>"},{"location":"vms/ubuntu-16/how-to-use-ptbr/#como-adicionar-arquivos-manualmente-a-sua-maquina-virtual","title":"Como adicionar arquivos manualmente \u00e0 sua m\u00e1quina virtual","text":"<p>\u00c9 poss\u00edvel que deseje adicionar arquivos do sistema anfitri\u00e3o, a sua m\u00e1quina atual, para o convidado, armazenado nas m\u00e1quinas virtuais. A maneira mais comum de se fazer isso \u00e9 usando a tecnologia SSH, mas ela requer a configura\u00e7\u00e3o de um servidor SSH no convidado e de um cliente SSH no anfitri\u00e3o.</p> <p>uma maneira mais r\u00e1pida \u00e9 adicionar os arquivos diretamente <code>as imagens das m\u00e1quinas virtuais. Essa abordagem requer que as VMs n\u00e3o estejam em execu\u00e7\u00e3o, ao contr\u00e1rio da baseada em SSH. \u00c9 mais conveniente fazer a transfer\u00eancia de arquivos usando a</code>guestfish`, uma shell de sistema especializada em manipular imagens de m\u00e1quinas virtuais.</p> <p>\u00c9 poss\u00edvel criar um script baseado no <code>inject-home.sh</code>, ou usar o <code>guestfish</code> em seu modo interativo, que funciona de modo semelhante a um shell de sistema comum. Apesar de exigir mais digita\u00e7\u00e3o, a segunda abordagem \u00e9 mais amig\u00e1vel para usu\u00e1rios iniciantes, e ser\u00e1 a explorada neste tutorial.</p> <p>Primeiramente, deve-se saber o caminho dos arquivos que deseja adicionar \u00e0 VM, e a localiza\u00e7\u00e3o desejada deles na m\u00e1quina virtual. Esses ser\u00e3o par\u00e2metros que ser\u00e3o usados no comando <code>copy-in</code> da <code>guestfish</code>, respons\u00e1vel por copiar os arquivos para a VM.</p> <p>Ent\u00e3o, deve-se montar a parti\u00e7\u00e3o da m\u00e1quina virtual que possui o caminho de sa\u00edda. Essa \u00e9 a etapa mais complicada, pois requer o conhecimento das parti\u00e7\u00f5es presentes no arquivo de imagem da m\u00e1quina virtual. Caso tenha seguido as instru\u00e7\u00f5es anteriores, e tenha instalado a VM usando as configura\u00e7\u00f5es recomendadas, conseguir\u00e1 usar os seguintes comandos ap\u00f3s executar <code>guestfish</code> em seu terminal com o diret\u00f3rio de trabalho apontando para onde a imagem est\u00e1 localizada:</p> <pre><code>&lt;!. ./env-vars.sh &gt; /dev/null; echo \"add '${DISK_LOCATION}'\"\nrun\nmount '/dev/sda1' '/'\n</code></pre> <p>Com a parti\u00e7\u00e3o principal montada, poder\u00e1 usar o comando <code>ls</code> para listar os arquivos e diret\u00f3rios. A c\u00f3pia dos arquivos para a VM \u00e9 feita atrav\u00e9s do comando <code>copy-in</code>:</p> <pre><code># copying a file or directory from the current host directory\ncopy-in my-file-or-directory /home/softex\n# copying a file or directory from an absolute path in the host\ncopy-in /absolute/path/in/the/host/something /desired/path/in/the/vm\n</code></pre> <p>Os scripts usam uma sintaxe mais complicada para onter automaticamente o usu\u00e1rio que foi configurado no arquivo <code>env-vars.sh</code>:</p> <pre><code>&lt;!. ./env-vars.sh &gt; /dev/null; echo \"copy-in 'my-file' '/home/${VM_USER}/abc'\"\n</code></pre> <p>Depois de copiar todos os arquivos, n\u00e3o se esque\u00e7a de desmontar todas as parti\u00e7\u00f5es e fechar o <code>guestfish</code> antes de rodar a VM:</p> <pre><code>umount-all\nexit\n</code></pre>"},{"location":"vms/ubuntu-16/how-to-use/","title":"Set up and run a VM for developing NAOv6-based solutions","text":"<ul> <li>English</li> </ul>"},{"location":"vms/ubuntu-16/how-to-use/#configurando-e-executando-uma-maquina-virtual-para-desenvolver-para-o-naov6","title":"Configurando e executando uma m\u00e1quina virtual para desenvolver para o NAOv6","text":"<ul> <li>Portugu\u00eas</li> </ul>"}]}